{"version":3,"file":"ambrosus.umd.min.js","sources":["../src/api/request.js","../src/utils/time-utils.js","../src/responseHandler.js","../src/utils/token-utils.js","../src/utils/file.js","../src/utils/events-utils.js","../src/utils/index.js","../src/eventHandler.js","../src/api/events.js","../src/api/assets.js","../src/api/accounts.js","../src/api/bundles.js","../src/transactions.js","../src/service.js","../src/blocks.js","../src/contracts.js","../src/index.js"],"sourcesContent":["/**\n * Copyright 2018 Ambrosus Inc.\n * Email: tech@ambrosus.com\n */\n\nimport { handleResponse } from './../responseHandler';\nimport utils from '../utils/index';\n\n/**\n * Create a GET request\n *\n * @param {string} path\n * @param {Object} headers\n * @param {Object} params\n */\nexport function getRequest(path, headers, params) {\n    return new Promise((resolve, reject) => {\n        let request = new XMLHttpRequest();\n        request.open('GET', `${path}${utils.serializeParams(params)}`, true);\n        if (headers) {\n            for (const key in headers) {\n                request.setRequestHeader(`${key}`, `${headers[key]}`);\n            }\n        }\n        request.onload = () => {\n            handleResponse(request)\n                .then(response => resolve(response))\n                .catch(error => reject(error));\n        };\n        request.send();\n    });\n}\n\n/**\n * Create a POST Request\n *\n * @param {string} path\n * @param {Object} headers\n * @param {Object} params\n */\nexport function postRequest(path, headers, params) {\n    /* istanbul ignore next */\n    return new Promise((resolve, reject) => {\n        let request = new XMLHttpRequest();\n        request.open('POST', path, true);\n\n//console.log(`postRequest.URL ${path}`);\n//console.log(`postRequest.headers ${JSON.stringify(headers)}`);\n//console.log(`postRequest.params ${JSON.stringify(params)}`);\n\n        request.setRequestHeader('Content-type', 'application/json; charset=utf-8');\n        if (headers) {\n            for (const key in headers) {\n                request.setRequestHeader(`${key}`, `${headers[key]}`);\n            }\n        }\n        request.onload = () => {\n            handleResponse(request)\n                .then(response => resolve(response))\n                .catch(error => reject(error));\n        };\n        request.send(JSON.stringify(params));\n    });\n}\n","/**\n * Get time since from the provided Date.\n *\n * @function timeSince\n * @param {Date} date date object\n * @returns {string} formatted date\n */\nexport const timeSince = date => {\n    try {\n        let seconds = Math.floor((+new Date() - date) / 1000);\n        let interval = Math.floor(seconds / 31536000);\n        /* istanbul ignore next */\n        if (interval >= 1) {\n            return interval + ' year' + (interval > 1 ? 's' : '');\n        }\n        interval = Math.floor(seconds / 2592000);\n        if (interval >= 1) {\n            return interval + ' month' + (interval > 1 ? 's' : '');\n        }\n        interval = Math.floor(seconds / 86400);\n        if (interval >= 1) {\n            return interval + ' day' + (interval > 1 ? 's' : '');\n        }\n        interval = Math.floor(seconds / 3600);\n        if (interval >= 1) {\n            return interval + ' hour' + (interval > 1 ? 's' : '');\n        }\n        interval = Math.floor(seconds / 60);\n        if (interval >= 1) {\n            return interval + ' minute' + (interval > 1 ? 's' : '');\n        }\n\n        seconds = seconds < 1 ? 1 : seconds;\n\n        return Math.floor(seconds) + ' second' + (seconds !== 1 ? 's' : '');\n    } catch (error) {\n        return '';\n    }\n};\n\n/**\n * Is timestamp valid.\n *\n * @function validTimestamp\n * @param {string} timestamp\n * @returns {boolean} isValid\n */\nexport const validTimestamp = timestamp => {\n    return new Date(timestamp).getTime() > 0;\n};\n","/**\n * Copyright 2018 Ambrosus Inc.\n * Email: tech@ambrosus.com\n */\n\n/**\n * Handle the response\n *\n * @function handleResponse\n * @param {Object} request\n * @returns {Object} response\n */\nexport const handleResponse = request => {\n    return new Promise((resolve, reject) => {\n\t//console.log(`request.response ${request.response}`);\n\n        const response = {\n            status: request.status,\n            data: null,\n            message: JSON.parse(request.response).reason\n        };\n\n        if (request.status === 200 || request.status === 201) {\n            response.data = JSON.parse(request.response);\n            response.message = 'success';\n            resolve(response);\n        }\n        reject(response);\n    });\n};\n\n/**\n * Reject the response\n *\n * @function rejectResponse\n * @param {any} message\n * @returns {{status: number, data: null, message: any}} rejectData\n */\nexport const rejectResponse = message => {\n    return {\n        status: 400,\n        data: null,\n        message: message\n    };\n};\n\n/**\n * Send a success response\n *\n * @function successResponse\n * @param {any} data\n * @returns {{status: 200, data: any, message: 'success'}} successData\n */\nexport const successResponse = data => {\n    return {\n        status: 200,\n        data: data,\n        message: 'success'\n    };\n};\n","/**\n * Copyright 2018 Ambrosus Inc.\n * Email: tech@ambrosus.com\n */\nimport Web3 from 'web3';\nimport {\n    rejectResponse\n} from '../responseHandler';\n\nconst web3 = new Web3();\n\n/**\n * Takes a number of wei and converts it to any other ether unit.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n * @method fromWei\n *\n * @param {String|BN} number can be a BigNumber, number string or a HEX of a decimal\n * @param {String} unit the unit to convert to, default ether\n *\n * @returns {String} Returns a string\n */\nexport const fromWei = (value, unit = 'ether') => {\n    return web3.utils.fromWei(value, unit);\n};\n\n/**\n * Takes a number of a unit and converts it to wei.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n * @method toWei\n *\n * @param {String|BN} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert from, default ether\n *\n * @returns {String|BN} When given a BN object it returns one as well, otherwise a string\n */\nexport const toWei = (value, unit = 'ether') => {\n    return web3.utils.toWei(value, unit);\n};\n\n/**\n * Checks if the given string is an address\n *\n * @method isAddress\n *\n * @param {String} address the given HEX address\n *\n * @returns {Boolean}\n */\nexport const isAddress = (address) => {\n    return web3.utils.isAddress(address);\n};\n\n/**\n * Will create a random bytes HEX string\n *\n * @function randomHex\n * @param {Number} bytes\n * @returns {String}\n */\nexport const randomHex = (bytes) => {\n    return web3.utils.randomHex(bytes);\n};\n\n/**\n * Auto converts any given value into it's hex representation.\n * And even stringifys objects before.\n *\n * @method toHex\n *\n * @param {String|Number|BN|Object} value\n * @param {Boolean} returnType\n *\n * @returns {String}\n */\nexport const toHex = (value) => {\n    return web3.utils.toHex(value);\n};\n\n/**\n * Calculate the hash value of the given data\n *\n * @param {Object} data - Can be object, array or a string\n * @returns {string} Hashed Message\n */\nexport const calculateHash = (data) => {\n    if (!data) {\n        return rejectResponse('Please provide some data');\n    }\n    return hashMessage(serializeForHashing(data));\n};\n\n/**\n * Hashes the given message passed\n * The data will be UTF-8 HEX decoded and enveloped as follows:\n * \"\\x19Ethereum Signed Message:\\n\" + message.length + message and hashed using keccak256.\n *\n * @param {String} data A message to hash, if its HEX it will be UTF8 decoded before.\n * @returns {String} Hashed Message\n */\nexport const hashMessage = (message) => {\n    return web3.eth.accounts.hashMessage(message);\n};\n\n/**\n * Serialize Object\n *\n * @function serializeForHashing\n * @param {Object | Array | string} object\n * @returns {string} serializedString\n */\nexport const serializeForHashing = (object) => {\n    const isDict = (subject) => typeof subject === 'object' && !Array.isArray(subject);\n    const isString = (subject) => typeof subject === 'string';\n    const isArray = (subject) => Array.isArray(subject);\n\n    if (isDict(object)) {\n        const content = Object.keys(object).sort().map((key) => `\"${key}\":${serializeForHashing(object[key])}`).join(',');\n\n        return `{${content}}`;\n    } else if (isArray(object)) {\n        const content = object.map((item) => serializeForHashing(item)).join(',');\n\n        return `[${content}]`;\n    } else if (isString(object)) {\n        return `\"${object}\"`;\n    }\n    return object.toString();\n};\n","/*\nCopyright: Ambrosus Inc.\nEmail: tech@ambrosus.com\n\nThis Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.\n\nThis Source Code Form is “Incompatible With Secondary Licenses”, as defined by the Mozilla Public License, v. 2.0.\n*/\n\n// tslint:disable-next-line:no-var-requires\nconst fs = require('fs');\nconst path = require('path');\n\nexport const writeFile = (filepath, data, opts = {}) =>\n  new Promise((resolve, reject) => {\n    fs.mkdir(path.dirname(filepath), {recursive: true}, (err) => {\n      if (err) {\n        throw new Error(`can't create dir for ${filepath}: ${err}`);\n      }\n    });\n\n    fs.writeFile(filepath, data, opts, (err) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(data);\n      }\n    });\n  });\n\nexport const readFile = (filepath) =>\n  new Promise((resolve, reject) => {\n    fs.readFile(filepath, 'utf8', (err, data) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(data);\n      }\n    });\n  });\n\nexport const removeFile = (filepath) =>\n  new Promise((resolve, reject) => {\n    fs.unlink(filepath, (err) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n\nexport const checkFileExists = (filepath) =>\n  new Promise((resolve) => {\n    fs.access(filepath, (err) => {\n      resolve(!err);\n    });\n  });\n\nexport const listDirectory = (filepath) =>\n  new Promise((resolve, reject) => {\n    fs.readdir(filepath, (err, files) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(files);\n      }\n    });\n  });\n\nexport const removeDirectory = (filepath) =>\n  new Promise((resolve, reject) => {\n    fs.rmdir(filepath, (err) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n\nexport const makeDirectory = (filepath) =>\n  new Promise((resolve, reject) => {\n    fs.mkdir(filepath, (err) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n\nexport const getfilepath = (filepath) =>\n  new Promise((resolve, reject) => {\n    fs.lstat(filepath, (err, stats) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(stats);\n      }\n    });\n  });","import { timeSince, validTimestamp } from './time-utils';\n/**\n * Check the accessLevel of the asset\n *\n * @function checkAccessLevel\n * @param {Object} event\n * @returns {number} accessLevel\n */\nexport const checkAccessLevel = event => {\n    try {\n        return event.content.idData.accessLevel;\n    } catch (error) {\n        return 0;\n    }\n};\n\n/**\n * Get the Title\n *\n * @function getName\n * @param {Object} obj\n * @param {string} alternative\n * @returns {Object} name\n */\nexport const getName = (obj, alternative = 'No title') => {\n    try {\n        const name = obj.name;\n        let type = obj.type.split('.');\n        type = type[type.length - 1];\n        return [name, type].find(i => i);\n    } catch (e) {\n        return alternative;\n    }\n};\n\n/**\n * Get image URL from the object\n *\n * @function getImage\n * @param {Object} obj\n * @returns {string} Image URL\n */\nexport const getImage = (obj) => {\n    try {\n        return obj.images.default.url;\n    } catch (e) {\n        return '';\n    }\n};\n\n/**\n * Get location from the Object\n *\n * @function getLocation\n * @param {Object} event\n * @returns {Object} Location\n */\nexport const getLocation = (event) => {\n    const location = event.location || event;\n    const {\n        city,\n        country,\n        name\n    } = location;\n    return (\n        [city, country, name].filter(item => !!item).join(', ') || 'No place attached'\n    );\n};\n\n/**\n * Sorts the Event by descending order based on the timestamp\n *\n * @function sortEventsByTimestamp\n * @param {Object} objectA Object which contains timestamp property\n * @param {Object} objectB Object which contains timestamp property\n * @returns {Object} Object sorted by descending order based on timestamp\n */\nexport const sortEventsByTimestamp = (a, b) => {\n    if (a.timestamp > b.timestamp) {\n        return -1;\n    }\n    if (a.timestamp < b.timestamp) {\n        return 1;\n    }\n    return 0;\n};\n\n/**\n * Parse the Event and create groups/properties array\n *\n * @function parseEvent\n * @param {Object}  event\n * @returns {Object} event\n */\nexport const parseEvent = (event) => {\n    event.info = {};\n    event.info['groups'] = [];\n    event.info['properties'] = [];\n\n    // Extract event objects\n    if (event.content.data && Array.isArray(event.content.data)) {\n        event.content.data.map((obj) => {\n            const type = obj.type.split('.');\n            obj.type = type[type.length - 1].toLowerCase();\n\n            if (obj.type === 'location' || obj.type === 'identifiers') {\n                event.info[obj.type] = obj;\n            } else {\n                event.info.name = obj.name || obj.type;\n\n                Object.keys(obj).map((key) => {\n                    if (['images', 'documents', 'description'].indexOf(key) > -1) {\n                        event.info[key] = obj[key];\n                    }\n\n                    if (\n                        [\n                            'type',\n                            'name',\n                            'assetType',\n                            'eventId',\n                            'createdBy',\n                            'timestamp',\n                            'location',\n                            'images',\n                            'documents',\n                            'description',\n                            'identifiers',\n                            'groups',\n                            'properties'\n                        ].indexOf(key) === -1\n                    ) {\n                        const property = {\n                            key,\n                            value: obj[key]\n                        };\n                        event.info[typeof property.value === 'string' || Array.isArray(property.value) ? 'properties' : 'groups'].push(property);\n                    }\n                });\n            }\n            return obj;\n        });\n    }\n    return event;\n};\n\n/**\n * Parse the Asset and create groups/properties Array\n *\n * @function parseAsset\n * @param {Object} asset\n * @returns {Object} asset\n */\nexport const parseAsset = (asset) => {\n    if (!asset.info) {\n        asset.info = {};\n    }\n    asset.info['groups'] = [];\n    asset.info['properties'] = [];\n\n    Object.keys(asset.info).map((key) => {\n        if (key === 'location' || key === 'identifiers') {\n            asset[key] = asset.info[key];\n        } else {\n            if (\n                [\n                    'type',\n                    'name',\n                    'assetType',\n                    'images',\n                    'eventId',\n                    'createdBy',\n                    'timestamp',\n                    'groups',\n                    'properties'\n                ].indexOf(key) === -1\n            ) {\n                const property = {\n                    key,\n                    value: asset.info[key]\n                };\n                asset.info[typeof property.value === 'string' || Array.isArray(property.value) ? 'properties' : 'groups'].push(property);\n            }\n        }\n    });\n};\n\n/**\n * Parse the timeline events based on Date\n *\n * @function parseTimelineEvents\n * @param {Object} e\n * @returns {Object} parsedEvents.\n */\nexport const parseTimelineEvents = (e) => {\n    const events = e.reduce((_events, {\n        content,\n        eventId\n    }) => {\n        const timestamp = content.idData.timestamp;\n        const createdBy = content.idData.createdBy;\n\n        if (content && content.data) {\n            content.data.map(obj => {\n                const parts = obj.type.split('.');\n                const type = parts[parts.length - 1];\n                const category = parts[parts.length - 2] || 'asset';\n                const ago = timeSince(timestamp * 1000);\n\n                obj.timestamp = timestamp;\n                obj.createdBy = createdBy;\n                obj.name = obj.name || type;\n                obj.type = type;\n                obj.eventId = eventId;\n                obj.ago = ago;\n\n                if (obj.type === 'location' && category === 'event') {\n                    content.data.reduce((location, _event) => {\n                        if (_event.type !== 'location') {\n                            _event.location = location;\n                        }\n                    }, obj);\n                }\n\n                const notInclude = ['location', 'identifier', 'identifiers'];\n                if (notInclude.indexOf(obj.type) === -1) {\n                    _events.push(obj);\n                }\n\n                return obj;\n            });\n        }\n        return _events;\n    }, []);\n    events.sort(sortEventsByTimestamp);\n    return events;\n};\n\n/**\n * Check whether the event is latest\n *\n * @function isLatest\n * @param {string} type\n * @returns {boolean}\n */\nexport const isLatest = (type) => {\n    return (['info', 'redirection', 'identifiers', 'branding', 'location'].indexOf(type) === -1);\n};\n\n/**\n * Finds a signle event from the events object\n *\n * @function findEvent\n * @param {string} eventType\n * @param {Object} events\n * @returns {Object} event\n */\nexport const findEvent = (eventType, events) => {\n    let e = false;\n    events.map(event => {\n        if (event.content.data) {\n            event.content.data.map(obj => {\n                const type = obj.type.split('.');\n                obj.type = type[type.length - 1];\n                obj.type = obj.type.toLowerCase();\n\n                if (obj.type === 'location' || obj.type === 'identifiers') {\n                    event.content.data.map(_obj => {\n                        if (['location', 'identifiers'].indexOf(_obj.type) === -1) {\n                            _obj[obj.type === 'location' ? 'location' : 'identifiers'] = obj;\n                        }\n                    });\n                }\n                switch (eventType) {\n                    case 'latest':\n                        if (isLatest(obj.type)) {\n                            e = obj;\n                        }\n                        break;\n                    default:\n                        if (obj.type === eventType) {\n                            e = obj;\n                        }\n                }\n                return obj;\n            });\n        }\n\n        return event;\n    });\n\n    return e;\n};\n\n/**\n * Check if timestamp exists\n *\n * @function checkTimeStamp\n * @param {Object} event\n * @returns {number} timestamp\n */\nexport const checkTimeStamp = event => {\n    let timestamp = Math.floor(Date.now() / 1000);\n\n    return event.content && event.content.idData && event.content.idData.timestamp && validTimestamp(event.content.idData.timestamp) ? event.content.idData.timestamp : timestamp;\n};\n\n/**\n * Parse all events\n *\n * @function parseEvents\n * @param {Array.<Object>} eventsArray\n * @returns {Object} events\n */\nexport const parseEvents = eventsArray => {\n    return eventsArray.results.reduce(\n        (asset, {\n            content,\n            eventId\n        }) => {\n            const timestamp = content.idData.timestamp;\n            const author = content.idData.createdBy;\n\n            if (content && content.data) {\n                content.data\n                    .filter(obj => {\n                        const parts = obj.type.split('.');\n                        const type = parts[parts.length - 1];\n                        const category = parts[parts.length - 2] || 'asset';\n                        obj.timestamp = timestamp;\n                        obj.author = author;\n                        obj.name = obj.name || type;\n                        obj.action = type;\n                        obj.type = type;\n                        obj.eventId = eventId;\n\n                        if ((obj.type === 'location' || obj.type === 'identifiers') && category === 'event') {\n                            content.data.reduce((_obj, _event) => {\n                                if (obj.type === 'location' && _event.type !== 'location') {\n                                    _event.location = _obj;\n                                }\n                                if (obj.type === 'identifiers' && _event.type !== 'identifiers') {\n                                    _event.identifiers = _obj;\n                                }\n                                return _obj;\n                            }, obj);\n                        } else {\n                            return obj;\n                        }\n                    })\n                    .map(event => {\n                        if (['info', 'redirection', 'identifiers', 'branding'].indexOf(event.type) > -1) {\n                            if (!asset[event.type] || asset[event.type].timestamp < event.timestamp) {\n                                asset[event.type] = event;\n                            }\n                        } else {\n                            asset.events.push(event);\n                        }\n                    });\n            }\n            return asset;\n        }, {\n            events: []\n        }\n    );\n};\n","/**\n * Copyright 2018 Ambrosus Inc.\n * Email: tech@ambrosus.com\n */\n\nimport * as tokenUtils from './token-utils';\nimport * as file from './file';\nimport {\n    checkAccessLevel,\n    getName,\n    getImage,\n    getLocation,\n    sortEventsByTimestamp,\n    parseEvent,\n    parseAsset,\n    parseTimelineEvents,\n    isLatest,\n    findEvent,\n    checkTimeStamp,\n    parseEvents\n} from './events-utils';\n\nimport {\n    timeSince,\n    validTimestamp\n} from './time-utils';\n\n/**\n * Check if the passed parameter is a valid object\n *\n * @param {any} value\n * @returns {boolean}\n */\nfunction isObject(value) {\n    return value !== null && typeof value === 'object' && value instanceof Object && !(value instanceof Array);\n}\n\n/**\n * Get the name from the URL\n *\n * @function getUrlName\n * @param {string} url\n * @returns {string} name\n */\nconst getUrlName = (url) => {\n    let name = url.split('/');\n    name = name[name.length - 1];\n    return name;\n};\n\n/**\n * Seralize object into query params\n *\n * Creates a query params string by taking a params object.\n *\n * @function serializeParams\n * @param {Object} params properties to be passed as query params.\n * @returns {string} queryParams\n */\nconst serializeParams = params => {\n    let serializeParams = '';\n\n    for (let key in params) {\n        if (serializeParams !== '') {\n            serializeParams += '&';\n        }\n        serializeParams += key + '=' + encodeURIComponent(params[key]);\n    }\n    return serializeParams;\n};\n\n/**\n * Private method for UTF - 8 encoding\n *\n * @function utf8Encode\n * @param {string} string\n * @returns {string} encodedText\n */\nconst utf8Encode = (string) => {\n    string = string.replace(/\\r\\n/g, '\\n');\n    let utftext = '';\n\n    for (let n = 0; n < string.length; n++) {\n        let c = string.charCodeAt(n);\n\n        if (c < 128) {\n            utftext += String.fromCharCode(c);\n        } else if ((c > 127) && (c < 2048)) {\n            utftext += String.fromCharCode((c >> 6) | 192);\n            utftext += String.fromCharCode((c & 63) | 128);\n        } else {\n            utftext += String.fromCharCode((c >> 12) | 224);\n            utftext += String.fromCharCode(((c >> 6) & 63) | 128);\n            utftext += String.fromCharCode((c & 63) | 128);\n        }\n    }\n\n    return utftext;\n};\n\n/**\n * Base 64 encode\n *\n * @function base64url\n * @param {string} input\n * r@returns {string} encodedString\n */\nconst base64url = (input) => {\n    const _keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n    let output = '';\n    let chr1, chr2, chr3, enc1, enc2, enc3, enc4;\n    let i = 0;\n\n    input = utf8Encode(input);\n\n    while (i < input.length) {\n        chr1 = input.charCodeAt(i++);\n        chr2 = input.charCodeAt(i++);\n        chr3 = input.charCodeAt(i++);\n\n        enc1 = chr1 >> 2;\n        enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n        enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n        enc4 = chr3 & 63;\n\n        if (isNaN(chr2)) {\n            enc3 = enc4 = 64;\n        } else if (isNaN(chr3)) {\n            enc4 = 64;\n        }\n        output = output +\n            _keyStr.charAt(enc1) + _keyStr.charAt(enc2) +\n            _keyStr.charAt(enc3) + _keyStr.charAt(enc4);\n    }\n    return output;\n};\n\nexport default {\n    isObject,\n    validTimestamp,\n    checkTimeStamp,\n    parseEvents,\n    serializeParams,\n    utf8Encode,\n    base64url,\n    checkAccessLevel,\n    getImage,\n    getLocation,\n    getName,\n    getUrlName,\n    sortEventsByTimestamp,\n    parseAsset,\n    parseEvent,\n    isLatest,\n    findEvent,\n    parseTimelineEvents,\n    timeSince,\n    isAddress: tokenUtils.isAddress,\n    fromWei: tokenUtils.fromWei,\n    toWei: tokenUtils.toWei,\n    toHex: tokenUtils.toHex,\n    randomHex: tokenUtils.randomHex,\n    hashMessage: tokenUtils.hashMessage,\n    calculateHash: tokenUtils.calculateHash,\n    serializeForHashing: tokenUtils.serializeForHashing,\n    readFile: file.readFile\n};\n","/**\n * Copyright 2018 Ambrosus Inc.\n * Email: tech@ambrosus.com\n */\n\n/**\n * Event Handler Methods.\n *\n * @class\n */\nclass EventHandler {\n    constructor() {\n        this.events = {};\n        this.empty = [];\n    }\n    /**\n     * Subscribe to an event.\n     *\n     * @param {any} type\n     * @param {any} func\n     * @param {any} ctx\n     */\n    on(type, func, ctx) {\n        /* istanbul ignore next */\n        (this.events[type] = this.events[type] || []).push([func, ctx]);\n        /* istanbul ignore next */\n        return this;\n    }\n\n    /**\n     * Unsubscribe from a global event.\n     *\n     * @param {any} type\n     * @param {any} func\n     */\n    off(type, func) {\n        /* istanbul ignore next */\n        type || (this.events = {});\n        /* istanbul ignore next */\n        let list = this.events[type] || this.empty;\n        /* istanbul ignore next */\n        let i = (list.length = func ? list.length : 0);\n\n        /* istanbul ignore next */\n        while (i--) {\n            func === list[i][0] && list.splice(i, 1);\n        }\n        /* istanbul ignore next */\n        return this;\n    }\n\n    /**\n     * Emit a global event\n     *\n     * @param {any} type\n     */\n    emit(type) {\n        /* istanbul ignore next */\n        let e = this.events[type] || this.empty;\n        /* istanbul ignore next */\n        let list = e.length > 0 ? e.slice(0, e.length) : e;\n        let i = 0;\n        let j;\n\n        /* istanbul ignore next */\n        while ((j = list[i++])) {\n            j[0].apply(j[1], this.empty.slice.call(arguments, 1));\n        }\n        /* istanbul ignore next */\n        return this;\n    }\n}\n\nexport default EventHandler;\n","/**\n * Copyright 2018 Ambrosus Inc.\n * Email: tech@ambrosus.com\n */\n\nimport { getRequest, postRequest } from './request';\nimport utils from '../utils/index';\nimport { rejectResponse, successResponse } from '../responseHandler';\nimport EventHandler from '../eventHandler';\n\n/**\n * Events Class\n *\n * @class\n * @classdesc Every Events related methods\n */\nclass Events {\n    /**\n   * Initializing the Events class\n   *\n   * @param {ClassProperties} - Properties to initialize the class object\n   */\n    constructor(settings, service) {\n        this._settings = settings;\n        this.service = service;\n        this.eventHandler = new EventHandler();\n    }\n\n   /**\n   * Find Events by AssetId\n   *\n   * @param {string} assetId - Id of the asset\n   * @returns {Object} events\n   */\n    getAssetEvents(assetId) {\n        return new Promise((resolve, reject) => {\n            if (!assetId) {\n                return reject(rejectResponse('Asset ID is missing.'));\n            }\n\n            getRequest(\n                `${this._settings.apiEndpoint}/event2/list/?assteId=${encodeURIComponent(assetId)}`,\n                this._settings.headers\n            )\n                .then(response => resolve(response))\n                .catch(error => reject(error));\n        });\n    }\n\n    /**\n   * Get all Events with the matching params\n   *\n   * {@link https://ambrosus.docs.apiary.io/#reference/events/eventsassetidfromtimestamptotimestampperpagepagecreatedbydata/find-events Find Events}\n   * @param {Object} params - Properties of the events\n   * @returns {Object} events\n   */\n    getEvents(params) {\n        return new Promise((resolve, reject) => {\n            getRequest(\n                `${this._settings.apiEndpoint}/event2/list?${utils.serializeParams(params)}`,\n                this._settings.headers\n            )\n                .then(response => resolve(response))\n                .catch(error => reject(error));\n        });\n    }\n\n    /**\n   * Create a new event.\n   *\n   * {@link https://ambrosus.docs.apiary.io/#reference/events/assetsassetidevents/create-an-event Create a new Event}\n   * @param {string} assetId - Corresponding asset Id to the event\n   * @param {Object} params - Properties of the event\n   * @returns {Promise<Object>} Promise\n   */\n    createSingleEvent(assetId, eventId, params) {\n        console.log(`createSingleEvent.eventId: ${eventId}`);\n\n        return new Promise((resolve, reject) => {\n            postRequest(\n                `${this._settings.apiEndpoint}/event2/create/${eventId}`,\n                this._settings.headers,\n                params\n            )\n                .then(response => resolve(response))\n                .catch(error => reject(error));\n        });\n    }\n\n    /**\n   * Creates a new Event.\n   *\n   * {@link https://ambrosus.docs.apiary.io/#reference/events/assetsassetidevents/create-an-event Create a new Event}\n   * @param {string} assetId - Corresponding asset Id to the event\n   * @param {Object} event - Properties of the events\n   * @returns {Object} eventResponse\n   */\n    createEvent(assetId, event) {\n        return new Promise((resolve, reject) => {\n            if (typeof event !== 'object') {\n                return reject(rejectResponse('event should be a json object'));\n            } else if (!this._settings.headers['Authorization']) {\n                return reject(\n                    rejectResponse('Authorization header is required to create an event')\n                );\n            }\n\n            if (!assetId) {\n                return reject(rejectResponse('Asset ID is missing.'));\n            }\n\n            if (!event) {\n                return reject(rejectResponse('Event data is missing.'));\n            }\n\n            let params = {};\n\n            if (event.content && event.content.data) {\n                const idData = {\n                    assetId: assetId,\n                    timestamp: utils.checkTimeStamp(event),\n                    accessLevel: utils.checkAccessLevel(event),\n                    createdBy: this._settings.address,\n                    dataHash: utils.calculateHash(event.content.data)\n                };\n\n                params = {\n                    content: {\n                        idData: idData,\n                        signature: this.service.sign(idData, this._settings.secret),\n                        data: event.content.data\n                    }\n                };\n            } else {\n                return reject(\n                    rejectResponse('Invalid data: No content found at content.data.')\n                );\n            }\n\n            let eventId = utils.calculateHash(params.content);\n\n            return this.createSingleEvent(assetId, eventId, params)\n                .then(response => {\n                    this.eventHandler.emit('event:created');\n                    resolve(response);\n                })\n                .catch(error => reject(error));\n        });\n    }\n\n    /**\n   * Parse the provided events\n   *\n   * @param {Object} eventsArray - Array of events which is to be parsed\n   * @returns {Object} Reject Response or Success Response with parsed events\n   */\n    parseEvents(eventsArray) {\n        return new Promise((resolve, reject) => {\n            if (eventsArray && eventsArray.results) {\n                return resolve(successResponse(utils.parseEvents(eventsArray)));\n            }\n            return reject(rejectResponse('Results array is missing.'));\n        });\n    }\n}\n\nexport default Events;\n","/**\n * Copyright 2018 Ambrosus Inc.\n * Email: tech@ambrosus.com\n */\n\nimport { getRequest, postRequest } from './request';\nimport utils from '../utils/index';\nimport Events from './events';\nimport { rejectResponse } from '../responseHandler';\nimport EventHandler from '../eventHandler';\n\n/**\n * Assets Class\n *\n * @class\n * @classdesc Every Assets related methods\n */\nclass Assets {\n    /**\n   * Initializing the Assets class\n   *\n   * @param {ClassProperties} - Properties to initialize the class object\n   */\n    constructor(settings, service) {\n        this._settings = settings;\n        this.service = service;\n        this.events = new Events(this._settings, this.service);\n        this.eventHandler = new EventHandler();\n    }\n\n    /**\n   * Find asset by Id.\n   *\n   * {@link https://ambrosus.docs.apiary.io/#reference/asset/assets/fetch-an-asset-by-id  Find asset by Id}\n   * @param {string} assetId - Id of the asset to be searched.\n   * @returns {Object} asset\n   */\n    getAsset(assetId) {\n        return new Promise((resolve, reject) => {\n            if (!assetId) {\n                return reject(rejectResponse('Asset ID is missing.'));\n            }\n            if (assetId.assetId) {\n                assetId = assetId.assetId;\n            }\n            getRequest(\n                `${this._settings.apiEndpoint}/asset2/info/${encodeURIComponent(assetId)}`,\n                this._settings.headers\n            )\n                .then(response => resolve(response))\n                .catch(error => reject(error));\n        });\n    }\n\n    /**\n   * Get all assets with the matching params\n   *\n   * {@link https://ambrosus.docs.apiary.io/#reference/asset/assetsassetid/find-assets Find Assets}\n   * @param {Object} params - Parameters to search assets.\n   * @returns {Object} assets\n   */\n    getAssets(params = {}) {\n        return new Promise((resolve, reject) => {\n            getRequest(\n                `${this._settings.apiEndpoint}/asset2/list?${utils.serializeParams(params)}`,\n                this._settings.headers\n            )\n                .then(response => resolve(response))\n                .catch(error => reject(error));\n        });\n    }\n\n    /**\n   * Creates a new Asset\n   *\n   * {@link https://ambrosus.docs.apiary.io/#reference/asset/assets/create-an-asset Create a new Asset}\n   * @param {Object} asset - Parameters to create a new asset.\n   * @params {Array} events - Events array\n   * @returns {Object} assetResponse\n   */\n    createAsset(asset = {}, events = []) {\n        let assetSequenceNumber = 0;\n        return new Promise((resolve, reject) => {\n            if (typeof asset !== 'object') {\n                return reject(rejectResponse('asset should be a json object or empty'));\n            } else if (!this._settings.headers['Authorization']) {\n                return reject(\n                    rejectResponse('Authorization header is required to create an asset')\n                );\n            }\n\n            const idData = {\n                timestamp: utils.checkTimeStamp(asset),\n                sequenceNumber: (assetSequenceNumber =\n          (assetSequenceNumber + 1) % 1000000),\n                createdBy: this._settings.address\n            };\n\n            const params = {\n                content: {\n                    idData: idData,\n                    signature: this.service.sign(idData, this._settings.secret)\n                }\n            };\n\n            let assetId = utils.calculateHash(params.content);\n\n            postRequest(\n                `${this._settings.apiEndpoint}/asset2/create/${assetId}`,\n                this._settings.headers,\n                params\n            )\n                .then(async assetRes => {\n                    if (events.length) {\n                        const req = events.map(event => {\n                            return this.events.createEvent(assetRes.data.assetId, event);\n                        });\n                        await Promise.all(req);\n                        this.eventHandler.emit('asset:created');\n                        resolve(assetRes);\n                    } else {\n                        this.eventHandler.emit('asset:created');\n                        resolve(assetRes);\n                    }\n                })\n                .catch(error => reject(error));\n        });\n    }\n}\n\nexport default Assets;\n","/**\n * Copyright 2018 Ambrosus Inc.\n * Email: tech@ambrosus.com\n */\n\nimport { postRequest } from './request';\nimport { rejectResponse } from '../responseHandler';\n/**\n * Accounts Class\n *\n * @class\n * @classdesc Every Accounts related methods\n */\nclass Accounts {\n    /**\n   * Initializing the Accounts class\n   *\n   * @param {ClassProperties} - Properties to initialize the class object\n   */\n    constructor (settings) {\n        this._settings = settings;\n    }\n\n    /**\n      * Adds a new account\n      *\n      * {@link https://ambrosus.docs.apiary.io/#reference/account/accounts/add-account Add a new account}\n      * @param {Object} params Parameters to create a new Account\n      * @returns {Object} accountResponse\n      */\n    addAccount (params) {\n        return new Promise((resolve, reject) => {\n            if (!this._settings.headers['Authorization']) {\n                return reject(rejectResponse('Authorization header is required to create an account'));\n            } else if (!params) {\n                return reject(rejectResponse('Create account params are required to create an account.'));\n            }\n            postRequest(`${this._settings.apiEndpoint}/accounts`, this._settings.headers, params)\n                .then(response => resolve(response))\n                .catch(error => reject(error));\n        });\n    }\n}\n\nexport default Accounts;\n","/**\n * Copyright 2018 Ambrosus Inc.\n * Email: tech@ambrosus.com\n */\n\nimport { getRequest } from './request';\nimport { rejectResponse } from '../responseHandler';\n\n/**\n * Events Class\n *\n * @class\n * @classdesc Every Events related methods\n */\nclass Bundles {\n    /**\n     * Initializing the Events class\n     *\n     * @param {ClassProperties} - Properties to initialize the class object\n     */\n    constructor(settings) {\n        this._settings = settings;\n    }\n    /**\n     * Returns this bundle with respect to id\n     *\n     * @param {string} bundleId - Id of the bundle\n     * @returns {Object} bundle\n     */\n    getBundle(bundleId) {\n        return new Promise((resolve, reject) => {\n            if (!bundleId) {\n                return reject(rejectResponse('Bundle ID is missing.'));\n            }\n            if (bundleId.bundleId) {\n                bundleId = bundleId.bundleId;\n            }\n            getRequest(`${this._settings.apiEndpoint}/bundle2/info/${encodeURIComponent(bundleId)}`, this._settings.headers)\n                .then(response => resolve(response))\n                .catch(error => reject(error));\n        });\n    }\n}\n\nexport default Bundles;\n","/**\n * Copyright 2018 Ambrosus Inc.\n * Email: tech@ambrosus.com\n */\n\nimport {\n    rejectResponse\n} from './responseHandler';\n\n/**\n * Class with all the transaction related methods.\n *\n * @class\n */\nclass Transactions {\n    /**\n     *\n     * @param {ExtendedSettings} ExtendedSettings - Setting object\n     * @param {Web3} web3 - A Web3 Object\n     */\n    constructor(settings, service, web3) {\n        this._settings = settings;\n        this.web3 = web3;\n        this.service = service;\n    }\n\n    /**\n     * Returns the balance of the account on the Network\n     *\n     * @returns {Promise} balance\n     */\n    getBalance(address = null) {\n        return new Promise((resolve, reject) => {\n            const userAddress = address || this._settings.address;\n            if (!this._settings.rpcURL) {\n                return reject(rejectResponse('RPC URL is required to get the balance'));\n            }\n            if (!userAddress) {\n                return reject(rejectResponse('Address is required to get the balance'));\n            }\n            this.web3.eth.getBalance(userAddress).then(balance => resolve(balance))\n                .catch(err => reject(err));\n        });\n    }\n\n    /**\n     * Returns a transaction matching the given transaction hash.\n     *\n     * @param {string} transactionHash\n     * @returns {Promise<object> }- A transaction object\n     */\n    getTransaction(transactionHash) {\n        return new Promise((resolve, reject) => {\n            if (!this._settings.rpcURL) {\n                return reject(rejectResponse('RPC URL is required'));\n            }\n            if (!transactionHash) {\n                return reject(rejectResponse('Transaction hash is required'));\n            }\n            return this.web3.eth.getTransaction(transactionHash).then(transaction => resolve(transaction))\n                .catch(err => reject(err));\n        });\n    }\n\n    /**\n     * Returns the transaction recepit.\n     * The receipt is not available for pending transactions and returns null.\n     *\n     * @param {string} transactionHash\n     * @returns {Promise<object>} A transaction receipt object, or null when no receipt was found:\n     */\n    getTransactionRecepit(transactionHash) {\n        return new Promise((resolve, reject) => {\n            if (!this._settings.rpcURL) {\n                return reject(rejectResponse('RPC URL is required'));\n            }\n            if (!transactionHash) {\n                return reject(rejectResponse('Transaction hash is required'));\n            }\n            return this.web3.eth.getTransactionReceipt(transactionHash).then(receipt => resolve(receipt))\n                .catch(err => reject(err));\n        });\n    }\n\n    /**\n     * Get the numbers of transactions sent from this address.\n     *\n     * @param {string} address\n     * @returns {Promise<number>} - The number of transactions sent from the given address.\n     */\n    getTransactionCount(address = null) {\n        return new Promise((resolve, reject) => {\n            const userAddress = address || this._settings.address;\n            if (!this._settings.rpcURL) {\n                return reject(rejectResponse('RPC URL is required'));\n            }\n            if (!userAddress) {\n                return reject(rejectResponse('Address is required to get the transaction count'));\n            }\n            return this.web3.eth.getTransactionCount(userAddress).then(count => resolve(count))\n                .catch(err => reject(err));\n        });\n    }\n\n    /**\n     * Signs and sends the transaction to the network\n     *\n     * @param {string} address Address of the receiving person\n     * @param {number} value Total number of token to be sent\n     * @returns {Promise} transactionResponse\n     */\n    sendTransaction(address, value, data = null) {\n        return new Promise((resolve, reject) => {\n            if (!this._settings.secret && !this._settings.rpcURL) {\n                return reject(rejectResponse('Secret key and RPC URL is required to make a transaction'));\n            }\n            const txObject = {\n                to: address,\n                from: this._settings.address,\n                value: this.web3.utils.toHex(this.web3.utils.toWei(value, 'ether')),\n                gas: this.web3.utils.toHex(21000),\n                gasPrice: this.web3.utils.toHex(this.web3.utils.toWei('10', 'gwei'))\n            };\n            if (data) {\n                txObject.data = data;\n            }\n            const account = this.service.getAccount(this._settings.secret);\n            const signedTx = account.signTransaction(txObject);\n            signedTx.then(value => {\n                this.web3.eth.sendSignedTransaction(value.rawTransaction).then(receipt => resolve(receipt))\n                    .catch(err => reject(err));\n            }).catch((err) => {\n                reject(err);\n            });\n        });\n    }\n}\n\nexport default Transactions;\n","/**\n * Copyright 2018 Ambrosus Inc.\n * Email: tech@ambrosus.com\n */\n\nimport utils from './utils/index';\nimport {\n    rejectResponse\n} from './responseHandler';\nimport Web3 from 'web3';\nimport Events from './api/events';\n\n/**\n * Class with different service methods.\n *\n * @class\n */\nclass Service {\n    /**\n     *\n     * @param {ExtendedSettings} ExtendedSettings - Setting object which includes headers and privateKey\n     * @param {Web3} web3 - A Web3 Object\n     */\n    constructor(settings, web3, events) {\n        this._settings = settings;\n        this.web3 = web3;\n        this.events = events;\n        this.events = new Events(this._settings);\n    }\n\n    /**\n     * Creates an account object from a private key.\n     *\n     * @param {string} secret - Private Key which is used to create account.\n     * @returns {Object} Account\n     */\n    getAccount(secret = null) {\n        const secretKey = secret || this._settings.secret;\n        if (!secretKey) {\n            return rejectResponse('Secret key is required generate the account');\n        }\n\n        /* istanbul ignore next */\n        return this.web3.eth.accounts.privateKeyToAccount(secretKey);\n    }\n\n    /**\n     * Returns the address\n     *\n     * @param {string | null} secret - Private Key which is used to extract the address.\n     * @returns {Object | string} Rejected Response or address\n     */\n    getAddress(secret = null) {\n        const secretKey = secret || this._settings.secret;\n        if (!secretKey) {\n            return rejectResponse('Secret key is required generate the address');\n        }\n        /* istanbul ignore next */\n        return this.web3.eth.accounts.privateKeyToAccount(secretKey).address;\n    }\n\n    /**\n     * Retruns the signed value of the Object provided.\n     *\n     * @param {Object} data - Object which is to be signed.\n     * @param {string} secret - Private key to sign the object.\n     * @returns {Object | string} Rejected Response or Signed data\n     */\n    sign(data = {}, secret = null) {\n        const secretKey = secret || this._settings.secret;\n        if (!secretKey) {\n            return rejectResponse('Secret key is required to perform signature');\n        }\n        /* istanbul ignore next */\n        return this.web3.eth.accounts.sign(utils.serializeForHashing(data), secretKey).signature;\n    }\n\n    /**\n     * Returns object consisting of address & privateKey\n     *\n     * @returns {{address, privateKey}}\n     */\n    getPkPair() {\n        return this.web3.eth.accounts.create(this.web3.utils.randomHex(32));\n    }\n\n    /**\n     * Encrypt the data with the provided privateKey\n     *\n     * @param {string} secret\n     * @param {any} token\n     * @returns {string} encryptedData\n     */\n    encryptPrivateKey(token, secret = null) {\n        const secretKey = secret || this._settings.secret;\n        if (!secretKey) {\n            return rejectResponse('Secret key is required generate a signature');\n        } else if (!token) {\n            return rejectResponse('Token is required to encrypt the data');\n        }\n        return this.web3.eth.accounts.encrypt(secretKey, token);\n    }\n\n    /**\n     * Decrypt the encrypted privateKey\n     *\n     * @param {string} token\n     * @param {string} password\n     * @returns {Object}\n     */\n    decryptPrivateKey(token, password) {\n        try {\n            const {\n                address,\n                privateKey\n            } = this.web3.eth.accounts.decrypt(token, password);\n            return [address, privateKey];\n        } catch (e) {\n            return [null];\n        }\n    }\n\n    verifyEvents(assetId) {\n        return new Promise((resolve, reject) => {\n            if (!assetId) {\n                return reject(rejectResponse('Asset ID is required'));\n            }\n            this.events.getAssetEvents(assetId).then(response => {\n                console.log(`verifyEvents: assetId ${assetId}, events ${response.data.data.length}`);\n\n                for (let i = 0; i < response.data.data.length; i++) {\n                    const {\n                        idData,\n                        signature,\n                        data\n                    } = response.data.data[i].content;\n\n                    resolve(this.verify(idData, signature, data, response.data.data[i].eventId));\n                }\n            }).catch(error => {\n                reject(error);\n            });\n        });\n    }\n\n    verify(idData, signature, data, eventId) {\n        let flag = true;\n        const verified = {\n            hash: true,\n            createdBy: true,\n            eventId: true\n        };\n\n        // Check Data Hash;\n        const web3DataHash = utils.calculateHash(data);\n        if (idData.dataHash !== web3DataHash) {\n            flag = false;\n            verifyObject.hash = false;\n        }\n\n        // Check createdBy\n        const web3CreatedBy = this.web3.eth.accounts.recover(utils.serializeForHashing(idData), signature);\n        if (idData.createdBy !== web3CreatedBy) {\n            flag = false;\n            verifyObject.createdBy = false;\n        }\n\n        // Check content of eventId\n        const web3EventId = utils.calculateHash({\n            idData,\n            data,\n            signature\n        });\n        if (eventId !== web3EventId) {\n            flag = false;\n            verifyObject.eventId = false;\n        }\n        return {\n            flag,\n            verified\n        };\n    }\n\n    /**\n     * Checks if the provided RPC URL is valid\n     * @param {string} url\n     * @returns {boolean}\n     */\n    isRPCValid(url) {\n        const web3 = new Web3(url);\n        return web3.eth.net.isListening().then(() => {\n            return true;\n        }).catch(() => {\n            return false;\n        });\n    }\n}\n\nexport default Service;\n","/**\n * Copyright 2018 Ambrosus Inc.\n * Email: tech@ambrosus.com\n */\n\nimport {\n    rejectResponse\n} from './responseHandler';\n\n/**\n * Class with all the blocks related methods.\n *\n * @class\n */\nclass Blocks {\n    /**\n     *\n     * @param {ExtendedSettings} ExtendedSettings - Setting object which includes headers and privateKey\n     * @param {Web3} web3 - A Web3 Object\n     */\n    constructor(settings, web3) {\n        this._settings = settings;\n        this.web3 = web3;\n    }\n\n    /**\n     * Returns a block matching the block number or block hash.\n     *\n     * @param {string | number} hashOrNumber\n     * @returns {Promise<object>} - The block object\n     */\n    getBlock(hashOrNumber) {\n        return new Promise((resolve, reject) => {\n            if (!this._settings.rpcURL) {\n                return reject(rejectResponse('RPC URL is required'));\n            }\n            if (!hashOrNumber) {\n                return reject(rejectResponse('Block Number is required'));\n            }\n            return this.web3.eth.getBlock(hashOrNumber).then(block => resolve(block))\n                .catch(err => reject(err));\n        });\n    }\n\n    /**\n     * Returns the latest block.\n     *\n     * @returns {Promise<Object>} - The latest block data.\n     */\n    getLatestBlock() {\n        return new Promise((resolve, reject) => {\n            if (!this._settings.rpcURL) {\n                return reject(rejectResponse('RPC URL is required'));\n            }\n            this.web3.eth.getBlockNumber().then(number => {\n                return this.web3.eth.getBlock(number).then(block => resolve(block))\n                    .catch(err => reject(err));\n            }).catch(err => reject(err));\n        });\n    }\n}\n\nexport default Blocks;\n","/**\n * Copyright 2018 Ambrosus Inc.\n * Email: tech@ambrosus.com\n */\n\nimport {\n    rejectResponse\n} from './responseHandler';\nconst DEFAULT_GAS = 4700000;\n\n/**\n * Class with all the smart contracts related methods.\n *\n * @class\n */\nclass Contracts {\n    /**\n     *\n     * @param {ExtendedSettings} ExtendedSettings - Setting object\n     * @param {Web3} web3 - A Web3 Object\n     */\n    constructor(settings, web3) {\n        this._settings = settings;\n        this.web3 = web3;\n    }\n\n    /**\n     * Loads a contract from the network.\n     *\n     * @param {Object} abi\n     * @param {string} address\n     * @returns {Object} contract.\n     */\n    loadContract(abi, address) {\n        if (!this._settings.rpcURL) {\n            return rejectResponse('RPC URL is required');\n        }\n        return this.web3.eth.Contract(abi, address, {\n            gas: DEFAULT_GAS,\n            gasPrice: this.web3.utils.toWei('5', 'gwei')\n        });\n    }\n}\n\nexport default Contracts;\n","/**\n * Copyright 2018 Ambrosus Inc.\n * Email: tech@ambrosus.com\n */\n\n/**\n * Object Property for request.\n * @typedef {Object} ExtendedSettings\n * @property {string} [secret] - Private key of the user\n * @property {string} [rpcURL] - RPC URL for the this.web3 instance\n * @property {string} [apiEndpoint] - API Endpoint.\n * @property {Object} [headers] - Header object for the request\n */\n\n/**\n * Object for initializing all classes.\n * @typedef {Object} ClassProperties\n * @property {ExtendedSettings} settings - Properties to initialize the object.\n * @property {Object} [this.web3] - Transaction class object\n */\n\nimport Assets from './api/assets';\nimport Events from './api/events';\nimport Accounts from './api/accounts';\nimport Bundles from './api/bundles';\nimport Utils from './utils/index';\nimport Transactions from './transactions';\nimport Service from './service';\nimport Blocks from './blocks';\nimport {\n    rejectResponse\n} from './responseHandler';\nimport Web3 from 'web3';\nimport Contracts from './contracts';\n\n/**\n * Main Class for initializing the SDK\n *\n * @class\n * @classdesc Entry point for the SDK.\n */\nclass AmbrosusSDK {\n    /**\n     * @type {Object}\n     */\n    static get utils() {\n        return Utils;\n    }\n\n    /**\n     * Creating a SDK and initializing all the default variables.\n     *\n     * @param {ExtendedSettings} [extendSettings] - Properties to initialize the object.\n     */\n    constructor(extendSettings = {}) {\n        this.web3 = new Web3();\n\n        /**\n         * Contains the properties for the SDK.\n         * @type {Object}\n         * @property {string} secret Private key of the user\n         * @property {string} rpcURL RPC URL for the this.web3 instance\n         * @property {apiEndpoint} apiEndpoint Endpoint of the hermes\n         * @property {headers} headers Header object for the request\n         */\n        this._settings = {\n            headers: {}\n        };\n\n        if (Utils.isObject(extendSettings)) {\n            Object.keys(extendSettings).map(key => {\n                this._settings[key] = extendSettings[key];\n            });\n            if (this._settings.rpcURL) {\n                this.web3 = new Web3(new Web3.providers.HttpProvider((this._settings.rpcURL)));\n            }\n\n            /**\n             * Object of class Service\n             * @type {Object}\n             */\n            this.service = new Service(this._settings, this.web3);\n\n            if (this._settings.secret) {\n                this._settings.address = this.service.getAddress(this._settings.secret);\n                const token = this.getApiToken(this._settings.secret);\n                if (token.status !== 400) {\n                    this._settings.token = token;\n                }\n            }\n\n            if ((!this._settings['headers'] || !this._settings.headers.Authorization) && this._settings.token) {\n                this._settings.headers = Object.assign({}, this._settings.headers, {\n                    'Authorization': `AMB_TOKEN ${this._settings.token}`\n                });\n            }\n\n            this.service = new Service(this._settings, this.web3);\n\n            /**\n             * Object of class Assets\n             * @type {Object}\n             */\n            this.assets = new Assets(this._settings, this.service);\n\n            /**\n             * Object of class Events\n             * @type {Object}\n             */\n            this.events = new Events(this._settings, this.service);\n\n            /**\n             * Object of class BLocks\n             * @type {Object}\n             */\n            this.bundles = new Bundles(this._settings);\n\n            /**\n             * Object of class Accounts\n             * @type {Object}\n             */\n            this.accounts = new Accounts(this._settings);\n\n            /**\n             * Object of class Contracts\n             * @type {Object}\n             */\n            this.contracts = new Contracts(this._settings, this.web3);\n\n            /**\n             * Object of class Transaction\n             * @type {Object}\n             */\n            this.transactions = new Transactions(this._settings, this.service, this.web3);\n\n            /**\n             * Object of class Blocks\n             * @type {Object}\n             */\n            this.blocks = new Blocks(this._settings, this.web3);\n\n            /**\n             * Object of class Utils\n             * @type {Object}\n             */\n            this.utils = Utils;\n        } else {\n            return rejectResponse('SDK Init parameters should be an object');\n        }\n    }\n\n    /**\n     * Generate the token which is used in API request.\n     *\n     * @param {string} secret - Private Key which is used to perform the signing of token\n     * @param {number} timestamp - Validity of the token\n     * @returns {Object} Rejected Response or encoded Data\n     */\n    getApiToken(secret = null, timestamp) {\n        if (!secret && !this._settings.secret) {\n            return rejectResponse('Secret key is required generate the token');\n        }\n\n        const secretKey = secret || this._settings.secret;\n        /* istanbul ignore next */\n        const idData = {\n            createdBy: this.service.getAddress(secretKey),\n            validUntil: timestamp || Math.floor(Date.now() / 1000) + 300\n        };\n\n        /* istanbul ignore next */\n        return Utils.base64url(Utils.serializeForHashing({\n            signature: this.service.sign(idData, secretKey),\n            idData\n        }));\n    }\n}\n\nexport default AmbrosusSDK;\n"],"names":["getRequest","path","headers","params","Promise","resolve","reject","request","XMLHttpRequest","open","utils","serializeParams","key","setRequestHeader","onload","handleResponse","then","response","catch","error","send","postRequest","JSON","stringify","Math","floor","status","data","message","parse","reason","rejectResponse","successResponse","web3","Web3","hashMessage","eth","accounts","serializeForHashing","object","subject","Array","isArray","content","Object","keys","sort","map","join","item","toString","fs","require","timeSince","date","seconds","Date","interval","validTimestamp","timestamp","getTime","sortEventsByTimestamp","a","b","isLatest","type","indexOf","utf8Encode","string","String","fromCharCode","replace","utftext","c","n","length","charCodeAt","isObject","value","checkTimeStamp","event","now","idData","parseEvents","eventsArray","results","reduce","asset","eventId","author","createdBy","filter","obj","parts","split","category","name","action","_obj","_event","location","identifiers","events","push","encodeURIComponent","base64url","input","_keyStr","chr1","chr2","chr3","enc1","enc2","enc3","enc4","output","i","isNaN","charAt","checkAccessLevel","accessLevel","getImage","images","default","url","e","getLocation","city","country","getName","alternative","find","getUrlName","parseAsset","info","property","parseEvent","toLowerCase","findEvent","eventType","parseTimelineEvents","_events","ago","isAddress","address","fromWei","unit","toWei","toHex","randomHex","bytes","tokenUtils.hashMessage","calculateHash","tokenUtils.serializeForHashing","readFile","filepath","err","EventHandler","constructor","empty","on","func","ctx","off","list","splice","emit","j","slice","apply","call","arguments","Events","settings","service","_settings","eventHandler","getAssetEvents","assetId","apiEndpoint","getEvents","createSingleEvent","console","log","createEvent","dataHash","signature","sign","secret","Assets","getAsset","getAssets","createAsset","assetSequenceNumber","sequenceNumber","assetRes","req","all","Accounts","addAccount","Bundles","getBundle","bundleId","Transactions","getBalance","userAddress","rpcURL","balance","getTransaction","transactionHash","transaction","getTransactionRecepit","getTransactionReceipt","receipt","getTransactionCount","count","sendTransaction","txObject","to","from","gas","gasPrice","account","getAccount","signedTx","signTransaction","sendSignedTransaction","rawTransaction","Service","secretKey","privateKeyToAccount","getAddress","getPkPair","create","encryptPrivateKey","token","encrypt","decryptPrivateKey","password","privateKey","decrypt","verifyEvents","verify","flag","web3DataHash","verifyObject","hash","web3CreatedBy","recover","web3EventId","verified","isRPCValid","net","isListening","Blocks","getBlock","hashOrNumber","block","getLatestBlock","getBlockNumber","number","Contracts","loadContract","abi","Contract","AmbrosusSDK","Utils","extendSettings","providers","HttpProvider","getApiToken","Authorization","assign","assets","bundles","contracts","transactions","blocks","validUntil"],"mappings":"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"}