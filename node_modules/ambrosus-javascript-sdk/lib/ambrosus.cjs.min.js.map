{"version":3,"file":"ambrosus.cjs.min.js","sources":["../src/responseHandler.js","../src/utils/token-utils.js","../src/utils/file.js","../src/utils/time-utils.js","../src/utils/events-utils.js","../src/utils/index.js","../src/api/request.js","../src/eventHandler.js","../src/api/events.js","../src/api/assets.js","../src/api/accounts.js","../src/api/bundles.js","../src/transactions.js","../src/service.js","../src/blocks.js","../src/contracts.js","../src/index.js"],"sourcesContent":["/**\n * Copyright 2018 Ambrosus Inc.\n * Email: tech@ambrosus.com\n */\n\n/**\n * Handle the response\n *\n * @function handleResponse\n * @param {Object} request\n * @returns {Object} response\n */\nexport const handleResponse = request => {\n    return new Promise((resolve, reject) => {\n\t//console.log(`request.response ${request.response}`);\n\n        const response = {\n            status: request.status,\n            data: null,\n            message: JSON.parse(request.response).reason\n        };\n\n        if (request.status === 200 || request.status === 201) {\n            response.data = JSON.parse(request.response);\n            response.message = 'success';\n            resolve(response);\n        }\n        reject(response);\n    });\n};\n\n/**\n * Reject the response\n *\n * @function rejectResponse\n * @param {any} message\n * @returns {{status: number, data: null, message: any}} rejectData\n */\nexport const rejectResponse = message => {\n    return {\n        status: 400,\n        data: null,\n        message: message\n    };\n};\n\n/**\n * Send a success response\n *\n * @function successResponse\n * @param {any} data\n * @returns {{status: 200, data: any, message: 'success'}} successData\n */\nexport const successResponse = data => {\n    return {\n        status: 200,\n        data: data,\n        message: 'success'\n    };\n};\n","/**\n * Copyright 2018 Ambrosus Inc.\n * Email: tech@ambrosus.com\n */\nimport Web3 from 'web3';\nimport {\n    rejectResponse\n} from '../responseHandler';\n\nconst web3 = new Web3();\n\n/**\n * Takes a number of wei and converts it to any other ether unit.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n * @method fromWei\n *\n * @param {String|BN} number can be a BigNumber, number string or a HEX of a decimal\n * @param {String} unit the unit to convert to, default ether\n *\n * @returns {String} Returns a string\n */\nexport const fromWei = (value, unit = 'ether') => {\n    return web3.utils.fromWei(value, unit);\n};\n\n/**\n * Takes a number of a unit and converts it to wei.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n * @method toWei\n *\n * @param {String|BN} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert from, default ether\n *\n * @returns {String|BN} When given a BN object it returns one as well, otherwise a string\n */\nexport const toWei = (value, unit = 'ether') => {\n    return web3.utils.toWei(value, unit);\n};\n\n/**\n * Checks if the given string is an address\n *\n * @method isAddress\n *\n * @param {String} address the given HEX address\n *\n * @returns {Boolean}\n */\nexport const isAddress = (address) => {\n    return web3.utils.isAddress(address);\n};\n\n/**\n * Will create a random bytes HEX string\n *\n * @function randomHex\n * @param {Number} bytes\n * @returns {String}\n */\nexport const randomHex = (bytes) => {\n    return web3.utils.randomHex(bytes);\n};\n\n/**\n * Auto converts any given value into it's hex representation.\n * And even stringifys objects before.\n *\n * @method toHex\n *\n * @param {String|Number|BN|Object} value\n * @param {Boolean} returnType\n *\n * @returns {String}\n */\nexport const toHex = (value) => {\n    return web3.utils.toHex(value);\n};\n\n/**\n * Calculate the hash value of the given data\n *\n * @param {Object} data - Can be object, array or a string\n * @returns {string} Hashed Message\n */\nexport const calculateHash = (data) => {\n    if (!data) {\n        return rejectResponse('Please provide some data');\n    }\n    return hashMessage(serializeForHashing(data));\n};\n\n/**\n * Hashes the given message passed\n * The data will be UTF-8 HEX decoded and enveloped as follows:\n * \"\\x19Ethereum Signed Message:\\n\" + message.length + message and hashed using keccak256.\n *\n * @param {String} data A message to hash, if its HEX it will be UTF8 decoded before.\n * @returns {String} Hashed Message\n */\nexport const hashMessage = (message) => {\n    return web3.eth.accounts.hashMessage(message);\n};\n\n/**\n * Serialize Object\n *\n * @function serializeForHashing\n * @param {Object | Array | string} object\n * @returns {string} serializedString\n */\nexport const serializeForHashing = (object) => {\n    const isDict = (subject) => typeof subject === 'object' && !Array.isArray(subject);\n    const isString = (subject) => typeof subject === 'string';\n    const isArray = (subject) => Array.isArray(subject);\n\n    if (isDict(object)) {\n        const content = Object.keys(object).sort().map((key) => `\"${key}\":${serializeForHashing(object[key])}`).join(',');\n\n        return `{${content}}`;\n    } else if (isArray(object)) {\n        const content = object.map((item) => serializeForHashing(item)).join(',');\n\n        return `[${content}]`;\n    } else if (isString(object)) {\n        return `\"${object}\"`;\n    }\n    return object.toString();\n};\n","/*\nCopyright: Ambrosus Inc.\nEmail: tech@ambrosus.com\n\nThis Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.\n\nThis Source Code Form is “Incompatible With Secondary Licenses”, as defined by the Mozilla Public License, v. 2.0.\n*/\n\n// tslint:disable-next-line:no-var-requires\nconst fs = require('fs');\nconst path = require('path');\n\nexport const writeFile = (filepath, data, opts = {}) =>\n  new Promise((resolve, reject) => {\n    fs.mkdir(path.dirname(filepath), {recursive: true}, (err) => {\n      if (err) {\n        throw new Error(`can't create dir for ${filepath}: ${err}`);\n      }\n    });\n\n    fs.writeFile(filepath, data, opts, (err) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(data);\n      }\n    });\n  });\n\nexport const readFile = (filepath) =>\n  new Promise((resolve, reject) => {\n    fs.readFile(filepath, 'utf8', (err, data) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(data);\n      }\n    });\n  });\n\nexport const removeFile = (filepath) =>\n  new Promise((resolve, reject) => {\n    fs.unlink(filepath, (err) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n\nexport const checkFileExists = (filepath) =>\n  new Promise((resolve) => {\n    fs.access(filepath, (err) => {\n      resolve(!err);\n    });\n  });\n\nexport const listDirectory = (filepath) =>\n  new Promise((resolve, reject) => {\n    fs.readdir(filepath, (err, files) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(files);\n      }\n    });\n  });\n\nexport const removeDirectory = (filepath) =>\n  new Promise((resolve, reject) => {\n    fs.rmdir(filepath, (err) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n\nexport const makeDirectory = (filepath) =>\n  new Promise((resolve, reject) => {\n    fs.mkdir(filepath, (err) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n\nexport const getfilepath = (filepath) =>\n  new Promise((resolve, reject) => {\n    fs.lstat(filepath, (err, stats) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(stats);\n      }\n    });\n  });","/**\n * Get time since from the provided Date.\n *\n * @function timeSince\n * @param {Date} date date object\n * @returns {string} formatted date\n */\nexport const timeSince = date => {\n    try {\n        let seconds = Math.floor((+new Date() - date) / 1000);\n        let interval = Math.floor(seconds / 31536000);\n        /* istanbul ignore next */\n        if (interval >= 1) {\n            return interval + ' year' + (interval > 1 ? 's' : '');\n        }\n        interval = Math.floor(seconds / 2592000);\n        if (interval >= 1) {\n            return interval + ' month' + (interval > 1 ? 's' : '');\n        }\n        interval = Math.floor(seconds / 86400);\n        if (interval >= 1) {\n            return interval + ' day' + (interval > 1 ? 's' : '');\n        }\n        interval = Math.floor(seconds / 3600);\n        if (interval >= 1) {\n            return interval + ' hour' + (interval > 1 ? 's' : '');\n        }\n        interval = Math.floor(seconds / 60);\n        if (interval >= 1) {\n            return interval + ' minute' + (interval > 1 ? 's' : '');\n        }\n\n        seconds = seconds < 1 ? 1 : seconds;\n\n        return Math.floor(seconds) + ' second' + (seconds !== 1 ? 's' : '');\n    } catch (error) {\n        return '';\n    }\n};\n\n/**\n * Is timestamp valid.\n *\n * @function validTimestamp\n * @param {string} timestamp\n * @returns {boolean} isValid\n */\nexport const validTimestamp = timestamp => {\n    return new Date(timestamp).getTime() > 0;\n};\n","import { timeSince, validTimestamp } from './time-utils';\n/**\n * Check the accessLevel of the asset\n *\n * @function checkAccessLevel\n * @param {Object} event\n * @returns {number} accessLevel\n */\nexport const checkAccessLevel = event => {\n    try {\n        return event.content.idData.accessLevel;\n    } catch (error) {\n        return 0;\n    }\n};\n\n/**\n * Get the Title\n *\n * @function getName\n * @param {Object} obj\n * @param {string} alternative\n * @returns {Object} name\n */\nexport const getName = (obj, alternative = 'No title') => {\n    try {\n        const name = obj.name;\n        let type = obj.type.split('.');\n        type = type[type.length - 1];\n        return [name, type].find(i => i);\n    } catch (e) {\n        return alternative;\n    }\n};\n\n/**\n * Get image URL from the object\n *\n * @function getImage\n * @param {Object} obj\n * @returns {string} Image URL\n */\nexport const getImage = (obj) => {\n    try {\n        return obj.images.default.url;\n    } catch (e) {\n        return '';\n    }\n};\n\n/**\n * Get location from the Object\n *\n * @function getLocation\n * @param {Object} event\n * @returns {Object} Location\n */\nexport const getLocation = (event) => {\n    const location = event.location || event;\n    const {\n        city,\n        country,\n        name\n    } = location;\n    return (\n        [city, country, name].filter(item => !!item).join(', ') || 'No place attached'\n    );\n};\n\n/**\n * Sorts the Event by descending order based on the timestamp\n *\n * @function sortEventsByTimestamp\n * @param {Object} objectA Object which contains timestamp property\n * @param {Object} objectB Object which contains timestamp property\n * @returns {Object} Object sorted by descending order based on timestamp\n */\nexport const sortEventsByTimestamp = (a, b) => {\n    if (a.timestamp > b.timestamp) {\n        return -1;\n    }\n    if (a.timestamp < b.timestamp) {\n        return 1;\n    }\n    return 0;\n};\n\n/**\n * Parse the Event and create groups/properties array\n *\n * @function parseEvent\n * @param {Object}  event\n * @returns {Object} event\n */\nexport const parseEvent = (event) => {\n    event.info = {};\n    event.info['groups'] = [];\n    event.info['properties'] = [];\n\n    // Extract event objects\n    if (event.content.data && Array.isArray(event.content.data)) {\n        event.content.data.map((obj) => {\n            const type = obj.type.split('.');\n            obj.type = type[type.length - 1].toLowerCase();\n\n            if (obj.type === 'location' || obj.type === 'identifiers') {\n                event.info[obj.type] = obj;\n            } else {\n                event.info.name = obj.name || obj.type;\n\n                Object.keys(obj).map((key) => {\n                    if (['images', 'documents', 'description'].indexOf(key) > -1) {\n                        event.info[key] = obj[key];\n                    }\n\n                    if (\n                        [\n                            'type',\n                            'name',\n                            'assetType',\n                            'eventId',\n                            'createdBy',\n                            'timestamp',\n                            'location',\n                            'images',\n                            'documents',\n                            'description',\n                            'identifiers',\n                            'groups',\n                            'properties'\n                        ].indexOf(key) === -1\n                    ) {\n                        const property = {\n                            key,\n                            value: obj[key]\n                        };\n                        event.info[typeof property.value === 'string' || Array.isArray(property.value) ? 'properties' : 'groups'].push(property);\n                    }\n                });\n            }\n            return obj;\n        });\n    }\n    return event;\n};\n\n/**\n * Parse the Asset and create groups/properties Array\n *\n * @function parseAsset\n * @param {Object} asset\n * @returns {Object} asset\n */\nexport const parseAsset = (asset) => {\n    if (!asset.info) {\n        asset.info = {};\n    }\n    asset.info['groups'] = [];\n    asset.info['properties'] = [];\n\n    Object.keys(asset.info).map((key) => {\n        if (key === 'location' || key === 'identifiers') {\n            asset[key] = asset.info[key];\n        } else {\n            if (\n                [\n                    'type',\n                    'name',\n                    'assetType',\n                    'images',\n                    'eventId',\n                    'createdBy',\n                    'timestamp',\n                    'groups',\n                    'properties'\n                ].indexOf(key) === -1\n            ) {\n                const property = {\n                    key,\n                    value: asset.info[key]\n                };\n                asset.info[typeof property.value === 'string' || Array.isArray(property.value) ? 'properties' : 'groups'].push(property);\n            }\n        }\n    });\n};\n\n/**\n * Parse the timeline events based on Date\n *\n * @function parseTimelineEvents\n * @param {Object} e\n * @returns {Object} parsedEvents.\n */\nexport const parseTimelineEvents = (e) => {\n    const events = e.reduce((_events, {\n        content,\n        eventId\n    }) => {\n        const timestamp = content.idData.timestamp;\n        const createdBy = content.idData.createdBy;\n\n        if (content && content.data) {\n            content.data.map(obj => {\n                const parts = obj.type.split('.');\n                const type = parts[parts.length - 1];\n                const category = parts[parts.length - 2] || 'asset';\n                const ago = timeSince(timestamp * 1000);\n\n                obj.timestamp = timestamp;\n                obj.createdBy = createdBy;\n                obj.name = obj.name || type;\n                obj.type = type;\n                obj.eventId = eventId;\n                obj.ago = ago;\n\n                if (obj.type === 'location' && category === 'event') {\n                    content.data.reduce((location, _event) => {\n                        if (_event.type !== 'location') {\n                            _event.location = location;\n                        }\n                    }, obj);\n                }\n\n                const notInclude = ['location', 'identifier', 'identifiers'];\n                if (notInclude.indexOf(obj.type) === -1) {\n                    _events.push(obj);\n                }\n\n                return obj;\n            });\n        }\n        return _events;\n    }, []);\n    events.sort(sortEventsByTimestamp);\n    return events;\n};\n\n/**\n * Check whether the event is latest\n *\n * @function isLatest\n * @param {string} type\n * @returns {boolean}\n */\nexport const isLatest = (type) => {\n    return (['info', 'redirection', 'identifiers', 'branding', 'location'].indexOf(type) === -1);\n};\n\n/**\n * Finds a signle event from the events object\n *\n * @function findEvent\n * @param {string} eventType\n * @param {Object} events\n * @returns {Object} event\n */\nexport const findEvent = (eventType, events) => {\n    let e = false;\n    events.map(event => {\n        if (event.content.data) {\n            event.content.data.map(obj => {\n                const type = obj.type.split('.');\n                obj.type = type[type.length - 1];\n                obj.type = obj.type.toLowerCase();\n\n                if (obj.type === 'location' || obj.type === 'identifiers') {\n                    event.content.data.map(_obj => {\n                        if (['location', 'identifiers'].indexOf(_obj.type) === -1) {\n                            _obj[obj.type === 'location' ? 'location' : 'identifiers'] = obj;\n                        }\n                    });\n                }\n                switch (eventType) {\n                    case 'latest':\n                        if (isLatest(obj.type)) {\n                            e = obj;\n                        }\n                        break;\n                    default:\n                        if (obj.type === eventType) {\n                            e = obj;\n                        }\n                }\n                return obj;\n            });\n        }\n\n        return event;\n    });\n\n    return e;\n};\n\n/**\n * Check if timestamp exists\n *\n * @function checkTimeStamp\n * @param {Object} event\n * @returns {number} timestamp\n */\nexport const checkTimeStamp = event => {\n    let timestamp = Math.floor(Date.now() / 1000);\n\n    return event.content && event.content.idData && event.content.idData.timestamp && validTimestamp(event.content.idData.timestamp) ? event.content.idData.timestamp : timestamp;\n};\n\n/**\n * Parse all events\n *\n * @function parseEvents\n * @param {Array.<Object>} eventsArray\n * @returns {Object} events\n */\nexport const parseEvents = eventsArray => {\n    return eventsArray.results.reduce(\n        (asset, {\n            content,\n            eventId\n        }) => {\n            const timestamp = content.idData.timestamp;\n            const author = content.idData.createdBy;\n\n            if (content && content.data) {\n                content.data\n                    .filter(obj => {\n                        const parts = obj.type.split('.');\n                        const type = parts[parts.length - 1];\n                        const category = parts[parts.length - 2] || 'asset';\n                        obj.timestamp = timestamp;\n                        obj.author = author;\n                        obj.name = obj.name || type;\n                        obj.action = type;\n                        obj.type = type;\n                        obj.eventId = eventId;\n\n                        if ((obj.type === 'location' || obj.type === 'identifiers') && category === 'event') {\n                            content.data.reduce((_obj, _event) => {\n                                if (obj.type === 'location' && _event.type !== 'location') {\n                                    _event.location = _obj;\n                                }\n                                if (obj.type === 'identifiers' && _event.type !== 'identifiers') {\n                                    _event.identifiers = _obj;\n                                }\n                                return _obj;\n                            }, obj);\n                        } else {\n                            return obj;\n                        }\n                    })\n                    .map(event => {\n                        if (['info', 'redirection', 'identifiers', 'branding'].indexOf(event.type) > -1) {\n                            if (!asset[event.type] || asset[event.type].timestamp < event.timestamp) {\n                                asset[event.type] = event;\n                            }\n                        } else {\n                            asset.events.push(event);\n                        }\n                    });\n            }\n            return asset;\n        }, {\n            events: []\n        }\n    );\n};\n","/**\n * Copyright 2018 Ambrosus Inc.\n * Email: tech@ambrosus.com\n */\n\nimport * as tokenUtils from './token-utils';\nimport * as file from './file';\nimport {\n    checkAccessLevel,\n    getName,\n    getImage,\n    getLocation,\n    sortEventsByTimestamp,\n    parseEvent,\n    parseAsset,\n    parseTimelineEvents,\n    isLatest,\n    findEvent,\n    checkTimeStamp,\n    parseEvents\n} from './events-utils';\n\nimport {\n    timeSince,\n    validTimestamp\n} from './time-utils';\n\n/**\n * Check if the passed parameter is a valid object\n *\n * @param {any} value\n * @returns {boolean}\n */\nfunction isObject(value) {\n    return value !== null && typeof value === 'object' && value instanceof Object && !(value instanceof Array);\n}\n\n/**\n * Get the name from the URL\n *\n * @function getUrlName\n * @param {string} url\n * @returns {string} name\n */\nconst getUrlName = (url) => {\n    let name = url.split('/');\n    name = name[name.length - 1];\n    return name;\n};\n\n/**\n * Seralize object into query params\n *\n * Creates a query params string by taking a params object.\n *\n * @function serializeParams\n * @param {Object} params properties to be passed as query params.\n * @returns {string} queryParams\n */\nconst serializeParams = params => {\n    let serializeParams = '';\n\n    for (let key in params) {\n        if (serializeParams !== '') {\n            serializeParams += '&';\n        }\n        serializeParams += key + '=' + encodeURIComponent(params[key]);\n    }\n    return serializeParams;\n};\n\n/**\n * Private method for UTF - 8 encoding\n *\n * @function utf8Encode\n * @param {string} string\n * @returns {string} encodedText\n */\nconst utf8Encode = (string) => {\n    string = string.replace(/\\r\\n/g, '\\n');\n    let utftext = '';\n\n    for (let n = 0; n < string.length; n++) {\n        let c = string.charCodeAt(n);\n\n        if (c < 128) {\n            utftext += String.fromCharCode(c);\n        } else if ((c > 127) && (c < 2048)) {\n            utftext += String.fromCharCode((c >> 6) | 192);\n            utftext += String.fromCharCode((c & 63) | 128);\n        } else {\n            utftext += String.fromCharCode((c >> 12) | 224);\n            utftext += String.fromCharCode(((c >> 6) & 63) | 128);\n            utftext += String.fromCharCode((c & 63) | 128);\n        }\n    }\n\n    return utftext;\n};\n\n/**\n * Base 64 encode\n *\n * @function base64url\n * @param {string} input\n * r@returns {string} encodedString\n */\nconst base64url = (input) => {\n    const _keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n    let output = '';\n    let chr1, chr2, chr3, enc1, enc2, enc3, enc4;\n    let i = 0;\n\n    input = utf8Encode(input);\n\n    while (i < input.length) {\n        chr1 = input.charCodeAt(i++);\n        chr2 = input.charCodeAt(i++);\n        chr3 = input.charCodeAt(i++);\n\n        enc1 = chr1 >> 2;\n        enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n        enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n        enc4 = chr3 & 63;\n\n        if (isNaN(chr2)) {\n            enc3 = enc4 = 64;\n        } else if (isNaN(chr3)) {\n            enc4 = 64;\n        }\n        output = output +\n            _keyStr.charAt(enc1) + _keyStr.charAt(enc2) +\n            _keyStr.charAt(enc3) + _keyStr.charAt(enc4);\n    }\n    return output;\n};\n\nexport default {\n    isObject,\n    validTimestamp,\n    checkTimeStamp,\n    parseEvents,\n    serializeParams,\n    utf8Encode,\n    base64url,\n    checkAccessLevel,\n    getImage,\n    getLocation,\n    getName,\n    getUrlName,\n    sortEventsByTimestamp,\n    parseAsset,\n    parseEvent,\n    isLatest,\n    findEvent,\n    parseTimelineEvents,\n    timeSince,\n    isAddress: tokenUtils.isAddress,\n    fromWei: tokenUtils.fromWei,\n    toWei: tokenUtils.toWei,\n    toHex: tokenUtils.toHex,\n    randomHex: tokenUtils.randomHex,\n    hashMessage: tokenUtils.hashMessage,\n    calculateHash: tokenUtils.calculateHash,\n    serializeForHashing: tokenUtils.serializeForHashing,\n    readFile: file.readFile\n};\n","/**\n * Copyright 2018 Ambrosus Inc.\n * Email: tech@ambrosus.com\n */\n\nimport { handleResponse } from './../responseHandler';\nimport utils from '../utils/index';\n\n/**\n * Create a GET request\n *\n * @param {string} path\n * @param {Object} headers\n * @param {Object} params\n */\nexport function getRequest(path, headers, params) {\n    return new Promise((resolve, reject) => {\n        let request = new XMLHttpRequest();\n        request.open('GET', `${path}${utils.serializeParams(params)}`, true);\n        if (headers) {\n            for (const key in headers) {\n                request.setRequestHeader(`${key}`, `${headers[key]}`);\n            }\n        }\n        request.onload = () => {\n            handleResponse(request)\n                .then(response => resolve(response))\n                .catch(error => reject(error));\n        };\n        request.send();\n    });\n}\n\n/**\n * Create a POST Request\n *\n * @param {string} path\n * @param {Object} headers\n * @param {Object} params\n */\nexport function postRequest(path, headers, params) {\n    /* istanbul ignore next */\n    return new Promise((resolve, reject) => {\n        let request = new XMLHttpRequest();\n        request.open('POST', path, true);\n\n//console.log(`postRequest.URL ${path}`);\n//console.log(`postRequest.headers ${JSON.stringify(headers)}`);\n//console.log(`postRequest.params ${JSON.stringify(params)}`);\n\n        request.setRequestHeader('Content-type', 'application/json; charset=utf-8');\n        if (headers) {\n            for (const key in headers) {\n                request.setRequestHeader(`${key}`, `${headers[key]}`);\n            }\n        }\n        request.onload = () => {\n            handleResponse(request)\n                .then(response => resolve(response))\n                .catch(error => reject(error));\n        };\n        request.send(JSON.stringify(params));\n    });\n}\n","/**\n * Copyright 2018 Ambrosus Inc.\n * Email: tech@ambrosus.com\n */\n\n/**\n * Event Handler Methods.\n *\n * @class\n */\nclass EventHandler {\n    constructor() {\n        this.events = {};\n        this.empty = [];\n    }\n    /**\n     * Subscribe to an event.\n     *\n     * @param {any} type\n     * @param {any} func\n     * @param {any} ctx\n     */\n    on(type, func, ctx) {\n        /* istanbul ignore next */\n        (this.events[type] = this.events[type] || []).push([func, ctx]);\n        /* istanbul ignore next */\n        return this;\n    }\n\n    /**\n     * Unsubscribe from a global event.\n     *\n     * @param {any} type\n     * @param {any} func\n     */\n    off(type, func) {\n        /* istanbul ignore next */\n        type || (this.events = {});\n        /* istanbul ignore next */\n        let list = this.events[type] || this.empty;\n        /* istanbul ignore next */\n        let i = (list.length = func ? list.length : 0);\n\n        /* istanbul ignore next */\n        while (i--) {\n            func === list[i][0] && list.splice(i, 1);\n        }\n        /* istanbul ignore next */\n        return this;\n    }\n\n    /**\n     * Emit a global event\n     *\n     * @param {any} type\n     */\n    emit(type) {\n        /* istanbul ignore next */\n        let e = this.events[type] || this.empty;\n        /* istanbul ignore next */\n        let list = e.length > 0 ? e.slice(0, e.length) : e;\n        let i = 0;\n        let j;\n\n        /* istanbul ignore next */\n        while ((j = list[i++])) {\n            j[0].apply(j[1], this.empty.slice.call(arguments, 1));\n        }\n        /* istanbul ignore next */\n        return this;\n    }\n}\n\nexport default EventHandler;\n","/**\n * Copyright 2018 Ambrosus Inc.\n * Email: tech@ambrosus.com\n */\n\nimport { getRequest, postRequest } from './request';\nimport utils from '../utils/index';\nimport { rejectResponse, successResponse } from '../responseHandler';\nimport EventHandler from '../eventHandler';\n\n/**\n * Events Class\n *\n * @class\n * @classdesc Every Events related methods\n */\nclass Events {\n    /**\n   * Initializing the Events class\n   *\n   * @param {ClassProperties} - Properties to initialize the class object\n   */\n    constructor(settings, service) {\n        this._settings = settings;\n        this.service = service;\n        this.eventHandler = new EventHandler();\n    }\n\n   /**\n   * Find Events by AssetId\n   *\n   * @param {string} assetId - Id of the asset\n   * @returns {Object} events\n   */\n    getAssetEvents(assetId) {\n        return new Promise((resolve, reject) => {\n            if (!assetId) {\n                return reject(rejectResponse('Asset ID is missing.'));\n            }\n\n            getRequest(\n                `${this._settings.apiEndpoint}/event2/list/?assteId=${encodeURIComponent(assetId)}`,\n                this._settings.headers\n            )\n                .then(response => resolve(response))\n                .catch(error => reject(error));\n        });\n    }\n\n    /**\n   * Get all Events with the matching params\n   *\n   * {@link https://ambrosus.docs.apiary.io/#reference/events/eventsassetidfromtimestamptotimestampperpagepagecreatedbydata/find-events Find Events}\n   * @param {Object} params - Properties of the events\n   * @returns {Object} events\n   */\n    getEvents(params) {\n        return new Promise((resolve, reject) => {\n            getRequest(\n                `${this._settings.apiEndpoint}/event2/list?${utils.serializeParams(params)}`,\n                this._settings.headers\n            )\n                .then(response => resolve(response))\n                .catch(error => reject(error));\n        });\n    }\n\n    /**\n   * Create a new event.\n   *\n   * {@link https://ambrosus.docs.apiary.io/#reference/events/assetsassetidevents/create-an-event Create a new Event}\n   * @param {string} assetId - Corresponding asset Id to the event\n   * @param {Object} params - Properties of the event\n   * @returns {Promise<Object>} Promise\n   */\n    createSingleEvent(assetId, eventId, params) {\n        console.log(`createSingleEvent.eventId: ${eventId}`);\n\n        return new Promise((resolve, reject) => {\n            postRequest(\n                `${this._settings.apiEndpoint}/event2/create/${eventId}`,\n                this._settings.headers,\n                params\n            )\n                .then(response => resolve(response))\n                .catch(error => reject(error));\n        });\n    }\n\n    /**\n   * Creates a new Event.\n   *\n   * {@link https://ambrosus.docs.apiary.io/#reference/events/assetsassetidevents/create-an-event Create a new Event}\n   * @param {string} assetId - Corresponding asset Id to the event\n   * @param {Object} event - Properties of the events\n   * @returns {Object} eventResponse\n   */\n    createEvent(assetId, event) {\n        return new Promise((resolve, reject) => {\n            if (typeof event !== 'object') {\n                return reject(rejectResponse('event should be a json object'));\n            } else if (!this._settings.headers['Authorization']) {\n                return reject(\n                    rejectResponse('Authorization header is required to create an event')\n                );\n            }\n\n            if (!assetId) {\n                return reject(rejectResponse('Asset ID is missing.'));\n            }\n\n            if (!event) {\n                return reject(rejectResponse('Event data is missing.'));\n            }\n\n            let params = {};\n\n            if (event.content && event.content.data) {\n                const idData = {\n                    assetId: assetId,\n                    timestamp: utils.checkTimeStamp(event),\n                    accessLevel: utils.checkAccessLevel(event),\n                    createdBy: this._settings.address,\n                    dataHash: utils.calculateHash(event.content.data)\n                };\n\n                params = {\n                    content: {\n                        idData: idData,\n                        signature: this.service.sign(idData, this._settings.secret),\n                        data: event.content.data\n                    }\n                };\n            } else {\n                return reject(\n                    rejectResponse('Invalid data: No content found at content.data.')\n                );\n            }\n\n            let eventId = utils.calculateHash(params.content);\n\n            return this.createSingleEvent(assetId, eventId, params)\n                .then(response => {\n                    this.eventHandler.emit('event:created');\n                    resolve(response);\n                })\n                .catch(error => reject(error));\n        });\n    }\n\n    /**\n   * Parse the provided events\n   *\n   * @param {Object} eventsArray - Array of events which is to be parsed\n   * @returns {Object} Reject Response or Success Response with parsed events\n   */\n    parseEvents(eventsArray) {\n        return new Promise((resolve, reject) => {\n            if (eventsArray && eventsArray.results) {\n                return resolve(successResponse(utils.parseEvents(eventsArray)));\n            }\n            return reject(rejectResponse('Results array is missing.'));\n        });\n    }\n}\n\nexport default Events;\n","/**\n * Copyright 2018 Ambrosus Inc.\n * Email: tech@ambrosus.com\n */\n\nimport { getRequest, postRequest } from './request';\nimport utils from '../utils/index';\nimport Events from './events';\nimport { rejectResponse } from '../responseHandler';\nimport EventHandler from '../eventHandler';\n\n/**\n * Assets Class\n *\n * @class\n * @classdesc Every Assets related methods\n */\nclass Assets {\n    /**\n   * Initializing the Assets class\n   *\n   * @param {ClassProperties} - Properties to initialize the class object\n   */\n    constructor(settings, service) {\n        this._settings = settings;\n        this.service = service;\n        this.events = new Events(this._settings, this.service);\n        this.eventHandler = new EventHandler();\n    }\n\n    /**\n   * Find asset by Id.\n   *\n   * {@link https://ambrosus.docs.apiary.io/#reference/asset/assets/fetch-an-asset-by-id  Find asset by Id}\n   * @param {string} assetId - Id of the asset to be searched.\n   * @returns {Object} asset\n   */\n    getAsset(assetId) {\n        return new Promise((resolve, reject) => {\n            if (!assetId) {\n                return reject(rejectResponse('Asset ID is missing.'));\n            }\n            if (assetId.assetId) {\n                assetId = assetId.assetId;\n            }\n            getRequest(\n                `${this._settings.apiEndpoint}/asset2/info/${encodeURIComponent(assetId)}`,\n                this._settings.headers\n            )\n                .then(response => resolve(response))\n                .catch(error => reject(error));\n        });\n    }\n\n    /**\n   * Get all assets with the matching params\n   *\n   * {@link https://ambrosus.docs.apiary.io/#reference/asset/assetsassetid/find-assets Find Assets}\n   * @param {Object} params - Parameters to search assets.\n   * @returns {Object} assets\n   */\n    getAssets(params = {}) {\n        return new Promise((resolve, reject) => {\n            getRequest(\n                `${this._settings.apiEndpoint}/asset2/list?${utils.serializeParams(params)}`,\n                this._settings.headers\n            )\n                .then(response => resolve(response))\n                .catch(error => reject(error));\n        });\n    }\n\n    /**\n   * Creates a new Asset\n   *\n   * {@link https://ambrosus.docs.apiary.io/#reference/asset/assets/create-an-asset Create a new Asset}\n   * @param {Object} asset - Parameters to create a new asset.\n   * @params {Array} events - Events array\n   * @returns {Object} assetResponse\n   */\n    createAsset(asset = {}, events = []) {\n        let assetSequenceNumber = 0;\n        return new Promise((resolve, reject) => {\n            if (typeof asset !== 'object') {\n                return reject(rejectResponse('asset should be a json object or empty'));\n            } else if (!this._settings.headers['Authorization']) {\n                return reject(\n                    rejectResponse('Authorization header is required to create an asset')\n                );\n            }\n\n            const idData = {\n                timestamp: utils.checkTimeStamp(asset),\n                sequenceNumber: (assetSequenceNumber =\n          (assetSequenceNumber + 1) % 1000000),\n                createdBy: this._settings.address\n            };\n\n            const params = {\n                content: {\n                    idData: idData,\n                    signature: this.service.sign(idData, this._settings.secret)\n                }\n            };\n\n            let assetId = utils.calculateHash(params.content);\n\n            postRequest(\n                `${this._settings.apiEndpoint}/asset2/create/${assetId}`,\n                this._settings.headers,\n                params\n            )\n                .then(async assetRes => {\n                    if (events.length) {\n                        const req = events.map(event => {\n                            return this.events.createEvent(assetRes.data.assetId, event);\n                        });\n                        await Promise.all(req);\n                        this.eventHandler.emit('asset:created');\n                        resolve(assetRes);\n                    } else {\n                        this.eventHandler.emit('asset:created');\n                        resolve(assetRes);\n                    }\n                })\n                .catch(error => reject(error));\n        });\n    }\n}\n\nexport default Assets;\n","/**\n * Copyright 2018 Ambrosus Inc.\n * Email: tech@ambrosus.com\n */\n\nimport { postRequest } from './request';\nimport { rejectResponse } from '../responseHandler';\n/**\n * Accounts Class\n *\n * @class\n * @classdesc Every Accounts related methods\n */\nclass Accounts {\n    /**\n   * Initializing the Accounts class\n   *\n   * @param {ClassProperties} - Properties to initialize the class object\n   */\n    constructor (settings) {\n        this._settings = settings;\n    }\n\n    /**\n      * Adds a new account\n      *\n      * {@link https://ambrosus.docs.apiary.io/#reference/account/accounts/add-account Add a new account}\n      * @param {Object} params Parameters to create a new Account\n      * @returns {Object} accountResponse\n      */\n    addAccount (params) {\n        return new Promise((resolve, reject) => {\n            if (!this._settings.headers['Authorization']) {\n                return reject(rejectResponse('Authorization header is required to create an account'));\n            } else if (!params) {\n                return reject(rejectResponse('Create account params are required to create an account.'));\n            }\n            postRequest(`${this._settings.apiEndpoint}/accounts`, this._settings.headers, params)\n                .then(response => resolve(response))\n                .catch(error => reject(error));\n        });\n    }\n}\n\nexport default Accounts;\n","/**\n * Copyright 2018 Ambrosus Inc.\n * Email: tech@ambrosus.com\n */\n\nimport { getRequest } from './request';\nimport { rejectResponse } from '../responseHandler';\n\n/**\n * Events Class\n *\n * @class\n * @classdesc Every Events related methods\n */\nclass Bundles {\n    /**\n     * Initializing the Events class\n     *\n     * @param {ClassProperties} - Properties to initialize the class object\n     */\n    constructor(settings) {\n        this._settings = settings;\n    }\n    /**\n     * Returns this bundle with respect to id\n     *\n     * @param {string} bundleId - Id of the bundle\n     * @returns {Object} bundle\n     */\n    getBundle(bundleId) {\n        return new Promise((resolve, reject) => {\n            if (!bundleId) {\n                return reject(rejectResponse('Bundle ID is missing.'));\n            }\n            if (bundleId.bundleId) {\n                bundleId = bundleId.bundleId;\n            }\n            getRequest(`${this._settings.apiEndpoint}/bundle2/info/${encodeURIComponent(bundleId)}`, this._settings.headers)\n                .then(response => resolve(response))\n                .catch(error => reject(error));\n        });\n    }\n}\n\nexport default Bundles;\n","/**\n * Copyright 2018 Ambrosus Inc.\n * Email: tech@ambrosus.com\n */\n\nimport {\n    rejectResponse\n} from './responseHandler';\n\n/**\n * Class with all the transaction related methods.\n *\n * @class\n */\nclass Transactions {\n    /**\n     *\n     * @param {ExtendedSettings} ExtendedSettings - Setting object\n     * @param {Web3} web3 - A Web3 Object\n     */\n    constructor(settings, service, web3) {\n        this._settings = settings;\n        this.web3 = web3;\n        this.service = service;\n    }\n\n    /**\n     * Returns the balance of the account on the Network\n     *\n     * @returns {Promise} balance\n     */\n    getBalance(address = null) {\n        return new Promise((resolve, reject) => {\n            const userAddress = address || this._settings.address;\n            if (!this._settings.rpcURL) {\n                return reject(rejectResponse('RPC URL is required to get the balance'));\n            }\n            if (!userAddress) {\n                return reject(rejectResponse('Address is required to get the balance'));\n            }\n            this.web3.eth.getBalance(userAddress).then(balance => resolve(balance))\n                .catch(err => reject(err));\n        });\n    }\n\n    /**\n     * Returns a transaction matching the given transaction hash.\n     *\n     * @param {string} transactionHash\n     * @returns {Promise<object> }- A transaction object\n     */\n    getTransaction(transactionHash) {\n        return new Promise((resolve, reject) => {\n            if (!this._settings.rpcURL) {\n                return reject(rejectResponse('RPC URL is required'));\n            }\n            if (!transactionHash) {\n                return reject(rejectResponse('Transaction hash is required'));\n            }\n            return this.web3.eth.getTransaction(transactionHash).then(transaction => resolve(transaction))\n                .catch(err => reject(err));\n        });\n    }\n\n    /**\n     * Returns the transaction recepit.\n     * The receipt is not available for pending transactions and returns null.\n     *\n     * @param {string} transactionHash\n     * @returns {Promise<object>} A transaction receipt object, or null when no receipt was found:\n     */\n    getTransactionRecepit(transactionHash) {\n        return new Promise((resolve, reject) => {\n            if (!this._settings.rpcURL) {\n                return reject(rejectResponse('RPC URL is required'));\n            }\n            if (!transactionHash) {\n                return reject(rejectResponse('Transaction hash is required'));\n            }\n            return this.web3.eth.getTransactionReceipt(transactionHash).then(receipt => resolve(receipt))\n                .catch(err => reject(err));\n        });\n    }\n\n    /**\n     * Get the numbers of transactions sent from this address.\n     *\n     * @param {string} address\n     * @returns {Promise<number>} - The number of transactions sent from the given address.\n     */\n    getTransactionCount(address = null) {\n        return new Promise((resolve, reject) => {\n            const userAddress = address || this._settings.address;\n            if (!this._settings.rpcURL) {\n                return reject(rejectResponse('RPC URL is required'));\n            }\n            if (!userAddress) {\n                return reject(rejectResponse('Address is required to get the transaction count'));\n            }\n            return this.web3.eth.getTransactionCount(userAddress).then(count => resolve(count))\n                .catch(err => reject(err));\n        });\n    }\n\n    /**\n     * Signs and sends the transaction to the network\n     *\n     * @param {string} address Address of the receiving person\n     * @param {number} value Total number of token to be sent\n     * @returns {Promise} transactionResponse\n     */\n    sendTransaction(address, value, data = null) {\n        return new Promise((resolve, reject) => {\n            if (!this._settings.secret && !this._settings.rpcURL) {\n                return reject(rejectResponse('Secret key and RPC URL is required to make a transaction'));\n            }\n            const txObject = {\n                to: address,\n                from: this._settings.address,\n                value: this.web3.utils.toHex(this.web3.utils.toWei(value, 'ether')),\n                gas: this.web3.utils.toHex(21000),\n                gasPrice: this.web3.utils.toHex(this.web3.utils.toWei('10', 'gwei'))\n            };\n            if (data) {\n                txObject.data = data;\n            }\n            const account = this.service.getAccount(this._settings.secret);\n            const signedTx = account.signTransaction(txObject);\n            signedTx.then(value => {\n                this.web3.eth.sendSignedTransaction(value.rawTransaction).then(receipt => resolve(receipt))\n                    .catch(err => reject(err));\n            }).catch((err) => {\n                reject(err);\n            });\n        });\n    }\n}\n\nexport default Transactions;\n","/**\n * Copyright 2018 Ambrosus Inc.\n * Email: tech@ambrosus.com\n */\n\nimport utils from './utils/index';\nimport {\n    rejectResponse\n} from './responseHandler';\nimport Web3 from 'web3';\nimport Events from './api/events';\n\n/**\n * Class with different service methods.\n *\n * @class\n */\nclass Service {\n    /**\n     *\n     * @param {ExtendedSettings} ExtendedSettings - Setting object which includes headers and privateKey\n     * @param {Web3} web3 - A Web3 Object\n     */\n    constructor(settings, web3, events) {\n        this._settings = settings;\n        this.web3 = web3;\n        this.events = events;\n        this.events = new Events(this._settings);\n    }\n\n    /**\n     * Creates an account object from a private key.\n     *\n     * @param {string} secret - Private Key which is used to create account.\n     * @returns {Object} Account\n     */\n    getAccount(secret = null) {\n        const secretKey = secret || this._settings.secret;\n        if (!secretKey) {\n            return rejectResponse('Secret key is required generate the account');\n        }\n\n        /* istanbul ignore next */\n        return this.web3.eth.accounts.privateKeyToAccount(secretKey);\n    }\n\n    /**\n     * Returns the address\n     *\n     * @param {string | null} secret - Private Key which is used to extract the address.\n     * @returns {Object | string} Rejected Response or address\n     */\n    getAddress(secret = null) {\n        const secretKey = secret || this._settings.secret;\n        if (!secretKey) {\n            return rejectResponse('Secret key is required generate the address');\n        }\n        /* istanbul ignore next */\n        return this.web3.eth.accounts.privateKeyToAccount(secretKey).address;\n    }\n\n    /**\n     * Retruns the signed value of the Object provided.\n     *\n     * @param {Object} data - Object which is to be signed.\n     * @param {string} secret - Private key to sign the object.\n     * @returns {Object | string} Rejected Response or Signed data\n     */\n    sign(data = {}, secret = null) {\n        const secretKey = secret || this._settings.secret;\n        if (!secretKey) {\n            return rejectResponse('Secret key is required to perform signature');\n        }\n        /* istanbul ignore next */\n        return this.web3.eth.accounts.sign(utils.serializeForHashing(data), secretKey).signature;\n    }\n\n    /**\n     * Returns object consisting of address & privateKey\n     *\n     * @returns {{address, privateKey}}\n     */\n    getPkPair() {\n        return this.web3.eth.accounts.create(this.web3.utils.randomHex(32));\n    }\n\n    /**\n     * Encrypt the data with the provided privateKey\n     *\n     * @param {string} secret\n     * @param {any} token\n     * @returns {string} encryptedData\n     */\n    encryptPrivateKey(token, secret = null) {\n        const secretKey = secret || this._settings.secret;\n        if (!secretKey) {\n            return rejectResponse('Secret key is required generate a signature');\n        } else if (!token) {\n            return rejectResponse('Token is required to encrypt the data');\n        }\n        return this.web3.eth.accounts.encrypt(secretKey, token);\n    }\n\n    /**\n     * Decrypt the encrypted privateKey\n     *\n     * @param {string} token\n     * @param {string} password\n     * @returns {Object}\n     */\n    decryptPrivateKey(token, password) {\n        try {\n            const {\n                address,\n                privateKey\n            } = this.web3.eth.accounts.decrypt(token, password);\n            return [address, privateKey];\n        } catch (e) {\n            return [null];\n        }\n    }\n\n    verifyEvents(assetId) {\n        return new Promise((resolve, reject) => {\n            if (!assetId) {\n                return reject(rejectResponse('Asset ID is required'));\n            }\n            this.events.getAssetEvents(assetId).then(response => {\n                console.log(`verifyEvents: assetId ${assetId}, events ${response.data.data.length}`);\n\n                for (let i = 0; i < response.data.data.length; i++) {\n                    const {\n                        idData,\n                        signature,\n                        data\n                    } = response.data.data[i].content;\n\n                    resolve(this.verify(idData, signature, data, response.data.data[i].eventId));\n                }\n            }).catch(error => {\n                reject(error);\n            });\n        });\n    }\n\n    verify(idData, signature, data, eventId) {\n        let flag = true;\n        const verified = {\n            hash: true,\n            createdBy: true,\n            eventId: true\n        };\n\n        // Check Data Hash;\n        const web3DataHash = utils.calculateHash(data);\n        if (idData.dataHash !== web3DataHash) {\n            flag = false;\n            verifyObject.hash = false;\n        }\n\n        // Check createdBy\n        const web3CreatedBy = this.web3.eth.accounts.recover(utils.serializeForHashing(idData), signature);\n        if (idData.createdBy !== web3CreatedBy) {\n            flag = false;\n            verifyObject.createdBy = false;\n        }\n\n        // Check content of eventId\n        const web3EventId = utils.calculateHash({\n            idData,\n            data,\n            signature\n        });\n        if (eventId !== web3EventId) {\n            flag = false;\n            verifyObject.eventId = false;\n        }\n        return {\n            flag,\n            verified\n        };\n    }\n\n    /**\n     * Checks if the provided RPC URL is valid\n     * @param {string} url\n     * @returns {boolean}\n     */\n    isRPCValid(url) {\n        const web3 = new Web3(url);\n        return web3.eth.net.isListening().then(() => {\n            return true;\n        }).catch(() => {\n            return false;\n        });\n    }\n}\n\nexport default Service;\n","/**\n * Copyright 2018 Ambrosus Inc.\n * Email: tech@ambrosus.com\n */\n\nimport {\n    rejectResponse\n} from './responseHandler';\n\n/**\n * Class with all the blocks related methods.\n *\n * @class\n */\nclass Blocks {\n    /**\n     *\n     * @param {ExtendedSettings} ExtendedSettings - Setting object which includes headers and privateKey\n     * @param {Web3} web3 - A Web3 Object\n     */\n    constructor(settings, web3) {\n        this._settings = settings;\n        this.web3 = web3;\n    }\n\n    /**\n     * Returns a block matching the block number or block hash.\n     *\n     * @param {string | number} hashOrNumber\n     * @returns {Promise<object>} - The block object\n     */\n    getBlock(hashOrNumber) {\n        return new Promise((resolve, reject) => {\n            if (!this._settings.rpcURL) {\n                return reject(rejectResponse('RPC URL is required'));\n            }\n            if (!hashOrNumber) {\n                return reject(rejectResponse('Block Number is required'));\n            }\n            return this.web3.eth.getBlock(hashOrNumber).then(block => resolve(block))\n                .catch(err => reject(err));\n        });\n    }\n\n    /**\n     * Returns the latest block.\n     *\n     * @returns {Promise<Object>} - The latest block data.\n     */\n    getLatestBlock() {\n        return new Promise((resolve, reject) => {\n            if (!this._settings.rpcURL) {\n                return reject(rejectResponse('RPC URL is required'));\n            }\n            this.web3.eth.getBlockNumber().then(number => {\n                return this.web3.eth.getBlock(number).then(block => resolve(block))\n                    .catch(err => reject(err));\n            }).catch(err => reject(err));\n        });\n    }\n}\n\nexport default Blocks;\n","/**\n * Copyright 2018 Ambrosus Inc.\n * Email: tech@ambrosus.com\n */\n\nimport {\n    rejectResponse\n} from './responseHandler';\nconst DEFAULT_GAS = 4700000;\n\n/**\n * Class with all the smart contracts related methods.\n *\n * @class\n */\nclass Contracts {\n    /**\n     *\n     * @param {ExtendedSettings} ExtendedSettings - Setting object\n     * @param {Web3} web3 - A Web3 Object\n     */\n    constructor(settings, web3) {\n        this._settings = settings;\n        this.web3 = web3;\n    }\n\n    /**\n     * Loads a contract from the network.\n     *\n     * @param {Object} abi\n     * @param {string} address\n     * @returns {Object} contract.\n     */\n    loadContract(abi, address) {\n        if (!this._settings.rpcURL) {\n            return rejectResponse('RPC URL is required');\n        }\n        return this.web3.eth.Contract(abi, address, {\n            gas: DEFAULT_GAS,\n            gasPrice: this.web3.utils.toWei('5', 'gwei')\n        });\n    }\n}\n\nexport default Contracts;\n","/**\n * Copyright 2018 Ambrosus Inc.\n * Email: tech@ambrosus.com\n */\n\n/**\n * Object Property for request.\n * @typedef {Object} ExtendedSettings\n * @property {string} [secret] - Private key of the user\n * @property {string} [rpcURL] - RPC URL for the this.web3 instance\n * @property {string} [apiEndpoint] - API Endpoint.\n * @property {Object} [headers] - Header object for the request\n */\n\n/**\n * Object for initializing all classes.\n * @typedef {Object} ClassProperties\n * @property {ExtendedSettings} settings - Properties to initialize the object.\n * @property {Object} [this.web3] - Transaction class object\n */\n\nimport Assets from './api/assets';\nimport Events from './api/events';\nimport Accounts from './api/accounts';\nimport Bundles from './api/bundles';\nimport Utils from './utils/index';\nimport Transactions from './transactions';\nimport Service from './service';\nimport Blocks from './blocks';\nimport {\n    rejectResponse\n} from './responseHandler';\nimport Web3 from 'web3';\nimport Contracts from './contracts';\n\n/**\n * Main Class for initializing the SDK\n *\n * @class\n * @classdesc Entry point for the SDK.\n */\nclass AmbrosusSDK {\n    /**\n     * @type {Object}\n     */\n    static get utils() {\n        return Utils;\n    }\n\n    /**\n     * Creating a SDK and initializing all the default variables.\n     *\n     * @param {ExtendedSettings} [extendSettings] - Properties to initialize the object.\n     */\n    constructor(extendSettings = {}) {\n        this.web3 = new Web3();\n\n        /**\n         * Contains the properties for the SDK.\n         * @type {Object}\n         * @property {string} secret Private key of the user\n         * @property {string} rpcURL RPC URL for the this.web3 instance\n         * @property {apiEndpoint} apiEndpoint Endpoint of the hermes\n         * @property {headers} headers Header object for the request\n         */\n        this._settings = {\n            headers: {}\n        };\n\n        if (Utils.isObject(extendSettings)) {\n            Object.keys(extendSettings).map(key => {\n                this._settings[key] = extendSettings[key];\n            });\n            if (this._settings.rpcURL) {\n                this.web3 = new Web3(new Web3.providers.HttpProvider((this._settings.rpcURL)));\n            }\n\n            /**\n             * Object of class Service\n             * @type {Object}\n             */\n            this.service = new Service(this._settings, this.web3);\n\n            if (this._settings.secret) {\n                this._settings.address = this.service.getAddress(this._settings.secret);\n                const token = this.getApiToken(this._settings.secret);\n                if (token.status !== 400) {\n                    this._settings.token = token;\n                }\n            }\n\n            if ((!this._settings['headers'] || !this._settings.headers.Authorization) && this._settings.token) {\n                this._settings.headers = Object.assign({}, this._settings.headers, {\n                    'Authorization': `AMB_TOKEN ${this._settings.token}`\n                });\n            }\n\n            this.service = new Service(this._settings, this.web3);\n\n            /**\n             * Object of class Assets\n             * @type {Object}\n             */\n            this.assets = new Assets(this._settings, this.service);\n\n            /**\n             * Object of class Events\n             * @type {Object}\n             */\n            this.events = new Events(this._settings, this.service);\n\n            /**\n             * Object of class BLocks\n             * @type {Object}\n             */\n            this.bundles = new Bundles(this._settings);\n\n            /**\n             * Object of class Accounts\n             * @type {Object}\n             */\n            this.accounts = new Accounts(this._settings);\n\n            /**\n             * Object of class Contracts\n             * @type {Object}\n             */\n            this.contracts = new Contracts(this._settings, this.web3);\n\n            /**\n             * Object of class Transaction\n             * @type {Object}\n             */\n            this.transactions = new Transactions(this._settings, this.service, this.web3);\n\n            /**\n             * Object of class Blocks\n             * @type {Object}\n             */\n            this.blocks = new Blocks(this._settings, this.web3);\n\n            /**\n             * Object of class Utils\n             * @type {Object}\n             */\n            this.utils = Utils;\n        } else {\n            return rejectResponse('SDK Init parameters should be an object');\n        }\n    }\n\n    /**\n     * Generate the token which is used in API request.\n     *\n     * @param {string} secret - Private Key which is used to perform the signing of token\n     * @param {number} timestamp - Validity of the token\n     * @returns {Object} Rejected Response or encoded Data\n     */\n    getApiToken(secret = null, timestamp) {\n        if (!secret && !this._settings.secret) {\n            return rejectResponse('Secret key is required generate the token');\n        }\n\n        const secretKey = secret || this._settings.secret;\n        /* istanbul ignore next */\n        const idData = {\n            createdBy: this.service.getAddress(secretKey),\n            validUntil: timestamp || Math.floor(Date.now() / 1000) + 300\n        };\n\n        /* istanbul ignore next */\n        return Utils.base64url(Utils.serializeForHashing({\n            signature: this.service.sign(idData, secretKey),\n            idData\n        }));\n    }\n}\n\nexport default AmbrosusSDK;\n"],"names":["handleResponse","request","Promise","resolve","reject","response","status","data","message","JSON","parse","reason","rejectResponse","successResponse","web3","Web3","fromWei","value","unit","utils","toWei","isAddress","address","randomHex","bytes","toHex","calculateHash","hashMessage","serializeForHashing","eth","accounts","object","subject","Array","isArray","content","Object","keys","sort","map","key","join","item","toString","fs","require","path","readFile","filepath","err","timeSince","date","Math","floor","seconds","Date","interval","error","validTimestamp","timestamp","getTime","checkAccessLevel","event","idData","accessLevel","getName","obj","alternative","name","type","split","length","find","i","e","getImage","images","default","url","getLocation","location","city","country","filter","sortEventsByTimestamp","a","b","parseEvent","info","toLowerCase","indexOf","property","push","parseAsset","asset","parseTimelineEvents","events","reduce","_events","eventId","createdBy","parts","category","ago","_event","isLatest","findEvent","eventType","_obj","checkTimeStamp","now","parseEvents","eventsArray","results","author","action","identifiers","isObject","getUrlName","serializeParams","params","encodeURIComponent","utf8Encode","string","String","fromCharCode","replace","utftext","c","n","charCodeAt","base64url","input","_keyStr","chr1","chr2","chr3","enc1","enc2","enc3","enc4","output","isNaN","charAt","tokenUtils.isAddress","tokenUtils.fromWei","tokenUtils.toWei","tokenUtils.toHex","tokenUtils.randomHex","tokenUtils.hashMessage","tokenUtils.calculateHash","tokenUtils.serializeForHashing","file.readFile","getRequest","headers","XMLHttpRequest","open","setRequestHeader","onload","then","catch","send","postRequest","stringify","EventHandler","constructor","empty","on","func","ctx","off","list","splice","emit","j","slice","apply","call","arguments","Events","settings","service","_settings","eventHandler","getAssetEvents","assetId","apiEndpoint","getEvents","createSingleEvent","console","log","createEvent","dataHash","signature","sign","secret","Assets","getAsset","getAssets","createAsset","assetSequenceNumber","sequenceNumber","assetRes","req","all","Accounts","addAccount","Bundles","getBundle","bundleId","Transactions","getBalance","userAddress","rpcURL","balance","getTransaction","transactionHash","transaction","getTransactionRecepit","getTransactionReceipt","receipt","getTransactionCount","count","sendTransaction","txObject","to","from","gas","gasPrice","account","getAccount","signedTx","signTransaction","sendSignedTransaction","rawTransaction","Service","secretKey","privateKeyToAccount","getAddress","getPkPair","create","encryptPrivateKey","token","encrypt","decryptPrivateKey","password","privateKey","decrypt","verifyEvents","verify","flag","web3DataHash","verifyObject","hash","web3CreatedBy","recover","web3EventId","verified","isRPCValid","net","isListening","Blocks","getBlock","hashOrNumber","block","getLatestBlock","getBlockNumber","number","DEFAULT_GAS","Contracts","loadContract","abi","Contract","AmbrosusSDK","Utils","extendSettings","providers","HttpProvider","getApiToken","Authorization","assign","assets","bundles","contracts","transactions","blocks","validUntil"],"mappings":"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"}