'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _kebabCase2 = require('lodash/kebabCase');

var _kebabCase3 = _interopRequireDefault(_kebabCase2);

var _pick2 = require('lodash/pick');

var _pick3 = _interopRequireDefault(_pick2);

var _isUndefined2 = require('lodash/isUndefined');

var _isUndefined3 = _interopRequireDefault(_isUndefined2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _rsuiteIntl = require('rsuite-intl');

var _OverlayTrigger = require('rsuite-utils/lib/Overlay/OverlayTrigger');

var _OverlayTrigger2 = _interopRequireDefault(_OverlayTrigger);

var _utils = require('rsuite-utils/lib/utils');

var _Picker = require('rsuite-utils/lib/Picker');

var _Calendar = require('./Calendar');

var _Calendar2 = _interopRequireDefault(_Calendar);

var _locale = require('./locale');

var _locale2 = _interopRequireDefault(_locale);

var _Toolbar = require('./Toolbar');

var _Toolbar2 = _interopRequireDefault(_Toolbar);

var _disabledTime = require('./utils/disabledTime');

var _disabledTime2 = _interopRequireDefault(_disabledTime);

var _formatUtils = require('./utils/formatUtils');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var namespace = _Picker.constants.namespace;

var DatePicker = function (_React$Component) {
  _inherits(DatePicker, _React$Component);

  function DatePicker(props) {
    _classCallCheck(this, DatePicker);

    var _this = _possibleConstructorReturn(this, (DatePicker.__proto__ || Object.getPrototypeOf(DatePicker)).call(this, props));

    _initialiseProps.call(_this);

    var defaultValue = props.defaultValue,
        value = props.value,
        calendarDefaultDate = props.calendarDefaultDate;

    var activeValue = value || defaultValue;

    _this.state = {
      value: activeValue,
      forceOpen: false,
      calendarState: undefined,
      pageDate: activeValue || calendarDefaultDate || (0, _moment2.default)() // display calendar date
    };
    return _this;
  }

  _createClass(DatePicker, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var value = this.props.value;

      if (nextProps.value && !nextProps.value.isSame(value, 'day')) {
        this.setState({
          pageDate: nextProps.value
        });
      }
    }
  }, {
    key: 'getDateString',
    value: function getDateString() {
      var _props = this.props,
          placeholder = _props.placeholder,
          format = _props.format;

      var value = this.getValue();

      return value ? value.format(this.props.format) : placeholder || format;
    }
  }, {
    key: 'updateValue',
    value: function updateValue(nextPageDate) {
      var closeOverlay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var pageDate = this.state.pageDate;
      var onChange = this.props.onChange;

      var value = this.getValue();
      var nextValue = !(0, _isUndefined3.default)(nextPageDate) ? nextPageDate : pageDate;

      this.setState({
        pageDate: nextValue || (0, _moment2.default)(),
        value: nextValue
      });

      if (nextValue !== value || !nextValue.isSame(value)) {
        onChange && onChange(nextValue ? nextValue.clone() : null);
      }

      // `closeOverlay` default value is `true`
      if (closeOverlay !== false) {
        this.close();
      }
    }
  }, {
    key: 'resetPageDate',
    value: function resetPageDate() {
      var calendarDefaultDate = this.props.calendarDefaultDate;

      var value = this.getValue();
      this.setState({
        pageDate: value || calendarDefaultDate || (0, _moment2.default)()
      });
    }
  }, {
    key: 'open',
    value: function open() {
      if (this.trigger) {
        this.trigger.show();
      }
    }
  }, {
    key: 'close',
    value: function close() {
      if (this.trigger) {
        this.trigger.hide();
      }
    }
  }, {
    key: 'showMonthDropdown',
    value: function showMonthDropdown() {
      this.setState({ calendarState: 'DROP_MONTH' });
    }
  }, {
    key: 'hideMonthDropdown',
    value: function hideMonthDropdown() {
      this.setState({ calendarState: undefined });
    }
  }, {
    key: 'showTimeDropdown',
    value: function showTimeDropdown() {
      this.setState({ calendarState: 'DROP_TIME' });
    }
  }, {
    key: 'hideTimeDropdown',
    value: function hideTimeDropdown() {
      this.setState({ calendarState: undefined });
    }
  }, {
    key: 'renderCalendar',
    value: function renderCalendar() {
      var _this2 = this;

      var _props2 = this.props,
          format = _props2.format,
          isoWeek = _props2.isoWeek,
          limitStartYear = _props2.limitStartYear,
          limitEndYear = _props2.limitEndYear,
          disabledDate = _props2.disabledDate;
      var _state = this.state,
          calendarState = _state.calendarState,
          pageDate = _state.pageDate;


      var calendarProps = (0, _pick3.default)(this.props, _disabledTime.calendarOnlyProps);

      return React.createElement(_Calendar2.default, _extends({}, calendarProps, {
        disabledDate: disabledDate,
        limitStartYear: limitStartYear,
        limitEndYear: limitEndYear,
        format: format,
        isoWeek: isoWeek,
        calendarState: calendarState,
        pageDate: pageDate,
        onMoveForword: this.onMoveForword,
        onMoveBackward: this.onMoveBackward,
        onSelect: this.handleSelect,
        onToggleMonthDropdown: this.toggleMonthDropdown,
        onToggleTimeDropdown: this.toggleTimeDropdown,
        onChangePageDate: this.handleChangePageDate,
        onChangePageTime: this.handleChangePageTime,
        calendarRef: function calendarRef(ref) {
          _this2.calendar = ref;
        }
      }));
    }
  }, {
    key: 'renderDropdownMenu',
    value: function renderDropdownMenu(calendar) {
      var _this3 = this;

      var _props3 = this.props,
          placement = _props3.placement,
          ranges = _props3.ranges,
          menuClassName = _props3.menuClassName;
      var pageDate = this.state.pageDate;

      var classes = (0, _classnames2.default)(this.addPrefix('menu'), menuClassName, namespace + '-placement-' + (0, _kebabCase3.default)(placement));
      return React.createElement(
        _Picker.MenuWrapper,
        { className: classes },
        React.createElement(
          'div',
          {
            ref: function ref(_ref) {
              // for test
              _this3.menuContainer = _ref;
            }
          },
          calendar,
          React.createElement(_Toolbar2.default, {
            ranges: ranges,
            pageDate: pageDate,
            disabledHandle: this.disabledToolbarHandle,
            onShortcut: this.handleShortcutPageDate,
            onOk: this.handleOK
          })
        )
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _classNames,
          _this4 = this;

      var _props4 = this.props,
          inline = _props4.inline,
          className = _props4.className,
          disabled = _props4.disabled,
          ranges = _props4.ranges,
          cleanable = _props4.cleanable,
          open = _props4.open,
          defaultOpen = _props4.defaultOpen,
          placement = _props4.placement,
          classPrefix = _props4.classPrefix,
          format = _props4.format,
          locale = _props4.locale,
          toggleComponentClass = _props4.toggleComponentClass,
          block = _props4.block,
          style = _props4.style,
          container = _props4.container,
          containerPadding = _props4.containerPadding,
          onEnter = _props4.onEnter,
          onEntering = _props4.onEntering,
          onEntered = _props4.onEntered,
          onExit = _props4.onExit,
          onExiting = _props4.onExiting,
          onExited = _props4.onExited,
          rest = _objectWithoutProperties(_props4, ['inline', 'className', 'disabled', 'ranges', 'cleanable', 'open', 'defaultOpen', 'placement', 'classPrefix', 'format', 'locale', 'toggleComponentClass', 'block', 'style', 'container', 'containerPadding', 'onEnter', 'onEntering', 'onEntered', 'onExit', 'onExiting', 'onExited']);

      var value = this.getValue();
      var unhandled = (0, _utils.getUnhandledProps)(DatePicker, rest);
      var hasValue = !!value;
      var calendar = this.renderCalendar();

      if (inline) {
        return React.createElement(
          _rsuiteIntl.IntlProvider,
          { locale: locale },
          React.createElement(
            'div',
            { className: (0, _classnames2.default)(classPrefix, this.addPrefix('inline'), className) },
            calendar
          )
        );
      }

      var classes = (0, _classnames2.default)(classPrefix, className, namespace + '-placement-' + (0, _kebabCase3.default)(placement), (_classNames = {}, _defineProperty(_classNames, this.addPrefix('block'), block), _defineProperty(_classNames, this.addPrefix('has-value'), hasValue), _defineProperty(_classNames, this.addPrefix('disabled'), disabled), _defineProperty(_classNames, this.addPrefix('only-time'), (0, _formatUtils.shouldOnlyTime)(format)), _classNames));

      return React.createElement(
        _rsuiteIntl.IntlProvider,
        { locale: locale },
        React.createElement(
          'div',
          {
            className: classes,
            style: style,
            ref: function ref(_ref3) {
              _this4.container = _ref3;
            }
          },
          React.createElement(
            _OverlayTrigger2.default,
            {
              ref: function ref(_ref2) {
                _this4.trigger = _ref2;
              },
              open: open,
              defaultOpen: defaultOpen,
              disabled: disabled,
              trigger: 'click',
              placement: placement,
              onEnter: onEnter,
              onEntering: onEntering,
              onEntered: (0, _utils.createChainedFunction)(this.handleEntered, onEntered),
              onExit: onExit,
              onExiting: onExiting,
              onExited: (0, _utils.createChainedFunction)(this.handleExited, onExited),
              speaker: this.renderDropdownMenu(calendar),
              container: container,
              containerPadding: containerPadding
            },
            React.createElement(
              _Picker.Toggle,
              _extends({}, unhandled, {
                componentClass: toggleComponentClass,
                onClean: this.handleClean,
                cleanable: cleanable && !disabled,
                hasValue: hasValue
              }),
              this.getDateString()
            )
          )
        )
      );
    }
  }]);

  return DatePicker;
}(React.Component);

DatePicker.defaultProps = {
  classPrefix: namespace + '-date',
  placement: 'bottomLeft',
  limitStartYear: 5,
  limitEndYear: 5,
  format: 'YYYY-MM-DD',
  placeholder: '',
  locale: _locale2.default,
  cleanable: true
};
DatePicker.handledProps = ['block', 'calendarDefaultDate', 'className', 'classPrefix', 'cleanable', 'container', 'containerPadding', 'defaultOpen', 'defaultValue', 'disabled', 'disabledDate', 'disabledHours', 'disabledMinutes', 'disabledSeconds', 'format', 'hideHours', 'hideMinutes', 'hideSeconds', 'inline', 'isoWeek', 'limitEndYear', 'limitStartYear', 'locale', 'menuClassName', 'onChange', 'onChangeCalendarDate', 'onClose', 'onEnter', 'onEntered', 'onEntering', 'onExit', 'onExited', 'onExiting', 'onNextMonth', 'onOk', 'onOpen', 'onPrevMonth', 'onSelect', 'onToggleMonthDropdown', 'onToggleTimeDropdown', 'open', 'placeholder', 'placement', 'ranges', 'style', 'toggleComponentClass', 'value'];
DatePicker.propTypes = {
  disabledDate: _propTypes2.default.func,
  disabledHours: _propTypes2.default.func,
  disabledMinutes: _propTypes2.default.func,
  disabledSeconds: _propTypes2.default.func,
  hideHours: _propTypes2.default.func,
  hideMinutes: _propTypes2.default.func,
  hideSeconds: _propTypes2.default.func,
  ranges: _propTypes2.default.arrayOf(_propTypes2.default.shape({
    label: _propTypes2.default.node.isRequired,
    closeOverlay: _propTypes2.default.bool,
    value: _propTypes2.default.oneOfType([function () {
      return (typeof moment$Moment === 'function' ? _propTypes2.default.instanceOf(moment$Moment) : _propTypes2.default.any).apply(this, arguments);
    }, _propTypes2.default.func]).isRequired
  })),
  defaultValue: function defaultValue() {
    return (typeof moment$Moment === 'function' ? _propTypes2.default.instanceOf(moment$Moment) : _propTypes2.default.any).apply(this, arguments);
  },
  value: function value() {
    return (typeof moment$Moment === 'function' ? _propTypes2.default.instanceOf(moment$Moment) : _propTypes2.default.any).apply(this, arguments);
  },
  calendarDefaultDate: function calendarDefaultDate() {
    return (typeof moment$Moment === 'function' ? _propTypes2.default.instanceOf(moment$Moment) : _propTypes2.default.any).apply(this, arguments);
  },
  placeholder: _propTypes2.default.string,
  format: _propTypes2.default.string.isRequired,
  disabled: _propTypes2.default.bool,
  locale: _propTypes2.default.object,
  inline: _propTypes2.default.bool,
  onChange: _propTypes2.default.func,
  onChangeCalendarDate: _propTypes2.default.func,
  onToggleMonthDropdown: _propTypes2.default.func,
  onToggleTimeDropdown: _propTypes2.default.func,
  onSelect: _propTypes2.default.func,
  onPrevMonth: _propTypes2.default.func,
  onNextMonth: _propTypes2.default.func,
  onOk: _propTypes2.default.func,
  onEnter: _propTypes2.default.func,
  onEntering: _propTypes2.default.func,
  onEntered: _propTypes2.default.func,
  onExit: _propTypes2.default.func,
  onExiting: _propTypes2.default.func,
  onExited: _propTypes2.default.func,
  cleanable: _propTypes2.default.bool,
  isoWeek: _propTypes2.default.bool,
  limitStartYear: _propTypes2.default.number,
  limitEndYear: _propTypes2.default.number,
  className: _propTypes2.default.string,
  menuClassName: _propTypes2.default.string,
  classPrefix: _propTypes2.default.string,
  container: _propTypes2.default.oneOfType([function () {
    return (typeof HTMLElement === 'function' ? _propTypes2.default.instanceOf(HTMLElement) : _propTypes2.default.any).apply(this, arguments);
  }, _propTypes2.default.func]),
  containerPadding: _propTypes2.default.number,
  block: _propTypes2.default.bool,
  toggleComponentClass: function toggleComponentClass() {
    return (typeof (React.ElementType == null ? {} : React.ElementType) === 'function' ? _propTypes2.default.instanceOf(React.ElementType == null ? {} : React.ElementType) : _propTypes2.default.any).apply(this, arguments);
  },
  open: _propTypes2.default.bool,
  defaultOpen: _propTypes2.default.bool,
  placement: _propTypes2.default.oneOf(['bottomLeft', 'bottomRight', 'topLeft', 'topRight', 'leftTop', 'rightTop', 'leftBottom', 'rightBottom', 'auto', 'autoVerticalLeft', 'autoVerticalRight', 'autoHorizontalTop', 'autoHorizontalBottom']),
  onOpen: _propTypes2.default.func,
  onClose: _propTypes2.default.func,
  style: _propTypes2.default.object
};

var _initialiseProps = function _initialiseProps() {
  var _this5 = this;

  this.onMoveForword = function (nextPageDate) {
    var _props5 = _this5.props,
        onNextMonth = _props5.onNextMonth,
        onChangeCalendarDate = _props5.onChangeCalendarDate;

    _this5.setState({
      pageDate: nextPageDate
    });
    onNextMonth && onNextMonth(nextPageDate);
    onChangeCalendarDate && onChangeCalendarDate(nextPageDate);
  };

  this.onMoveBackward = function (nextPageDate) {
    var _props6 = _this5.props,
        onPrevMonth = _props6.onPrevMonth,
        onChangeCalendarDate = _props6.onChangeCalendarDate;

    _this5.setState({
      pageDate: nextPageDate
    });
    onPrevMonth && onPrevMonth(nextPageDate);
    onChangeCalendarDate && onChangeCalendarDate(nextPageDate);
  };

  this.getValue = function () {
    var value = _this5.props.value || _this5.state.value;
    return value ? value.clone() : null;
  };

  this.calendar = null;

  this.handleChangePageDate = function (nextPageDate) {
    _this5.setState({
      pageDate: nextPageDate,
      calendarState: undefined
    });
    _this5.handleAllSelect(nextPageDate);
  };

  this.handleChangePageTime = function (nextPageTime) {
    _this5.setState({
      pageDate: nextPageTime
    });
    _this5.handleAllSelect(nextPageTime);
  };

  this.handleShortcutPageDate = function (value, closeOverlay, event) {
    _this5.updateValue(value, closeOverlay);
    _this5.handleAllSelect(value, event);
  };

  this.handleOK = function (event) {
    var onOk = _this5.props.onOk;

    _this5.updateValue();
    onOk && onOk(_this5.state.pageDate, event);
  };

  this.toggleMonthDropdown = function () {
    var calendarState = _this5.state.calendarState;
    var onToggleMonthDropdown = _this5.props.onToggleMonthDropdown;

    var toggle = void 0;

    if (calendarState === 'DROP_MONTH') {
      _this5.hideMonthDropdown();
      toggle = false;
    } else {
      _this5.showMonthDropdown();
      toggle = true;
    }
    onToggleMonthDropdown && onToggleMonthDropdown(toggle);
  };

  this.toggleTimeDropdown = function () {
    var calendarState = _this5.state.calendarState;
    var onToggleTimeDropdown = _this5.props.onToggleTimeDropdown;

    var toggle = void 0;
    if (calendarState === 'DROP_TIME') {
      _this5.hideTimeDropdown();
      toggle = false;
    } else {
      _this5.showTimeDropdown();
      toggle = true;
    }

    onToggleTimeDropdown && onToggleTimeDropdown(toggle);
  };

  this.handleClean = function () {
    _this5.setState({ pageDate: (0, _moment2.default)() });
    _this5.updateValue(null);
  };

  this.handleAllSelect = function (nextValue, event) {
    var _props7 = _this5.props,
        onSelect = _props7.onSelect,
        onChangeCalendarDate = _props7.onChangeCalendarDate;

    onSelect && onSelect(nextValue, event);
    onChangeCalendarDate && onChangeCalendarDate(nextValue, event);
  };

  this.handleSelect = function (nextValue) {
    var pageDate = _this5.state.pageDate;

    nextValue.hours(pageDate.hours()).minutes(pageDate.minutes()).seconds(pageDate.seconds());

    _this5.setState({
      pageDate: nextValue
    });

    _this5.handleAllSelect(nextValue);
  };

  this.handleEntered = function () {
    var onOpen = _this5.props.onOpen;

    onOpen && onOpen();
  };

  this.handleExited = function () {
    var onClose = _this5.props.onClose;

    onClose && onClose();
  };

  this.disabledToolbarHandle = function (date) {
    var disabledDate = _this5.props.disabledDate;

    var allowDate = disabledDate ? disabledDate(date) : false;
    var allowTime = (0, _disabledTime2.default)(_this5.props, date);

    return allowDate || allowTime;
  };

  this.calendar = null;
  this.container = null;
  this.trigger = null;
  this.menuContainer = null;

  this.addPrefix = function (name) {
    return (0, _utils.prefix)(_this5.props.classPrefix)(name);
  };
};

exports.default = DatePicker;