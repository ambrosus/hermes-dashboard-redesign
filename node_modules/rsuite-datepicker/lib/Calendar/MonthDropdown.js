'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _domLib = require('dom-lib');

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _Picker = require('rsuite-utils/lib/Picker');

var _utils = require('rsuite-utils/lib/utils');

var _MonthDropdownItem = require('./MonthDropdownItem');

var _MonthDropdownItem2 = _interopRequireDefault(_MonthDropdownItem);

var _scrollTopAnimation = require('../utils/scrollTopAnimation');

var _scrollTopAnimation2 = _interopRequireDefault(_scrollTopAnimation);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var minYear = 1950;
var blockHeight = 84;

var MonthDropdown = function (_React$PureComponent) {
  _inherits(MonthDropdown, _React$PureComponent);

  function MonthDropdown() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, MonthDropdown);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = MonthDropdown.__proto__ || Object.getPrototypeOf(MonthDropdown)).call.apply(_ref, [this].concat(args))), _this), _this.scrollTo = function (date) {
      var year = date.year();
      var top = (year - _this.getStartYear()) * blockHeight;

      (0, _scrollTopAnimation2.default)(_this.scroll, top, (0, _domLib.scrollTop)(_this.scroll) !== 0);
    }, _this.scroll = null, _this.addPrefix = function (name) {
      return (0, _utils.prefix)(_this.props.classPrefix)(name);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(MonthDropdown, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.updatePosition();
    }
  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps) {
      return nextProps.show;
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      this.updatePosition();
    }
  }, {
    key: 'getStartYear',
    value: function getStartYear() {
      var _props = this.props,
          date = _props.date,
          _props$limitStartYear = _props.limitStartYear,
          limitStartYear = _props$limitStartYear === undefined ? 5 : _props$limitStartYear;

      var startYear = date.year() - limitStartYear;
      return Math.max(startYear, minYear);
    }
  }, {
    key: 'updatePosition',
    value: function updatePosition(props) {
      var _ref2 = props || this.props,
          date = _ref2.date;

      date && this.scrollTo(date);
    }
  }, {
    key: 'renderBlock',
    value: function renderBlock() {
      var _this2 = this;

      var _props2 = this.props,
          date = _props2.date,
          onSelect = _props2.onSelect,
          limitEndYear = _props2.limitEndYear;


      var ret = [];
      var selectedMonth = date.month();
      var selectedYear = date.year();
      var startYear = this.getStartYear();
      var nextYear = 0;

      var _loop = function _loop(i) {
        nextYear = startYear + i;

        var isSelectedYear = nextYear === selectedYear;
        var titleClasses = (0, _classnames2.default)(_this2.addPrefix('year'), _defineProperty({}, _this2.addPrefix('year-active'), isSelectedYear));

        ret.push(React.createElement(
          'div',
          { className: _this2.addPrefix('row'), key: i },
          React.createElement(
            'div',
            { className: titleClasses },
            nextYear
          ),
          React.createElement(
            'div',
            { className: _this2.addPrefix('list') },
            /* eslint-disable */
            [].concat(_toConsumableArray(Array(12))).map(function (i, month) {
              return React.createElement(_MonthDropdownItem2.default, {
                date: date,
                onSelect: onSelect,
                active: isSelectedYear && month === selectedMonth,
                key: month,
                month: month + 1,
                year: nextYear
              });
            })
          )
        ));
      };

      for (var i = 0; i < 100 && nextYear < selectedYear + limitEndYear; i += 1) {
        _loop(i);
      }

      return ret;
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var _props3 = this.props,
          classPrefix = _props3.classPrefix,
          className = _props3.className,
          rest = _objectWithoutProperties(_props3, ['classPrefix', 'className']);

      var classes = (0, _classnames2.default)(classPrefix, className);
      var unhandled = (0, _utils.getUnhandledProps)(MonthDropdown, rest);
      return React.createElement(
        'div',
        _extends({}, unhandled, { className: classes }),
        React.createElement(
          'div',
          { className: this.addPrefix('content') },
          React.createElement(
            'div',
            {
              className: this.addPrefix('scroll'),
              ref: function ref(_ref3) {
                _this3.scroll = _ref3;
              }
            },
            this.renderBlock()
          )
        )
      );
    }
  }]);

  return MonthDropdown;
}(React.PureComponent);

MonthDropdown.defaultProps = {
  classPrefix: _Picker.constants.namespace + '-calendar-month-dropdown',
  show: false,
  limitStartYear: 5,
  limitEndYear: 5,
  date: (0, _moment2.default)()
};
MonthDropdown.handledProps = ['className', 'classPrefix', 'date', 'limitEndYear', 'limitStartYear', 'onSelect', 'show'];
MonthDropdown.propTypes = {
  onSelect: _propTypes2.default.func,
  show: _propTypes2.default.bool.isRequired,
  date: function date() {
    return (typeof moment$Moment === 'function' ? _propTypes2.default.instanceOf(moment$Moment).isRequired : _propTypes2.default.any.isRequired).apply(this, arguments);
  },
  limitStartYear: _propTypes2.default.number,
  limitEndYear: _propTypes2.default.number,
  className: _propTypes2.default.string,
  classPrefix: _propTypes2.default.string
};
exports.default = MonthDropdown;