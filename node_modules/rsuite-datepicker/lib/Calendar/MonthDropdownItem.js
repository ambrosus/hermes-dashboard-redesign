'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _Picker = require('rsuite-utils/lib/Picker');

var _utils = require('rsuite-utils/lib/utils');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MonthDropdownItem = function (_React$PureComponent) {
  _inherits(MonthDropdownItem, _React$PureComponent);

  function MonthDropdownItem() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, MonthDropdownItem);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = MonthDropdownItem.__proto__ || Object.getPrototypeOf(MonthDropdownItem)).call.apply(_ref, [this].concat(args))), _this), _this.handleClick = function (event) {
      var _this$props = _this.props,
          onSelect = _this$props.onSelect,
          month = _this$props.month,
          year = _this$props.year,
          date = _this$props.date;

      if (year && month && date) {
        var nextMonth = (0, _moment2.default)(date).year(year).month(month - 1);
        onSelect && onSelect(nextMonth, event);
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(MonthDropdownItem, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          className = _props.className,
          classPrefix = _props.classPrefix,
          month = _props.month,
          active = _props.active,
          rest = _objectWithoutProperties(_props, ['className', 'classPrefix', 'month', 'active']);

      var addPrefix = (0, _utils.prefix)(classPrefix);
      var unhandled = (0, _utils.getUnhandledProps)(MonthDropdownItem, rest);
      var classes = (0, _classnames2.default)(classPrefix, className, _defineProperty({}, addPrefix('active'), active));

      return React.createElement(
        'div',
        _extends({}, unhandled, {
          className: classes,
          onClick: this.handleClick,
          key: month,
          role: 'button',
          tabIndex: '-1'
        }),
        React.createElement(
          'span',
          { className: addPrefix('content') },
          month
        )
      );
    }
  }]);

  return MonthDropdownItem;
}(React.PureComponent);

MonthDropdownItem.defaultProps = {
  classPrefix: _Picker.constants.namespace + '-calendar-month-dropdown-cell',
  month: 0
};
MonthDropdownItem.handledProps = ['active', 'className', 'classPrefix', 'date', 'month', 'onSelect', 'year'];
MonthDropdownItem.propTypes = {
  date: function date() {
    return (typeof moment$Moment === 'function' ? _propTypes2.default.instanceOf(moment$Moment) : _propTypes2.default.any).apply(this, arguments);
  },
  month: _propTypes2.default.number,
  year: _propTypes2.default.number,
  active: _propTypes2.default.bool,
  onSelect: _propTypes2.default.func,
  className: _propTypes2.default.string,
  classPrefix: _propTypes2.default.string
};
exports.default = MonthDropdownItem;