'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _Picker = require('rsuite-utils/lib/Picker');

var _utils = require('rsuite-utils/lib/utils');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Header = function (_React$PureComponent) {
  _inherits(Header, _React$PureComponent);

  function Header() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Header);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Header.__proto__ || Object.getPrototypeOf(Header)).call.apply(_ref, [this].concat(args))), _this), _this.addPrefix = function (name) {
      return (0, _utils.prefix)(_this.props.classPrefix)(name);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Header, [{
    key: 'getTimeFormat',
    value: function getTimeFormat() {
      var format = this.props.format;

      var timeFormat = [];

      if (!format) {
        return '';
      }

      if (/(H|h)/.test(format)) {
        timeFormat.push('HH');
      }
      if (/m/.test(format)) {
        timeFormat.push('mm');
      }
      if (/s/.test(format)) {
        timeFormat.push('ss');
      }

      return timeFormat.join(':');
    }
  }, {
    key: 'getDateFormat',
    value: function getDateFormat() {
      var _props = this.props,
          showDate = _props.showDate,
          showMonth = _props.showMonth;


      if (showDate) {
        return 'YYYY-MM-DD';
      } else if (showMonth) {
        return 'YYYY-MM';
      }

      return 'YYYY';
    }
  }, {
    key: 'render',
    value: function render() {
      var _classNames3;

      var _props2 = this.props,
          date = _props2.date,
          onMoveForword = _props2.onMoveForword,
          onMoveBackward = _props2.onMoveBackward,
          onToggleMonthDropdown = _props2.onToggleMonthDropdown,
          onToggleTimeDropdown = _props2.onToggleTimeDropdown,
          showTime = _props2.showTime,
          showDate = _props2.showDate,
          showMonth = _props2.showMonth,
          classPrefix = _props2.classPrefix,
          className = _props2.className,
          disabledDate = _props2.disabledDate,
          disabledTime = _props2.disabledTime,
          rest = _objectWithoutProperties(_props2, ['date', 'onMoveForword', 'onMoveBackward', 'onToggleMonthDropdown', 'onToggleTimeDropdown', 'showTime', 'showDate', 'showMonth', 'classPrefix', 'className', 'disabledDate', 'disabledTime']);

      var dateTitleClasses = (0, _classnames2.default)(this.addPrefix('title'), _defineProperty({}, this.addPrefix('error'), disabledDate && disabledDate(date)), this.addPrefix('title-date'));

      var timeTitleClasses = (0, _classnames2.default)(this.addPrefix('title'), _defineProperty({}, this.addPrefix('error'), disabledTime && disabledTime(date)), this.addPrefix('title-time'));

      var monthToolbar = React.createElement(
        'div',
        { className: this.addPrefix('month-toolbar') },
        React.createElement('i', {
          className: this.addPrefix('backward'),
          role: 'button',
          tabIndex: '-1',
          onClick: onMoveBackward
        }),
        React.createElement(
          'span',
          {
            role: 'button',
            tabIndex: '-1',
            className: dateTitleClasses,
            onClick: onToggleMonthDropdown
          },
          date && date.format(this.getDateFormat())
        ),
        React.createElement('i', {
          className: this.addPrefix('forward'),
          role: 'button',
          tabIndex: '-1',
          onClick: onMoveForword
        })
      );

      var hasMonth = showDate || showMonth;
      var classes = (0, _classnames2.default)(classPrefix, (_classNames3 = {}, _defineProperty(_classNames3, this.addPrefix('has-month'), hasMonth), _defineProperty(_classNames3, this.addPrefix('has-time'), showTime), _classNames3), className);
      var unhandled = (0, _utils.getUnhandledProps)(Header, rest);

      return React.createElement(
        'div',
        _extends({}, unhandled, { className: classes }),
        hasMonth && monthToolbar,
        showTime && React.createElement(
          'div',
          { className: this.addPrefix('time-toolbar') },
          React.createElement(
            'span',
            {
              role: 'button',
              tabIndex: '-1',
              className: timeTitleClasses,
              onClick: onToggleTimeDropdown
            },
            date && date.format(this.getTimeFormat())
          )
        )
      );
    }
  }]);

  return Header;
}(React.PureComponent);

Header.defaultProps = {
  classPrefix: _Picker.constants.namespace + '-calendar-header',
  date: (0, _moment2.default)()
};
Header.handledProps = ['className', 'classPrefix', 'date', 'disabledDate', 'disabledTime', 'format', 'onMoveBackward', 'onMoveForword', 'onToggleMonthDropdown', 'onToggleTimeDropdown', 'showDate', 'showMonth', 'showTime'];
Header.propTypes = {
  date: function date() {
    return (typeof moment$Moment === 'function' ? _propTypes2.default.instanceOf(moment$Moment).isRequired : _propTypes2.default.any.isRequired).apply(this, arguments);
  },
  onMoveForword: _propTypes2.default.func,
  onMoveBackward: _propTypes2.default.func,
  onToggleMonthDropdown: _propTypes2.default.func,
  onToggleTimeDropdown: _propTypes2.default.func,
  showMonth: _propTypes2.default.bool,
  showDate: _propTypes2.default.bool,
  showTime: _propTypes2.default.bool,
  format: _propTypes2.default.string,
  disabledDate: _propTypes2.default.func,
  disabledTime: _propTypes2.default.func,
  classPrefix: _propTypes2.default.string,
  className: _propTypes2.default.string
};
exports.default = Header;