{"ast":null,"code":"/**\n *\n * @namespace faker.lorem\n */\nvar Lorem = function (faker) {\n  var self = this;\n  var Helpers = faker.helpers;\n  /**\n   * generates a word of a specified length\n   *\n   * @method faker.lorem.word\n   * @param {number} length length of the word that should be returned. Defaults to a random length\n   */\n\n  self.word = function (length) {\n    var hasRightLength = function (word) {\n      return word.length === length;\n    };\n\n    var properLengthWords;\n\n    if (typeof length === 'undefined') {\n      properLengthWords = faker.definitions.lorem.words;\n    } else {\n      properLengthWords = faker.definitions.lorem.words.filter(hasRightLength);\n    }\n\n    return faker.random.arrayElement(properLengthWords);\n  };\n  /**\n   * generates a space separated list of words\n   *\n   * @method faker.lorem.words\n   * @param {number} num number of words, defaults to 3\n   */\n\n\n  self.words = function (num) {\n    if (typeof num == 'undefined') {\n      num = 3;\n    }\n\n    var words = [];\n\n    for (var i = 0; i < num; i++) {\n      words.push(faker.lorem.word());\n    }\n\n    return words.join(' ');\n  };\n  /**\n   * sentence\n   *\n   * @method faker.lorem.sentence\n   * @param {number} wordCount defaults to a random number between 3 and 10\n   * @param {number} range\n   */\n\n\n  self.sentence = function (wordCount, range) {\n    if (typeof wordCount == 'undefined') {\n      wordCount = faker.datatype.number({\n        min: 3,\n        max: 10\n      });\n    } // if (typeof range == 'undefined') { range = 7; }\n    // strange issue with the node_min_test failing for captialize, please fix and add faker.lorem.back\n    //return  faker.lorem.words(wordCount + Helpers.randomNumber(range)).join(' ').capitalize();\n\n\n    var sentence = faker.lorem.words(wordCount);\n    return sentence.charAt(0).toUpperCase() + sentence.slice(1) + '.';\n  };\n  /**\n   * slug\n   *\n   * @method faker.lorem.slug\n   * @param {number} wordCount number of words, defaults to 3\n   */\n\n\n  self.slug = function (wordCount) {\n    var words = faker.lorem.words(wordCount);\n    return Helpers.slugify(words);\n  };\n  /**\n   * sentences\n   *\n   * @method faker.lorem.sentences\n   * @param {number} sentenceCount defautls to a random number between 2 and 6\n   * @param {string} separator defaults to `' '`\n   */\n\n\n  self.sentences = function (sentenceCount, separator) {\n    if (typeof sentenceCount === 'undefined') {\n      sentenceCount = faker.datatype.number({\n        min: 2,\n        max: 6\n      });\n    }\n\n    if (typeof separator == 'undefined') {\n      separator = \" \";\n    }\n\n    var sentences = [];\n\n    for (sentenceCount; sentenceCount > 0; sentenceCount--) {\n      sentences.push(faker.lorem.sentence());\n    }\n\n    return sentences.join(separator);\n  };\n  /**\n   * paragraph\n   *\n   * @method faker.lorem.paragraph\n   * @param {number} sentenceCount defaults to 3\n   */\n\n\n  self.paragraph = function (sentenceCount) {\n    if (typeof sentenceCount == 'undefined') {\n      sentenceCount = 3;\n    }\n\n    return faker.lorem.sentences(sentenceCount + faker.datatype.number(3));\n  };\n  /**\n   * paragraphs\n   *\n   * @method faker.lorem.paragraphs\n   * @param {number} paragraphCount defaults to 3\n   * @param {string} separator defaults to `'\\n \\r'`\n   */\n\n\n  self.paragraphs = function (paragraphCount, separator) {\n    if (typeof separator === \"undefined\") {\n      separator = \"\\n \\r\";\n    }\n\n    if (typeof paragraphCount == 'undefined') {\n      paragraphCount = 3;\n    }\n\n    var paragraphs = [];\n\n    for (paragraphCount; paragraphCount > 0; paragraphCount--) {\n      paragraphs.push(faker.lorem.paragraph());\n    }\n\n    return paragraphs.join(separator);\n  };\n  /**\n   * returns random text based on a random lorem method\n   *\n   * @method faker.lorem.text\n   * @param {number} times\n   */\n\n\n  self.text = function loremText(times) {\n    var loremMethods = ['lorem.word', 'lorem.words', 'lorem.sentence', 'lorem.sentences', 'lorem.paragraph', 'lorem.paragraphs', 'lorem.lines'];\n    var randomLoremMethod = faker.random.arrayElement(loremMethods);\n    return faker.fake('{{' + randomLoremMethod + '}}');\n  };\n  /**\n   * returns lines of lorem separated by `'\\n'`\n   *\n   * @method faker.lorem.lines\n   * @param {number} lineCount defaults to a random number between 1 and 5\n   */\n\n\n  self.lines = function lines(lineCount) {\n    if (typeof lineCount === 'undefined') {\n      lineCount = faker.datatype.number({\n        min: 1,\n        max: 5\n      });\n    }\n\n    return faker.lorem.sentences(lineCount, '\\n');\n  };\n\n  return self;\n};\n\nmodule[\"exports\"] = Lorem;","map":{"version":3,"sources":["/Users/melnychenkovadim/WebstormProjects/dashboard-redisgn/hermes-dashboard-redesign/node_modules/faker/lib/lorem.js"],"names":["Lorem","faker","self","Helpers","helpers","word","length","hasRightLength","properLengthWords","definitions","lorem","words","filter","random","arrayElement","num","i","push","join","sentence","wordCount","range","datatype","number","min","max","charAt","toUpperCase","slice","slug","slugify","sentences","sentenceCount","separator","paragraph","paragraphs","paragraphCount","text","loremText","times","loremMethods","randomLoremMethod","fake","lines","lineCount","module"],"mappings":"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","sourcesContent":["\n/**\n *\n * @namespace faker.lorem\n */\nvar Lorem = function (faker) {\n  var self = this;\n  var Helpers = faker.helpers;\n\n  /**\n   * generates a word of a specified length\n   *\n   * @method faker.lorem.word\n   * @param {number} length length of the word that should be returned. Defaults to a random length\n   */\n  self.word = function (length) {\n    var hasRightLength = function(word) { return word.length === length; };\n    var properLengthWords;\n    if(typeof length === 'undefined') {\n      properLengthWords = faker.definitions.lorem.words;\n    } else {\n      properLengthWords = faker.definitions.lorem.words.filter(hasRightLength);\n    }\n    return faker.random.arrayElement(properLengthWords);\n  };\n\n  /**\n   * generates a space separated list of words\n   *\n   * @method faker.lorem.words\n   * @param {number} num number of words, defaults to 3\n   */\n  self.words = function (num) {\n    if (typeof num == 'undefined') { num = 3; }\n    var words = [];\n    for (var i = 0; i < num; i++) {\n      words.push(faker.lorem.word());\n    }\n    return words.join(' ');\n  };\n\n  /**\n   * sentence\n   *\n   * @method faker.lorem.sentence\n   * @param {number} wordCount defaults to a random number between 3 and 10\n   * @param {number} range\n   */\n  self.sentence = function (wordCount, range) {\n    if (typeof wordCount == 'undefined') { wordCount = faker.datatype.number({ min: 3, max: 10 }); }\n    // if (typeof range == 'undefined') { range = 7; }\n\n    // strange issue with the node_min_test failing for captialize, please fix and add faker.lorem.back\n    //return  faker.lorem.words(wordCount + Helpers.randomNumber(range)).join(' ').capitalize();\n\n    var sentence = faker.lorem.words(wordCount);\n    return sentence.charAt(0).toUpperCase() + sentence.slice(1) + '.';\n  };\n\n  /**\n   * slug\n   *\n   * @method faker.lorem.slug\n   * @param {number} wordCount number of words, defaults to 3\n   */\n  self.slug = function (wordCount) {\n    var words = faker.lorem.words(wordCount);\n    return Helpers.slugify(words);\n  };\n\n  /**\n   * sentences\n   *\n   * @method faker.lorem.sentences\n   * @param {number} sentenceCount defautls to a random number between 2 and 6\n   * @param {string} separator defaults to `' '`\n   */\n  self.sentences = function (sentenceCount, separator) {\n    if (typeof sentenceCount === 'undefined') { sentenceCount = faker.datatype.number({ min: 2, max: 6 });}\n    if (typeof separator == 'undefined') { separator = \" \"; }\n    var sentences = [];\n    for (sentenceCount; sentenceCount > 0; sentenceCount--) {\n      sentences.push(faker.lorem.sentence());\n    }\n    return sentences.join(separator);\n  };\n\n  /**\n   * paragraph\n   *\n   * @method faker.lorem.paragraph\n   * @param {number} sentenceCount defaults to 3\n   */\n  self.paragraph = function (sentenceCount) {\n    if (typeof sentenceCount == 'undefined') { sentenceCount = 3; }\n    return faker.lorem.sentences(sentenceCount + faker.datatype.number(3));\n  };\n\n  /**\n   * paragraphs\n   *\n   * @method faker.lorem.paragraphs\n   * @param {number} paragraphCount defaults to 3\n   * @param {string} separator defaults to `'\\n \\r'`\n   */\n  self.paragraphs = function (paragraphCount, separator) {\n    if (typeof separator === \"undefined\") {\n      separator = \"\\n \\r\";\n    }\n    if (typeof paragraphCount == 'undefined') { paragraphCount = 3; }\n    var paragraphs = [];\n    for (paragraphCount; paragraphCount > 0; paragraphCount--) {\n      paragraphs.push(faker.lorem.paragraph());\n    }\n    return paragraphs.join(separator);\n  }\n\n  /**\n   * returns random text based on a random lorem method\n   *\n   * @method faker.lorem.text\n   * @param {number} times\n   */\n  self.text = function loremText (times) {\n    var loremMethods = ['lorem.word', 'lorem.words', 'lorem.sentence', 'lorem.sentences', 'lorem.paragraph', 'lorem.paragraphs', 'lorem.lines'];\n    var randomLoremMethod = faker.random.arrayElement(loremMethods);\n    return faker.fake('{{' + randomLoremMethod + '}}');\n  };\n\n  /**\n   * returns lines of lorem separated by `'\\n'`\n   *\n   * @method faker.lorem.lines\n   * @param {number} lineCount defaults to a random number between 1 and 5\n   */\n  self.lines = function lines (lineCount) {\n    if (typeof lineCount === 'undefined') { lineCount = faker.datatype.number({ min: 1, max: 5 });}\n    return faker.lorem.sentences(lineCount, '\\n')\n  };\n\n  return self;\n};\n\n\nmodule[\"exports\"] = Lorem;\n"]},"metadata":{},"sourceType":"script"}