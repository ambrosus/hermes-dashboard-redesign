{"ast":null,"code":"/*\n  fake.js - generator method for combining faker methods based on string input\n\n*/\nfunction Fake(faker) {\n  /**\n   * Generator method for combining faker methods based on string input\n   *\n   * __Example:__\n   *\n   * ```\n   * console.log(faker.fake('{{name.lastName}}, {{name.firstName}} {{name.suffix}}'));\n   * //outputs: \"Marks, Dean Sr.\"\n   * ```\n   *\n   * This will interpolate the format string with the value of methods\n   * [name.lastName]{@link faker.name.lastName}, [name.firstName]{@link faker.name.firstName},\n   * and [name.suffix]{@link faker.name.suffix}\n   *\n   * @method faker.fake\n   * @param {string} str\n   */\n  this.fake = function fake(str) {\n    // setup default response as empty string\n    var res = ''; // if incoming str parameter is not provided, return error message\n\n    if (typeof str !== 'string' || str.length === 0) {\n      throw new Error('string parameter is required!');\n    } // find first matching {{ and }}\n\n\n    var start = str.search('{{');\n    var end = str.search('}}'); // if no {{ and }} is found, we are done\n\n    if (start === -1 && end === -1) {\n      return str;\n    } // console.log('attempting to parse', str);\n    // extract method name from between the {{ }} that we found\n    // for example: {{name.firstName}}\n\n\n    var token = str.substr(start + 2, end - start - 2);\n    var method = token.replace('}}', '').replace('{{', ''); // console.log('method', method)\n    // extract method parameters\n\n    var regExp = /\\(([^)]+)\\)/;\n    var matches = regExp.exec(method);\n    var parameters = '';\n\n    if (matches) {\n      method = method.replace(regExp, '');\n      parameters = matches[1];\n    } // split the method into module and function\n\n\n    var parts = method.split('.');\n\n    if (typeof faker[parts[0]] === \"undefined\") {\n      throw new Error('Invalid module: ' + parts[0]);\n    }\n\n    if (typeof faker[parts[0]][parts[1]] === \"undefined\") {\n      throw new Error('Invalid method: ' + parts[0] + \".\" + parts[1]);\n    } // assign the function from the module.function namespace\n\n\n    var fn = faker[parts[0]][parts[1]]; // If parameters are populated here, they are always going to be of string type\n    // since we might actually be dealing with an object or array,\n    // we always attempt to the parse the incoming parameters into JSON\n\n    var params; // Note: we experience a small performance hit here due to JSON.parse try / catch\n    // If anyone actually needs to optimize this specific code path, please open a support issue on github\n\n    try {\n      params = JSON.parse(parameters);\n    } catch (err) {\n      // since JSON.parse threw an error, assume parameters was actually a string\n      params = parameters;\n    }\n\n    var result;\n\n    if (typeof params === \"string\" && params.length === 0) {\n      result = fn.call(this);\n    } else {\n      result = fn.call(this, params);\n    } // replace the found tag with the returned fake value\n\n\n    res = str.replace('{{' + token + '}}', result); // return the response recursively until we are done finding all tags\n\n    return fake(res);\n  };\n\n  return this;\n}\n\nmodule['exports'] = Fake;","map":{"version":3,"sources":["/Users/melnychenkovadim/WebstormProjects/dashboard-redisgn/hermes-dashboard-redesign/node_modules/faker/lib/fake.js"],"names":["Fake","faker","fake","str","res","length","Error","start","search","end","token","substr","method","replace","regExp","matches","exec","parameters","parts","split","fn","params","JSON","parse","err","result","call","module"],"mappings":"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","sourcesContent":["/*\n  fake.js - generator method for combining faker methods based on string input\n\n*/\n\nfunction Fake (faker) {\n  \n  /**\n   * Generator method for combining faker methods based on string input\n   *\n   * __Example:__\n   *\n   * ```\n   * console.log(faker.fake('{{name.lastName}}, {{name.firstName}} {{name.suffix}}'));\n   * //outputs: \"Marks, Dean Sr.\"\n   * ```\n   *\n   * This will interpolate the format string with the value of methods\n   * [name.lastName]{@link faker.name.lastName}, [name.firstName]{@link faker.name.firstName},\n   * and [name.suffix]{@link faker.name.suffix}\n   *\n   * @method faker.fake\n   * @param {string} str\n   */\n  this.fake = function fake (str) {\n    // setup default response as empty string\n    var res = '';\n\n    // if incoming str parameter is not provided, return error message\n    if (typeof str !== 'string' || str.length === 0) {\n      throw new Error('string parameter is required!');\n    }\n\n    // find first matching {{ and }}\n    var start = str.search('{{');\n    var end = str.search('}}');\n\n    // if no {{ and }} is found, we are done\n    if (start === -1 && end === -1) {\n      return str;\n    }\n\n    // console.log('attempting to parse', str);\n\n    // extract method name from between the {{ }} that we found\n    // for example: {{name.firstName}}\n    var token = str.substr(start + 2,  end - start - 2);\n    var method = token.replace('}}', '').replace('{{', '');\n\n    // console.log('method', method)\n\n    // extract method parameters\n    var regExp = /\\(([^)]+)\\)/;\n    var matches = regExp.exec(method);\n    var parameters = '';\n    if (matches) {\n      method = method.replace(regExp, '');\n      parameters = matches[1];\n    }\n\n    // split the method into module and function\n    var parts = method.split('.');\n\n    if (typeof faker[parts[0]] === \"undefined\") {\n      throw new Error('Invalid module: ' + parts[0]);\n    }\n\n    if (typeof faker[parts[0]][parts[1]] === \"undefined\") {\n      throw new Error('Invalid method: ' + parts[0] + \".\" + parts[1]);\n    }\n\n    // assign the function from the module.function namespace\n    var fn = faker[parts[0]][parts[1]];\n\n    // If parameters are populated here, they are always going to be of string type\n    // since we might actually be dealing with an object or array,\n    // we always attempt to the parse the incoming parameters into JSON\n    var params;\n    // Note: we experience a small performance hit here due to JSON.parse try / catch\n    // If anyone actually needs to optimize this specific code path, please open a support issue on github\n    try {\n      params = JSON.parse(parameters)\n    } catch (err) {\n      // since JSON.parse threw an error, assume parameters was actually a string\n      params = parameters;\n    }\n\n    var result;\n    if (typeof params === \"string\" && params.length === 0) {\n      result = fn.call(this);\n    } else {\n      result = fn.call(this, params);\n    }\n\n    // replace the found tag with the returned fake value\n    res = str.replace('{{' + token + '}}', result);\n\n    // return the response recursively until we are done finding all tags\n    return fake(res);    \n  }\n  \n  return this;\n  \n  \n}\n\nmodule['exports'] = Fake;"]},"metadata":{},"sourceType":"script"}