{"ast":null,"code":"export const copyToClipboard = text => {\n  if (!navigator.clipboard) {\n    fallbackCopyTextToClipboard(text);\n    return;\n  }\n\n  navigator.clipboard.writeText(text).then(() => {\n    console.log('Async: Copying to clipboard was successful!');\n  }, err => {\n    console.error('Async: Could not copy text: ', err);\n  });\n};\n\nconst fallbackCopyTextToClipboard = text => {\n  const textArea = document.createElement('textarea');\n  textArea.value = text; // Avoid scrolling to bottom\n\n  textArea.style.top = '0';\n  textArea.style.left = '0';\n  textArea.style.position = 'fixed';\n  document.body.appendChild(textArea);\n  textArea.focus();\n  textArea.select();\n\n  try {\n    const successful = document.execCommand('copy');\n    const msg = successful ? 'successful' : 'unsuccessful';\n    console.log(`Fallback: Copying text command was ${msg}`);\n  } catch (err) {\n    console.error('Fallback: Oops, unable to copy', err);\n  }\n\n  document.body.removeChild(textArea);\n};","map":{"version":3,"sources":["/Users/melnychenkovadim/WebstormProjects/dashboard-redisgn/hermes-dashboard-redesign/src/utils/copyToClipboard.js"],"names":["copyToClipboard","text","navigator","clipboard","fallbackCopyTextToClipboard","writeText","then","console","log","err","error","textArea","document","createElement","value","style","top","left","position","body","appendChild","focus","select","successful","execCommand","msg","removeChild"],"mappings":"AAAA,OAAO,MAAMA,eAAe,GAAIC,IAAD,IAAU;AACvC,MAAI,CAACC,SAAS,CAACC,SAAf,EAA0B;AACxBC,IAAAA,2BAA2B,CAACH,IAAD,CAA3B;AACA;AACD;;AACDC,EAAAA,SAAS,CAACC,SAAV,CAAoBE,SAApB,CAA8BJ,IAA9B,EAAoCK,IAApC,CACE,MAAM;AACJC,IAAAA,OAAO,CAACC,GAAR,CAAY,6CAAZ;AACD,GAHH,EAIGC,GAAD,IAAS;AACPF,IAAAA,OAAO,CAACG,KAAR,CAAc,8BAAd,EAA8CD,GAA9C;AACD,GANH;AAQD,CAbM;;AAeP,MAAML,2BAA2B,GAAIH,IAAD,IAAU;AAC5C,QAAMU,QAAQ,GAAGC,QAAQ,CAACC,aAAT,CAAuB,UAAvB,CAAjB;AACAF,EAAAA,QAAQ,CAACG,KAAT,GAAiBb,IAAjB,CAF4C,CAI5C;;AACAU,EAAAA,QAAQ,CAACI,KAAT,CAAeC,GAAf,GAAqB,GAArB;AACAL,EAAAA,QAAQ,CAACI,KAAT,CAAeE,IAAf,GAAsB,GAAtB;AACAN,EAAAA,QAAQ,CAACI,KAAT,CAAeG,QAAf,GAA0B,OAA1B;AAEAN,EAAAA,QAAQ,CAACO,IAAT,CAAcC,WAAd,CAA0BT,QAA1B;AACAA,EAAAA,QAAQ,CAACU,KAAT;AACAV,EAAAA,QAAQ,CAACW,MAAT;;AAEA,MAAI;AACF,UAAMC,UAAU,GAAGX,QAAQ,CAACY,WAAT,CAAqB,MAArB,CAAnB;AACA,UAAMC,GAAG,GAAGF,UAAU,GAAG,YAAH,GAAkB,cAAxC;AACAhB,IAAAA,OAAO,CAACC,GAAR,CAAa,sCAAqCiB,GAAI,EAAtD;AACD,GAJD,CAIE,OAAOhB,GAAP,EAAY;AACZF,IAAAA,OAAO,CAACG,KAAR,CAAc,gCAAd,EAAgDD,GAAhD;AACD;;AAEDG,EAAAA,QAAQ,CAACO,IAAT,CAAcO,WAAd,CAA0Bf,QAA1B;AACD,CAtBD","sourcesContent":["export const copyToClipboard = (text) => {\n  if (!navigator.clipboard) {\n    fallbackCopyTextToClipboard(text);\n    return;\n  }\n  navigator.clipboard.writeText(text).then(\n    () => {\n      console.log('Async: Copying to clipboard was successful!');\n    },\n    (err) => {\n      console.error('Async: Could not copy text: ', err);\n    },\n  );\n};\n\nconst fallbackCopyTextToClipboard = (text) => {\n  const textArea = document.createElement('textarea');\n  textArea.value = text;\n\n  // Avoid scrolling to bottom\n  textArea.style.top = '0';\n  textArea.style.left = '0';\n  textArea.style.position = 'fixed';\n\n  document.body.appendChild(textArea);\n  textArea.focus();\n  textArea.select();\n\n  try {\n    const successful = document.execCommand('copy');\n    const msg = successful ? 'successful' : 'unsuccessful';\n    console.log(`Fallback: Copying text command was ${msg}`);\n  } catch (err) {\n    console.error('Fallback: Oops, unable to copy', err);\n  }\n\n  document.body.removeChild(textArea);\n};\n"]},"metadata":{},"sourceType":"module"}