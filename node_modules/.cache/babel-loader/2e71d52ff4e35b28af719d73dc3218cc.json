{"ast":null,"code":"/**\n * Method to reduce array of characters\n * @param arr existing array of characters\n * @param values array of characters which should be removed\n * @return {*} new array without banned characters\n */\nvar arrayRemove = function (arr, values) {\n  values.forEach(function (value) {\n    arr = arr.filter(function (ele) {\n      return ele !== value;\n    });\n  });\n  return arr;\n};\n/**\n *\n * @namespace faker.random\n */\n\n\nfunction Random(faker, seed) {\n  // Use a user provided seed if it is an array or number\n  if (Array.isArray(seed) && seed.length) {\n    faker.mersenne.seed_array(seed);\n  } else if (!isNaN(seed)) {\n    faker.mersenne.seed(seed);\n  }\n  /**\n   * @Deprecated\n   * returns a single random number based on a max number or range\n   *\n   * @method faker.random.number\n   * @param {mixed} options {min, max, precision}\n   */\n\n\n  this.number = function (options) {\n    console.log(\"Deprecation Warning: faker.random.number is now located in faker.datatype.number\");\n    return faker.datatype.number(options);\n  };\n  /**\n   * @Deprecated\n   * returns a single random floating-point number based on a max number or range\n   *\n   * @method faker.random.float\n   * @param {mixed} options\n   */\n\n\n  this.float = function (options) {\n    console.log(\"Deprecation Warning: faker.random.float is now located in faker.datatype.float\");\n    return faker.datatype.float(options);\n  };\n  /**\n   * takes an array and returns a random element of the array\n   *\n   * @method faker.random.arrayElement\n   * @param {array} array\n   */\n\n\n  this.arrayElement = function (array) {\n    array = array || [\"a\", \"b\", \"c\"];\n    var r = faker.datatype.number({\n      max: array.length - 1\n    });\n    return array[r];\n  };\n  /**\n   * takes an array and returns a subset with random elements of the array\n   *\n   * @method faker.random.arrayElements\n   * @param {array} array\n   * @param {number} count number of elements to pick\n   */\n\n\n  this.arrayElements = function (array, count) {\n    array = array || [\"a\", \"b\", \"c\"];\n\n    if (typeof count !== 'number') {\n      count = faker.datatype.number({\n        min: 1,\n        max: array.length\n      });\n    } else if (count > array.length) {\n      count = array.length;\n    } else if (count < 0) {\n      count = 0;\n    }\n\n    var arrayCopy = array.slice(0);\n    var i = array.length;\n    var min = i - count;\n    var temp;\n    var index;\n\n    while (i-- > min) {\n      index = Math.floor((i + 1) * faker.datatype.float({\n        min: 0,\n        max: 0.99\n      }));\n      temp = arrayCopy[index];\n      arrayCopy[index] = arrayCopy[i];\n      arrayCopy[i] = temp;\n    }\n\n    return arrayCopy.slice(min);\n  };\n  /**\n   * takes an object and returns a random key or value\n   *\n   * @method faker.random.objectElement\n   * @param {object} object\n   * @param {mixed} field\n   */\n\n\n  this.objectElement = function (object, field) {\n    object = object || {\n      \"foo\": \"bar\",\n      \"too\": \"car\"\n    };\n    var array = Object.keys(object);\n    var key = faker.random.arrayElement(array);\n    return field === \"key\" ? key : object[key];\n  };\n  /**\n   * @Deprecated\n   * uuid\n   *\n   * @method faker.random.uuid\n   */\n\n\n  this.uuid = function () {\n    console.log(\"Deprecation Warning: faker.random.uuid is now located in faker.datatype.uuid\");\n    return faker.datatype.uuid();\n  };\n  /**\n   * boolean\n   *\n   * @method faker.random.boolean\n   */\n\n\n  this.boolean = function () {\n    console.log(\"Deprecation Warning: faker.random.boolean is now located in faker.datatype.boolean\");\n    return faker.datatype.boolean();\n  }; // TODO: have ability to return specific type of word? As in: noun, adjective, verb, etc\n\n  /**\n   * word\n   *\n   * @method faker.random.word\n   * @param {string} type\n   */\n\n\n  this.word = function randomWord(type) {\n    var wordMethods = ['commerce.department', 'commerce.productName', 'commerce.productAdjective', 'commerce.productMaterial', 'commerce.product', 'commerce.color', 'company.catchPhraseAdjective', 'company.catchPhraseDescriptor', 'company.catchPhraseNoun', 'company.bsAdjective', 'company.bsBuzz', 'company.bsNoun', 'address.streetSuffix', 'address.county', 'address.country', 'address.state', 'finance.accountName', 'finance.transactionType', 'finance.currencyName', 'hacker.noun', 'hacker.verb', 'hacker.adjective', 'hacker.ingverb', 'hacker.abbreviation', 'name.jobDescriptor', 'name.jobArea', 'name.jobType']; // randomly pick from the many faker methods that can generate words\n\n    var randomWordMethod = faker.random.arrayElement(wordMethods);\n    var result = faker.fake('{{' + randomWordMethod + '}}');\n    return faker.random.arrayElement(result.split(' '));\n  };\n  /**\n   * randomWords\n   *\n   * @method faker.random.words\n   * @param {number} count defaults to a random value between 1 and 3\n   */\n\n\n  this.words = function randomWords(count) {\n    var words = [];\n\n    if (typeof count === \"undefined\") {\n      count = faker.datatype.number({\n        min: 1,\n        max: 3\n      });\n    }\n\n    for (var i = 0; i < count; i++) {\n      words.push(faker.random.word());\n    }\n\n    return words.join(' ');\n  };\n  /**\n   * locale\n   *\n   * @method faker.random.image\n   */\n\n\n  this.image = function randomImage() {\n    return faker.image.image();\n  };\n  /**\n   * locale\n   *\n   * @method faker.random.locale\n   */\n\n\n  this.locale = function randomLocale() {\n    return faker.random.arrayElement(Object.keys(faker.locales));\n  };\n  /**\n   * alpha. returns lower/upper alpha characters based count and upcase options\n   *\n   * @method faker.random.alpha\n   * @param {mixed} options // defaults to { count: 1, upcase: false, bannedChars: [] }\n   */\n\n\n  this.alpha = function alpha(options) {\n    if (typeof options === \"undefined\") {\n      options = {\n        count: 1\n      };\n    } else if (typeof options === \"number\") {\n      options = {\n        count: options\n      };\n    } else if (typeof options.count === \"undefined\") {\n      options.count = 1;\n    }\n\n    if (typeof options.upcase === \"undefined\") {\n      options.upcase = false;\n    }\n\n    if (typeof options.bannedChars === \"undefined\") {\n      options.bannedChars = [];\n    }\n\n    var wholeString = \"\";\n    var charsArray = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n\n    if (options.bannedChars) {\n      charsArray = arrayRemove(charsArray, options.bannedChars);\n    }\n\n    for (var i = 0; i < options.count; i++) {\n      wholeString += faker.random.arrayElement(charsArray);\n    }\n\n    return options.upcase ? wholeString.toUpperCase() : wholeString;\n  };\n  /**\n   * alphaNumeric\n   *\n   * @method faker.random.alphaNumeric\n   * @param {number} count defaults to 1\n   * {mixed} options // defaults to { bannedChars: [] }\n   * options.bannedChars - array of characters which should be banned in new string\n   */\n\n\n  this.alphaNumeric = function alphaNumeric(count, options) {\n    if (typeof count === \"undefined\") {\n      count = 1;\n    }\n\n    if (typeof options === \"undefined\") {\n      options = {};\n    }\n\n    if (typeof options.bannedChars === \"undefined\") {\n      options.bannedChars = [];\n    }\n\n    var wholeString = \"\";\n    var charsArray = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n\n    if (options) {\n      if (options.bannedChars) {\n        charsArray = arrayRemove(charsArray, options.bannedChars);\n      }\n    }\n\n    for (var i = 0; i < count; i++) {\n      wholeString += faker.random.arrayElement(charsArray);\n    }\n\n    return wholeString;\n  };\n  /**\n   * @Deprecated\n   * hexaDecimal\n   *\n   * @method faker.random.hexaDecimal\n   * @param {number} count defaults to 1\n   */\n\n\n  this.hexaDecimal = function hexaDecimal(count) {\n    console.log(\"Deprecation Warning: faker.random.hexaDecimal is now located in faker.datatype.hexaDecimal\");\n    return faker.datatype.hexaDecimal(count);\n  };\n\n  return this;\n}\n\nmodule['exports'] = Random;","map":{"version":3,"sources":["/Users/melnychenkovadim/WebstormProjects/dashboard-redisgn/hermes-dashboard-redesign/node_modules/faker/lib/random.js"],"names":["arrayRemove","arr","values","forEach","value","filter","ele","Random","faker","seed","Array","isArray","length","mersenne","seed_array","isNaN","number","options","console","log","datatype","float","arrayElement","array","r","max","arrayElements","count","min","arrayCopy","slice","i","temp","index","Math","floor","objectElement","object","field","Object","keys","key","random","uuid","boolean","word","randomWord","type","wordMethods","randomWordMethod","result","fake","split","words","randomWords","push","join","image","randomImage","locale","randomLocale","locales","alpha","upcase","bannedChars","wholeString","charsArray","toUpperCase","alphaNumeric","hexaDecimal","module"],"mappings":"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","sourcesContent":["/**\n * Method to reduce array of characters\n * @param arr existing array of characters\n * @param values array of characters which should be removed\n * @return {*} new array without banned characters\n */\nvar arrayRemove = function (arr, values) {\n  values.forEach(function(value){\n    arr = arr.filter(function(ele){\n      return ele !== value;\n    });\n  });\n  return arr;\n};\n\n/**\n *\n * @namespace faker.random\n */\nfunction Random (faker, seed) {\n  // Use a user provided seed if it is an array or number\n  if (Array.isArray(seed) && seed.length) {\n    faker.mersenne.seed_array(seed);\n  }\n  else if(!isNaN(seed)) {\n    faker.mersenne.seed(seed);\n  }\n\n  /**\n   * @Deprecated\n   * returns a single random number based on a max number or range\n   *\n   * @method faker.random.number\n   * @param {mixed} options {min, max, precision}\n   */\n  this.number = function (options) {\n    console.log(\"Deprecation Warning: faker.random.number is now located in faker.datatype.number\");\n    return faker.datatype.number(options);\n  };\n\n  /**\n   * @Deprecated\n   * returns a single random floating-point number based on a max number or range\n   *\n   * @method faker.random.float\n   * @param {mixed} options\n   */\n  this.float = function (options) {\n    console.log(\"Deprecation Warning: faker.random.float is now located in faker.datatype.float\");\n    return faker.datatype.float(options);\n  };\n\n  /**\n   * takes an array and returns a random element of the array\n   *\n   * @method faker.random.arrayElement\n   * @param {array} array\n   */\n  this.arrayElement = function (array) {\n    array = array || [\"a\", \"b\", \"c\"];\n    var r = faker.datatype.number({ max: array.length - 1 });\n    return array[r];\n  };\n\n  /**\n   * takes an array and returns a subset with random elements of the array\n   *\n   * @method faker.random.arrayElements\n   * @param {array} array\n   * @param {number} count number of elements to pick\n   */\n  this.arrayElements = function (array, count) {\n    array = array || [\"a\", \"b\", \"c\"];\n\n    if (typeof count !== 'number') {\n      count = faker.datatype.number({ min: 1, max: array.length });\n    } else if (count > array.length) {\n      count = array.length;\n    } else if (count < 0) {\n      count = 0;\n    }\n\n    var arrayCopy = array.slice(0);\n    var i = array.length;\n    var min = i - count;\n    var temp;\n    var index;\n\n    while (i-- > min) {\n      index = Math.floor((i + 1) * faker.datatype.float({ min: 0, max: 0.99 }));\n      temp = arrayCopy[index];\n      arrayCopy[index] = arrayCopy[i];\n      arrayCopy[i] = temp;\n    }\n\n    return arrayCopy.slice(min);\n  };\n\n  /**\n   * takes an object and returns a random key or value\n   *\n   * @method faker.random.objectElement\n   * @param {object} object\n   * @param {mixed} field\n   */\n  this.objectElement = function (object, field) {\n    object = object || { \"foo\": \"bar\", \"too\": \"car\" };\n    var array = Object.keys(object);\n    var key = faker.random.arrayElement(array);\n\n    return field === \"key\" ? key : object[key];\n  };\n\n  /**\n   * @Deprecated\n   * uuid\n   *\n   * @method faker.random.uuid\n   */\n  this.uuid = function () {\n    console.log(\"Deprecation Warning: faker.random.uuid is now located in faker.datatype.uuid\");\n    return faker.datatype.uuid();\n  };\n\n  /**\n   * boolean\n   *\n   * @method faker.random.boolean\n   */\n  this.boolean = function () {\n    console.log(\"Deprecation Warning: faker.random.boolean is now located in faker.datatype.boolean\");\n    return faker.datatype.boolean();\n  };\n\n  // TODO: have ability to return specific type of word? As in: noun, adjective, verb, etc\n  /**\n   * word\n   *\n   * @method faker.random.word\n   * @param {string} type\n   */\n  this.word = function randomWord (type) {\n\n    var wordMethods = [\n      'commerce.department',\n      'commerce.productName',\n      'commerce.productAdjective',\n      'commerce.productMaterial',\n      'commerce.product',\n      'commerce.color',\n\n      'company.catchPhraseAdjective',\n      'company.catchPhraseDescriptor',\n      'company.catchPhraseNoun',\n      'company.bsAdjective',\n      'company.bsBuzz',\n      'company.bsNoun',\n      'address.streetSuffix',\n      'address.county',\n      'address.country',\n      'address.state',\n\n      'finance.accountName',\n      'finance.transactionType',\n      'finance.currencyName',\n\n      'hacker.noun',\n      'hacker.verb',\n      'hacker.adjective',\n      'hacker.ingverb',\n      'hacker.abbreviation',\n\n      'name.jobDescriptor',\n      'name.jobArea',\n      'name.jobType'];\n\n    // randomly pick from the many faker methods that can generate words\n    var randomWordMethod = faker.random.arrayElement(wordMethods);\n    var result = faker.fake('{{' + randomWordMethod + '}}');\n    return faker.random.arrayElement(result.split(' '));\n  };\n\n  /**\n   * randomWords\n   *\n   * @method faker.random.words\n   * @param {number} count defaults to a random value between 1 and 3\n   */\n  this.words = function randomWords (count) {\n    var words = [];\n    if (typeof count === \"undefined\") {\n      count = faker.datatype.number({min:1, max: 3});\n    }\n    for (var i = 0; i<count; i++) {\n      words.push(faker.random.word());\n    }\n    return words.join(' ');\n  };\n\n  /**\n   * locale\n   *\n   * @method faker.random.image\n   */\n  this.image = function randomImage () {\n    return faker.image.image();\n  };\n\n  /**\n   * locale\n   *\n   * @method faker.random.locale\n   */\n  this.locale = function randomLocale () {\n    return faker.random.arrayElement(Object.keys(faker.locales));\n  };\n\n  /**\n   * alpha. returns lower/upper alpha characters based count and upcase options\n   *\n   * @method faker.random.alpha\n   * @param {mixed} options // defaults to { count: 1, upcase: false, bannedChars: [] }\n   */\n  this.alpha = function alpha(options) {\n    if (typeof options === \"undefined\") {\n      options = {\n        count: 1\n      };\n    } else if (typeof options === \"number\") {\n      options = {\n        count: options,\n      };\n    } else if (typeof options.count === \"undefined\") {\n      options.count = 1;\n    }\n\n    if (typeof options.upcase === \"undefined\") {\n      options.upcase = false;\n    }\n    if (typeof options.bannedChars ===\"undefined\"){\n      options.bannedChars = [];\n    }\n\n    var wholeString = \"\";\n    var charsArray = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    if(options.bannedChars){\n      charsArray = arrayRemove(charsArray,options.bannedChars);\n    }\n    for(var i = 0; i < options.count; i++) {\n      wholeString += faker.random.arrayElement(charsArray);\n    }\n\n    return options.upcase ? wholeString.toUpperCase() : wholeString;\n  }\n\n  /**\n   * alphaNumeric\n   *\n   * @method faker.random.alphaNumeric\n   * @param {number} count defaults to 1\n   * {mixed} options // defaults to { bannedChars: [] }\n   * options.bannedChars - array of characters which should be banned in new string\n   */\n  this.alphaNumeric = function alphaNumeric(count, options) {\n    if (typeof count === \"undefined\") {\n      count = 1;\n    }\n    if (typeof options ===\"undefined\"){\n      options = {};\n    }\n    if (typeof options.bannedChars ===\"undefined\"){\n      options.bannedChars = [];\n    }\n\n    var wholeString = \"\";\n    var charsArray = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    if(options) {\n      if (options.bannedChars) {\n        charsArray = arrayRemove(charsArray, options.bannedChars);\n      }\n    }\n    for(var i = 0; i < count; i++) {\n      wholeString += faker.random.arrayElement(charsArray);\n    }\n\n    return wholeString;\n  };\n\n  /**\n   * @Deprecated\n   * hexaDecimal\n   *\n   * @method faker.random.hexaDecimal\n   * @param {number} count defaults to 1\n   */\n  this.hexaDecimal = function hexaDecimal(count) {\n    console.log(\"Deprecation Warning: faker.random.hexaDecimal is now located in faker.datatype.hexaDecimal\");\n    return faker.datatype.hexaDecimal(count);\n  };\n\n  return this;\n\n}\n\nmodule['exports'] = Random;\n"]},"metadata":{},"sourceType":"script"}