{"ast":null,"code":"import axios from 'axios';\nimport { SET_ASSETS_LIST_DATA, SET_ASSETS_QUERY_DATA, SET_EVENTS_DATA } from './constants';\nexport const fetchAssets = (next = '') => dispatch => {\n  const params = {\n    limit: 15,\n    next,\n    query: [{\n      field: 'organizationId',\n      operator: 'equal',\n      value: 9\n    }]\n  };\n  return new Promise((res, rej) => {\n    axios.post('https://vitalii427-hermes.ambrosus-test.io/asset2/query', params).then(({\n      data\n    }) => {\n      if (data.data) {\n        const assetsIds = data.data.map(el => el.assetId);\n        dispatch({\n          type: SET_ASSETS_QUERY_DATA,\n          payload: data\n        });\n        dispatch(fetchAssetsInfo(assetsIds));\n        res(data.data);\n      }\n    }).catch(err => rej(err));\n  });\n};\nexport const fetchAssetsInfo = assetsIds => dispatch => {\n  const params = {\n    assets: assetsIds,\n    type: 'ambrosus.asset.info'\n  };\n  axios.post('https://vitalii427-hermes.ambrosus-test.io/event2/latest/type', params).then(({\n    data\n  }) => {\n    if (data.data) {\n      dispatch({\n        type: SET_ASSETS_LIST_DATA,\n        payload: data.data\n      });\n    }\n  });\n};\nexport const fetchEventsInfo = () => dispatch => {\n  const params = {\n    next: '',\n    query: [{\n      field: 'organizationId',\n      operator: 'equal',\n      value: 9\n    }]\n  };\n  axios.post('https://vitalii427-hermes.ambrosus-test.io/event2/query', params).then(({\n    data\n  }) => {\n    if (data.data) {\n      dispatch({\n        type: SET_EVENTS_DATA,\n        payload: data.data\n      });\n    }\n  });\n};","map":{"version":3,"sources":["/Users/melnychenkovadim/WebstormProjects/dashboard-redisgn/hermes-dashboard-redesign/src/store/modules/assets/actions.js"],"names":["axios","SET_ASSETS_LIST_DATA","SET_ASSETS_QUERY_DATA","SET_EVENTS_DATA","fetchAssets","next","dispatch","params","limit","query","field","operator","value","Promise","res","rej","post","then","data","assetsIds","map","el","assetId","type","payload","fetchAssetsInfo","catch","err","assets","fetchEventsInfo"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,oBADF,EAEEC,qBAFF,EAGEC,eAHF,QAIO,aAJP;AAMA,OAAO,MAAMC,WAAW,GACtB,CAACC,IAAI,GAAG,EAAR,KACCC,QAAD,IAAc;AACZ,QAAMC,MAAM,GAAG;AACbC,IAAAA,KAAK,EAAE,EADM;AAEbH,IAAAA,IAFa;AAGbI,IAAAA,KAAK,EAAE,CACL;AACEC,MAAAA,KAAK,EAAE,gBADT;AAEEC,MAAAA,QAAQ,EAAE,OAFZ;AAGEC,MAAAA,KAAK,EAAE;AAHT,KADK;AAHM,GAAf;AAYA,SAAO,IAAIC,OAAJ,CAAY,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC/Bf,IAAAA,KAAK,CACFgB,IADH,CACQ,yDADR,EACmET,MADnE,EAEGU,IAFH,CAEQ,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAc;AAClB,UAAIA,IAAI,CAACA,IAAT,EAAe;AACb,cAAMC,SAAS,GAAGD,IAAI,CAACA,IAAL,CAAUE,GAAV,CAAeC,EAAD,IAAQA,EAAE,CAACC,OAAzB,CAAlB;AACAhB,QAAAA,QAAQ,CAAC;AACPiB,UAAAA,IAAI,EAAErB,qBADC;AAEPsB,UAAAA,OAAO,EAAEN;AAFF,SAAD,CAAR;AAIAZ,QAAAA,QAAQ,CAACmB,eAAe,CAACN,SAAD,CAAhB,CAAR;AACAL,QAAAA,GAAG,CAACI,IAAI,CAACA,IAAN,CAAH;AACD;AACF,KAZH,EAaGQ,KAbH,CAaUC,GAAD,IAASZ,GAAG,CAACY,GAAD,CAbrB;AAcD,GAfM,CAAP;AAgBD,CA/BI;AAiCP,OAAO,MAAMF,eAAe,GAAIN,SAAD,IAAgBb,QAAD,IAAc;AAC1D,QAAMC,MAAM,GAAG;AACbqB,IAAAA,MAAM,EAAET,SADK;AAEbI,IAAAA,IAAI,EAAE;AAFO,GAAf;AAKAvB,EAAAA,KAAK,CACFgB,IADH,CAEI,+DAFJ,EAGIT,MAHJ,EAKGU,IALH,CAKQ,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAc;AAClB,QAAIA,IAAI,CAACA,IAAT,EAAe;AACbZ,MAAAA,QAAQ,CAAC;AACPiB,QAAAA,IAAI,EAAEtB,oBADC;AAEPuB,QAAAA,OAAO,EAAEN,IAAI,CAACA;AAFP,OAAD,CAAR;AAID;AACF,GAZH;AAaD,CAnBM;AAqBP,OAAO,MAAMW,eAAe,GAAG,MAAOvB,QAAD,IAAc;AACjD,QAAMC,MAAM,GAAG;AACbF,IAAAA,IAAI,EAAE,EADO;AAEbI,IAAAA,KAAK,EAAE,CACL;AACEC,MAAAA,KAAK,EAAE,gBADT;AAEEC,MAAAA,QAAQ,EAAE,OAFZ;AAGEC,MAAAA,KAAK,EAAE;AAHT,KADK;AAFM,GAAf;AAWAZ,EAAAA,KAAK,CACFgB,IADH,CACQ,yDADR,EACmET,MADnE,EAEGU,IAFH,CAEQ,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAc;AAClB,QAAIA,IAAI,CAACA,IAAT,EAAe;AACbZ,MAAAA,QAAQ,CAAC;AACPiB,QAAAA,IAAI,EAAEpB,eADC;AAEPqB,QAAAA,OAAO,EAAEN,IAAI,CAACA;AAFP,OAAD,CAAR;AAID;AACF,GATH;AAUD,CAtBM","sourcesContent":["import axios from 'axios';\nimport {\n  SET_ASSETS_LIST_DATA,\n  SET_ASSETS_QUERY_DATA,\n  SET_EVENTS_DATA,\n} from './constants';\n\nexport const fetchAssets =\n  (next = '') =>\n  (dispatch) => {\n    const params = {\n      limit: 15,\n      next,\n      query: [\n        {\n          field: 'organizationId',\n          operator: 'equal',\n          value: 9,\n        },\n      ],\n    };\n\n    return new Promise((res, rej) => {\n      axios\n        .post('https://vitalii427-hermes.ambrosus-test.io/asset2/query', params)\n        .then(({ data }) => {\n          if (data.data) {\n            const assetsIds = data.data.map((el) => el.assetId);\n            dispatch({\n              type: SET_ASSETS_QUERY_DATA,\n              payload: data,\n            });\n            dispatch(fetchAssetsInfo(assetsIds));\n            res(data.data);\n          }\n        })\n        .catch((err) => rej(err));\n    });\n  };\n\nexport const fetchAssetsInfo = (assetsIds) => (dispatch) => {\n  const params = {\n    assets: assetsIds,\n    type: 'ambrosus.asset.info',\n  };\n\n  axios\n    .post(\n      'https://vitalii427-hermes.ambrosus-test.io/event2/latest/type',\n      params,\n    )\n    .then(({ data }) => {\n      if (data.data) {\n        dispatch({\n          type: SET_ASSETS_LIST_DATA,\n          payload: data.data,\n        });\n      }\n    });\n};\n\nexport const fetchEventsInfo = () => (dispatch) => {\n  const params = {\n    next: '',\n    query: [\n      {\n        field: 'organizationId',\n        operator: 'equal',\n        value: 9,\n      },\n    ],\n  };\n\n  axios\n    .post('https://vitalii427-hermes.ambrosus-test.io/event2/query', params)\n    .then(({ data }) => {\n      if (data.data) {\n        dispatch({\n          type: SET_EVENTS_DATA,\n          payload: data.data,\n        });\n      }\n    });\n};\n"]},"metadata":{},"sourceType":"module"}