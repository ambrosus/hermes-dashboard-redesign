{"ast":null,"code":"/**\r\n *\r\n * @namespace faker.datatype\r\n */\nfunction Datatype(faker, seed) {\n  // Use a user provided seed if it is an array or number\n  if (Array.isArray(seed) && seed.length) {\n    faker.mersenne.seed_array(seed);\n  } else if (!isNaN(seed)) {\n    faker.mersenne.seed(seed);\n  }\n  /**\r\n     * returns a single random number based on a max number or range\r\n     *\r\n     * @method faker.datatype.number\r\n     * @param {mixed} options {min, max, precision}\r\n     */\n\n\n  this.number = function (options) {\n    if (typeof options === \"number\") {\n      options = {\n        max: options\n      };\n    }\n\n    options = options || {};\n\n    if (typeof options.min === \"undefined\") {\n      options.min = 0;\n    }\n\n    if (typeof options.max === \"undefined\") {\n      options.max = 99999;\n    }\n\n    if (typeof options.precision === \"undefined\") {\n      options.precision = 1;\n    } // Make the range inclusive of the max value\n\n\n    var max = options.max;\n\n    if (max >= 0) {\n      max += options.precision;\n    }\n\n    var randomNumber = Math.floor(faker.mersenne.rand(max / options.precision, options.min / options.precision)); // Workaround problem in Float point arithmetics for e.g. 6681493 / 0.01\n\n    randomNumber = randomNumber / (1 / options.precision);\n    return randomNumber;\n  };\n  /**\r\n     * returns a single random floating-point number based on a max number or range\r\n     *\r\n     * @method faker.datatype.float\r\n     * @param {mixed} options\r\n     */\n\n\n  this.float = function (options) {\n    if (typeof options === \"number\") {\n      options = {\n        precision: options\n      };\n    }\n\n    options = options || {};\n    var opts = {};\n\n    for (var p in options) {\n      opts[p] = options[p];\n    }\n\n    if (typeof opts.precision === 'undefined') {\n      opts.precision = 0.01;\n    }\n\n    return faker.datatype.number(opts);\n  };\n  /**\r\n     * method returns a Date object using a random number of milliseconds since 1. Jan 1970 UTC\r\n     * Caveat: seeding is not working\r\n     *\r\n     * @method faker.datatype.datetime\r\n     * @param {mixed} options, pass min OR max as number of milliseconds since 1. Jan 1970 UTC\r\n     */\n\n\n  this.datetime = function (options) {\n    if (typeof options === \"number\") {\n      options = {\n        max: options\n      };\n    }\n\n    var minMax = 8640000000000000;\n    options = options || {};\n\n    if (typeof options.min === \"undefined\" || options.min < minMax * -1) {\n      options.min = new Date().setFullYear(1990, 1, 1);\n    }\n\n    if (typeof options.max === \"undefined\" || options.max > minMax) {\n      options.max = new Date().setFullYear(2100, 1, 1);\n    }\n\n    var random = faker.datatype.number(options);\n    return new Date(random);\n  };\n  /**\r\n     * Returns a string, containing UTF-16 chars between 33 and 125 ('!' to '}')\r\n     *\r\n     *\r\n     * @method faker.datatype.string\r\n     * @param { number } length: length of generated string, default = 10, max length = 2^20\r\n     */\n\n\n  this.string = function (length) {\n    if (length === undefined) {\n      length = 10;\n    }\n\n    var maxLength = Math.pow(2, 20);\n\n    if (length >= maxLength) {\n      length = maxLength;\n    }\n\n    var charCodeOption = {\n      min: 33,\n      max: 125\n    };\n    var returnString = '';\n\n    for (var i = 0; i < length; i++) {\n      returnString += String.fromCharCode(faker.datatype.number(charCodeOption));\n    }\n\n    return returnString;\n  };\n  /**\r\n     * uuid\r\n     *\r\n     * @method faker.datatype.uuid\r\n     */\n\n\n  this.uuid = function () {\n    var RFC4122_TEMPLATE = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';\n\n    var replacePlaceholders = function (placeholder) {\n      var random = faker.datatype.number({\n        min: 0,\n        max: 15\n      });\n      var value = placeholder == 'x' ? random : random & 0x3 | 0x8;\n      return value.toString(16);\n    };\n\n    return RFC4122_TEMPLATE.replace(/[xy]/g, replacePlaceholders);\n  };\n  /**\r\n     * boolean\r\n     *\r\n     * @method faker.datatype.boolean\r\n     */\n\n\n  this.boolean = function () {\n    return !!faker.datatype.number(1);\n  };\n  /**\r\n     * hexaDecimal\r\n     *\r\n     * @method faker.datatype.hexaDecimal\r\n     * @param {number} count defaults to 1\r\n     */\n\n\n  this.hexaDecimal = function hexaDecimal(count) {\n    if (typeof count === \"undefined\") {\n      count = 1;\n    }\n\n    var wholeString = \"\";\n\n    for (var i = 0; i < count; i++) {\n      wholeString += faker.random.arrayElement([\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]);\n    }\n\n    return \"0x\" + wholeString;\n  };\n  /**\r\n     * returns json object with 7 pre-defined properties\r\n     *\r\n     * @method faker.datatype.json\r\n     */\n\n\n  this.json = function json() {\n    var properties = ['foo', 'bar', 'bike', 'a', 'b', 'name', 'prop'];\n    var returnObject = {};\n    properties.forEach(function (prop) {\n      returnObject[prop] = faker.datatype.boolean() ? faker.datatype.string() : faker.datatype.number();\n    });\n    return JSON.stringify(returnObject);\n  };\n  /**\r\n     * returns an array with values generated by faker.datatype.number and faker.datatype.string\r\n     *\r\n     * @method faker.datatype.array\r\n     * @param { number } length of the returned array\r\n     */\n\n\n  this.array = function array(length) {\n    if (length === undefined) {\n      length = 10;\n    }\n\n    var returnArray = new Array(length);\n\n    for (var i = 0; i < length; i++) {\n      returnArray[i] = faker.datatype.boolean() ? faker.datatype.string() : faker.datatype.number();\n    }\n\n    return returnArray;\n  };\n\n  return this;\n}\n\nmodule['exports'] = Datatype;","map":{"version":3,"sources":["/Users/melnychenkovadim/WebstormProjects/dashboard-redisgn/hermes-dashboard-redesign/node_modules/faker/lib/datatype.js"],"names":["Datatype","faker","seed","Array","isArray","length","mersenne","seed_array","isNaN","number","options","max","min","precision","randomNumber","Math","floor","rand","float","opts","p","datatype","datetime","minMax","Date","setFullYear","random","string","undefined","maxLength","pow","charCodeOption","returnString","i","String","fromCharCode","uuid","RFC4122_TEMPLATE","replacePlaceholders","placeholder","value","toString","replace","boolean","hexaDecimal","count","wholeString","arrayElement","json","properties","returnObject","forEach","prop","JSON","stringify","array","returnArray","module"],"mappings":"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","sourcesContent":["/**\r\n *\r\n * @namespace faker.datatype\r\n */\r\nfunction Datatype (faker, seed) {\r\n  // Use a user provided seed if it is an array or number\r\n  if (Array.isArray(seed) && seed.length) {\r\n    faker.mersenne.seed_array(seed);\r\n  }\r\n  else if(!isNaN(seed)) {\r\n    faker.mersenne.seed(seed);\r\n  }\r\n\r\n  /**\r\n     * returns a single random number based on a max number or range\r\n     *\r\n     * @method faker.datatype.number\r\n     * @param {mixed} options {min, max, precision}\r\n     */\r\n  this.number = function (options) {\r\n\r\n    if (typeof options === \"number\") {\r\n      options = {\r\n        max: options\r\n      };\r\n    }\r\n\r\n    options = options || {};\r\n\r\n    if (typeof options.min === \"undefined\") {\r\n      options.min = 0;\r\n    }\r\n\r\n    if (typeof options.max === \"undefined\") {\r\n      options.max = 99999;\r\n    }\r\n    if (typeof options.precision === \"undefined\") {\r\n      options.precision = 1;\r\n    }\r\n\r\n    // Make the range inclusive of the max value\r\n    var max = options.max;\r\n    if (max >= 0) {\r\n      max += options.precision;\r\n    }\r\n\r\n    var randomNumber = Math.floor(\r\n      faker.mersenne.rand(max / options.precision, options.min / options.precision));\r\n    // Workaround problem in Float point arithmetics for e.g. 6681493 / 0.01\r\n    randomNumber = randomNumber / (1 / options.precision);\r\n\r\n    return randomNumber;\r\n\r\n  };\r\n\r\n  /**\r\n     * returns a single random floating-point number based on a max number or range\r\n     *\r\n     * @method faker.datatype.float\r\n     * @param {mixed} options\r\n     */\r\n  this.float = function (options) {\r\n    if (typeof options === \"number\") {\r\n      options = {\r\n        precision: options\r\n      };\r\n    }\r\n    options = options || {};\r\n    var opts = {};\r\n    for (var p in options) {\r\n      opts[p] = options[p];\r\n    }\r\n    if (typeof opts.precision === 'undefined') {\r\n      opts.precision = 0.01;\r\n    }\r\n    return faker.datatype.number(opts);\r\n  };\r\n\r\n  /**\r\n     * method returns a Date object using a random number of milliseconds since 1. Jan 1970 UTC\r\n     * Caveat: seeding is not working\r\n     *\r\n     * @method faker.datatype.datetime\r\n     * @param {mixed} options, pass min OR max as number of milliseconds since 1. Jan 1970 UTC\r\n     */\r\n  this.datetime = function (options) {\r\n    if (typeof options === \"number\") {\r\n      options = {\r\n        max: options\r\n      };\r\n    }\r\n\r\n    var minMax = 8640000000000000;\r\n\r\n    options = options || {};\r\n\r\n    if (typeof options.min === \"undefined\" || options.min < minMax*-1) {\r\n      options.min = new Date().setFullYear(1990, 1, 1);\r\n    }\r\n\r\n    if (typeof options.max === \"undefined\" || options.max > minMax) {\r\n      options.max = new Date().setFullYear(2100,1,1);\r\n    }\r\n\r\n    var random = faker.datatype.number(options);\r\n    return new Date(random);\r\n  };\r\n\r\n  /**\r\n     * Returns a string, containing UTF-16 chars between 33 and 125 ('!' to '}')\r\n     *\r\n     *\r\n     * @method faker.datatype.string\r\n     * @param { number } length: length of generated string, default = 10, max length = 2^20\r\n     */\r\n  this.string = function (length) {\r\n    if(length === undefined ){\r\n      length = 10;\r\n    }\r\n\r\n    var maxLength = Math.pow(2, 20);\r\n    if(length >= (maxLength)){\r\n      length = maxLength;\r\n    }\r\n\r\n    var charCodeOption = {\r\n      min: 33,\r\n      max: 125\r\n    };\r\n\r\n    var returnString = '';\r\n\r\n    for(var i = 0; i < length; i++){\r\n      returnString += String.fromCharCode(faker.datatype.number(charCodeOption));\r\n    }\r\n    return returnString;\r\n  };\r\n\r\n  /**\r\n     * uuid\r\n     *\r\n     * @method faker.datatype.uuid\r\n     */\r\n  this.uuid = function () {\r\n    var RFC4122_TEMPLATE = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';\r\n    var replacePlaceholders = function (placeholder) {\r\n      var random = faker.datatype.number({ min: 0, max: 15 });\r\n      var value = placeholder == 'x' ? random : (random &0x3 | 0x8);\r\n      return value.toString(16);\r\n    };\r\n    return RFC4122_TEMPLATE.replace(/[xy]/g, replacePlaceholders);\r\n  };\r\n\r\n  /**\r\n     * boolean\r\n     *\r\n     * @method faker.datatype.boolean\r\n     */\r\n  this.boolean = function () {\r\n    return !!faker.datatype.number(1);\r\n  };\r\n\r\n\r\n  /**\r\n     * hexaDecimal\r\n     *\r\n     * @method faker.datatype.hexaDecimal\r\n     * @param {number} count defaults to 1\r\n     */\r\n  this.hexaDecimal = function hexaDecimal(count) {\r\n    if (typeof count === \"undefined\") {\r\n      count = 1;\r\n    }\r\n\r\n    var wholeString = \"\";\r\n    for(var i = 0; i < count; i++) {\r\n      wholeString += faker.random.arrayElement([\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]);\r\n    }\r\n\r\n    return \"0x\"+wholeString;\r\n  };\r\n\r\n  /**\r\n     * returns json object with 7 pre-defined properties\r\n     *\r\n     * @method faker.datatype.json\r\n     */\r\n  this.json = function json() {\r\n\r\n    var properties = ['foo', 'bar', 'bike', 'a', 'b', 'name', 'prop'];\r\n\r\n    var returnObject = {};\r\n    properties.forEach(function(prop){\r\n      returnObject[prop] = faker.datatype.boolean() ?\r\n        faker.datatype.string() : faker.datatype.number();\r\n    });\r\n\r\n    return JSON.stringify(returnObject);\r\n  };\r\n\r\n  /**\r\n     * returns an array with values generated by faker.datatype.number and faker.datatype.string\r\n     *\r\n     * @method faker.datatype.array\r\n     * @param { number } length of the returned array\r\n     */\r\n\r\n  this.array = function array(length) {\r\n\r\n\r\n    if(length === undefined){\r\n      length = 10;\r\n    }\r\n    var returnArray = new Array(length);\r\n    for(var i = 0; i < length; i++){\r\n      returnArray[i] = faker.datatype.boolean() ?\r\n        faker.datatype.string() : faker.datatype.number();\r\n    }\r\n    return returnArray;\r\n\r\n  };\r\n\r\n  return this;\r\n}\r\n\r\nmodule['exports'] = Datatype;\r\n"]},"metadata":{},"sourceType":"script"}