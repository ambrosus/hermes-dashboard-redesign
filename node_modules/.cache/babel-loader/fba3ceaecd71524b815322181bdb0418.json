{"ast":null,"code":"/**\n *\n * @namespace faker.vehicle\n */\nvar Vehicle = function (faker) {\n  var self = this;\n  var fake = faker.fake;\n  /**\n   * vehicle\n   *\n   * @method faker.vehicle.vehicle\n   */\n\n  self.vehicle = function () {\n    return fake('{{vehicle.manufacturer}} {{vehicle.model}}');\n  };\n\n  self.vehicle.schema = {\n    \"description\": \"Generates a random vehicle.\",\n    \"sampleResults\": [\"BMW Explorer\", \"Ford Camry\", \"Lamborghini Ranchero\"]\n  };\n  /**\n   * manufacturer\n   *\n   * @method faker.vehicle.manufacturer\n   */\n\n  self.manufacturer = function () {\n    return faker.random.arrayElement(faker.definitions.vehicle.manufacturer);\n  };\n\n  self.manufacturer.schema = {\n    \"description\": \"Generates a manufacturer name.\",\n    \"sampleResults\": [\"Ford\", \"Jeep\", \"Tesla\"]\n  };\n  /**\n   * model\n   *\n   * @method faker.vehicle.model\n   */\n\n  self.model = function () {\n    return faker.random.arrayElement(faker.definitions.vehicle.model);\n  };\n\n  self.model.schema = {\n    \"description\": \"Generates a vehicle model.\",\n    \"sampleResults\": [\"Explorer\", \"Camry\", \"Ranchero\"]\n  };\n  /**\n   * type\n   *\n   * @method faker.vehicle.type\n   */\n\n  self.type = function () {\n    return faker.random.arrayElement(faker.definitions.vehicle.type);\n  };\n\n  self.type.schema = {\n    \"description\": \"Generates a vehicle type.\",\n    \"sampleResults\": [\"Coupe\", \"Convertable\", \"Sedan\", \"SUV\"]\n  };\n  /**\n   * fuel\n   *\n   * @method faker.vehicle.fuel\n   */\n\n  self.fuel = function () {\n    return faker.random.arrayElement(faker.definitions.vehicle.fuel);\n  };\n\n  self.fuel.schema = {\n    \"description\": \"Generates a fuel type.\",\n    \"sampleResults\": [\"Electric\", \"Gasoline\", \"Diesel\"]\n  };\n  /**\n   * vin\n   *\n   * @method faker.vehicle.vin\n   */\n\n  self.vin = function () {\n    var bannedChars = ['o', 'i', 'q'];\n    return (faker.random.alphaNumeric(10, {\n      bannedChars: bannedChars\n    }) + faker.random.alpha({\n      count: 1,\n      upcase: true,\n      bannedChars: bannedChars\n    }) + faker.random.alphaNumeric(1, {\n      bannedChars: bannedChars\n    }) + faker.datatype.number({\n      min: 10000,\n      max: 100000\n    }) // return five digit #\n    ).toUpperCase();\n  };\n\n  self.vin.schema = {\n    \"description\": \"Generates a valid VIN number.\",\n    \"sampleResults\": [\"YV1MH682762184654\", \"3C7WRMBJ2EG208836\"]\n  };\n  /**\n   * color\n   *\n   * @method faker.vehicle.color\n   */\n\n  self.color = function () {\n    return fake('{{commerce.color}}');\n  };\n\n  self.color.schema = {\n    \"description\": \"Generates a color\",\n    \"sampleResults\": [\"red\", \"white\", \"black\"]\n  };\n  /**\n     * vrm\n     *\n     * @method faker.vehicle.vrm\n     */\n\n  self.vrm = function () {\n    return (faker.random.alpha({\n      count: 2,\n      upcase: true\n    }) + faker.datatype.number({\n      min: 0,\n      max: 9\n    }) + faker.datatype.number({\n      min: 0,\n      max: 9\n    }) + faker.random.alpha({\n      count: 3,\n      upcase: true\n    })).toUpperCase();\n  };\n\n  self.vrm.schema = {\n    \"description\": \"Generates a vehicle vrm\",\n    \"sampleResults\": [\"MF56UPA\", \"GL19AAQ\", \"SF20TTA\"]\n  };\n  /**\n  * bicycle\n  *\n  * @method faker.vehicle.bicycle\n  */\n\n  self.bicycle = function () {\n    return faker.random.arrayElement(faker.definitions.vehicle.bicycle_type);\n  };\n\n  self.bicycle.schema = {\n    \"description\": \"Generates a type of bicycle\",\n    \"sampleResults\": [\"Adventure Road Bicycle\", \"City Bicycle\", \"Recumbent Bicycle\"]\n  };\n};\n\nmodule[\"exports\"] = Vehicle;","map":{"version":3,"sources":["/Users/melnychenkovadim/WebstormProjects/dashboard-redisgn/hermes-dashboard-redesign/node_modules/faker/lib/vehicle.js"],"names":["Vehicle","faker","self","fake","vehicle","schema","manufacturer","random","arrayElement","definitions","model","type","fuel","vin","bannedChars","alphaNumeric","alpha","count","upcase","datatype","number","min","max","toUpperCase","color","vrm","bicycle","bicycle_type","module"],"mappings":"AAAA;AACA;AACA;AACA;AACA,IAAIA,OAAO,GAAG,UAAUC,KAAV,EAAiB;AAC7B,MAAIC,IAAI,GAAG,IAAX;AACA,MAAIC,IAAI,GAAGF,KAAK,CAACE,IAAjB;AAEA;AACF;AACA;AACA;AACA;;AACED,EAAAA,IAAI,CAACE,OAAL,GAAe,YAAY;AACzB,WAAOD,IAAI,CAAC,4CAAD,CAAX;AACD,GAFD;;AAIAD,EAAAA,IAAI,CAACE,OAAL,CAAaC,MAAb,GAAsB;AACpB,mBAAe,6BADK;AAEpB,qBAAiB,CAAC,cAAD,EAAiB,YAAjB,EAA+B,sBAA/B;AAFG,GAAtB;AAKA;AACF;AACA;AACA;AACA;;AACEH,EAAAA,IAAI,CAACI,YAAL,GAAoB,YAAY;AAC9B,WAAOL,KAAK,CAACM,MAAN,CAAaC,YAAb,CAA0BP,KAAK,CAACQ,WAAN,CAAkBL,OAAlB,CAA0BE,YAApD,CAAP;AACD,GAFD;;AAIAJ,EAAAA,IAAI,CAACI,YAAL,CAAkBD,MAAlB,GAA2B;AACzB,mBAAe,gCADU;AAEzB,qBAAiB,CAAC,MAAD,EAAS,MAAT,EAAiB,OAAjB;AAFQ,GAA3B;AAMA;AACF;AACA;AACA;AACA;;AACEH,EAAAA,IAAI,CAACQ,KAAL,GAAa,YAAY;AACvB,WAAOT,KAAK,CAACM,MAAN,CAAaC,YAAb,CAA0BP,KAAK,CAACQ,WAAN,CAAkBL,OAAlB,CAA0BM,KAApD,CAAP;AACD,GAFD;;AAIAR,EAAAA,IAAI,CAACQ,KAAL,CAAWL,MAAX,GAAoB;AAClB,mBAAe,4BADG;AAElB,qBAAiB,CAAC,UAAD,EAAa,OAAb,EAAsB,UAAtB;AAFC,GAApB;AAKA;AACF;AACA;AACA;AACA;;AACEH,EAAAA,IAAI,CAACS,IAAL,GAAY,YAAY;AACtB,WAAOV,KAAK,CAACM,MAAN,CAAaC,YAAb,CAA0BP,KAAK,CAACQ,WAAN,CAAkBL,OAAlB,CAA0BO,IAApD,CAAP;AACD,GAFD;;AAIAT,EAAAA,IAAI,CAACS,IAAL,CAAUN,MAAV,GAAmB;AACjB,mBAAe,2BADE;AAEjB,qBAAiB,CAAC,OAAD,EAAU,aAAV,EAAyB,OAAzB,EAAkC,KAAlC;AAFA,GAAnB;AAKA;AACF;AACA;AACA;AACA;;AACEH,EAAAA,IAAI,CAACU,IAAL,GAAY,YAAY;AACtB,WAAOX,KAAK,CAACM,MAAN,CAAaC,YAAb,CAA0BP,KAAK,CAACQ,WAAN,CAAkBL,OAAlB,CAA0BQ,IAApD,CAAP;AACD,GAFD;;AAIAV,EAAAA,IAAI,CAACU,IAAL,CAAUP,MAAV,GAAmB;AACjB,mBAAe,wBADE;AAEjB,qBAAiB,CAAC,UAAD,EAAa,UAAb,EAAyB,QAAzB;AAFA,GAAnB;AAKA;AACF;AACA;AACA;AACA;;AACEH,EAAAA,IAAI,CAACW,GAAL,GAAW,YAAY;AACrB,QAAIC,WAAW,GAAC,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,CAAhB;AACA,WAAO,CACLb,KAAK,CAACM,MAAN,CAAaQ,YAAb,CAA0B,EAA1B,EAA8B;AAACD,MAAAA,WAAW,EAACA;AAAb,KAA9B,IACAb,KAAK,CAACM,MAAN,CAAaS,KAAb,CAAmB;AAAEC,MAAAA,KAAK,EAAE,CAAT;AAAYC,MAAAA,MAAM,EAAE,IAApB;AAA0BJ,MAAAA,WAAW,EAACA;AAAtC,KAAnB,CADA,GAEAb,KAAK,CAACM,MAAN,CAAaQ,YAAb,CAA0B,CAA1B,EAA6B;AAACD,MAAAA,WAAW,EAACA;AAAb,KAA7B,CAFA,GAGAb,KAAK,CAACkB,QAAN,CAAeC,MAAf,CAAsB;AAAEC,MAAAA,GAAG,EAAE,KAAP;AAAcC,MAAAA,GAAG,EAAE;AAAnB,KAAtB,CAJK,CAI6C;AAJ7C,MAKLC,WALK,EAAP;AAMD,GARD;;AAUArB,EAAAA,IAAI,CAACW,GAAL,CAASR,MAAT,GAAkB;AAChB,mBAAe,+BADC;AAEhB,qBAAiB,CAAC,mBAAD,EAAsB,mBAAtB;AAFD,GAAlB;AAKA;AACF;AACA;AACA;AACA;;AACEH,EAAAA,IAAI,CAACsB,KAAL,GAAa,YAAY;AACvB,WAAOrB,IAAI,CAAC,oBAAD,CAAX;AACD,GAFD;;AAIAD,EAAAA,IAAI,CAACsB,KAAL,CAAWnB,MAAX,GAAoB;AAClB,mBAAe,mBADG;AAElB,qBAAiB,CAAC,KAAD,EAAQ,OAAR,EAAiB,OAAjB;AAFC,GAApB;AAKA;AACF;AACA;AACA;AACA;;AACEH,EAAAA,IAAI,CAACuB,GAAL,GAAW,YAAY;AACrB,WAAO,CACLxB,KAAK,CAACM,MAAN,CAAaS,KAAb,CAAmB;AAAEC,MAAAA,KAAK,EAAE,CAAT;AAAYC,MAAAA,MAAM,EAAE;AAApB,KAAnB,IACMjB,KAAK,CAACkB,QAAN,CAAeC,MAAf,CAAsB;AAAEC,MAAAA,GAAG,EAAE,CAAP;AAAUC,MAAAA,GAAG,EAAE;AAAf,KAAtB,CADN,GAEMrB,KAAK,CAACkB,QAAN,CAAeC,MAAf,CAAsB;AAAEC,MAAAA,GAAG,EAAE,CAAP;AAAUC,MAAAA,GAAG,EAAE;AAAf,KAAtB,CAFN,GAGMrB,KAAK,CAACM,MAAN,CAAaS,KAAb,CAAmB;AAAEC,MAAAA,KAAK,EAAE,CAAT;AAAYC,MAAAA,MAAM,EAAE;AAApB,KAAnB,CAJD,EAKLK,WALK,EAAP;AAMD,GAPD;;AASArB,EAAAA,IAAI,CAACuB,GAAL,CAASpB,MAAT,GAAkB;AAChB,mBAAe,yBADC;AAEhB,qBAAiB,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB;AAFD,GAAlB;AAKA;AACF;AACA;AACA;AACA;;AACEH,EAAAA,IAAI,CAACwB,OAAL,GAAe,YAAY;AACzB,WAAOzB,KAAK,CAACM,MAAN,CAAaC,YAAb,CAA0BP,KAAK,CAACQ,WAAN,CAAkBL,OAAlB,CAA0BuB,YAApD,CAAP;AACD,GAFD;;AAIAzB,EAAAA,IAAI,CAACwB,OAAL,CAAarB,MAAb,GAAsB;AACpB,mBAAe,6BADK;AAEpB,qBAAiB,CAAC,wBAAD,EAA2B,cAA3B,EAA2C,mBAA3C;AAFG,GAAtB;AAID,CA7ID;;AA+IAuB,MAAM,CAAC,SAAD,CAAN,GAAoB5B,OAApB","sourcesContent":["/**\n *\n * @namespace faker.vehicle\n */\nvar Vehicle = function (faker) {\n  var self = this;\n  var fake = faker.fake;\n\n  /**\n   * vehicle\n   *\n   * @method faker.vehicle.vehicle\n   */\n  self.vehicle = function () {\n    return fake('{{vehicle.manufacturer}} {{vehicle.model}}');\n  };\n\n  self.vehicle.schema = {\n    \"description\": \"Generates a random vehicle.\",\n    \"sampleResults\": [\"BMW Explorer\", \"Ford Camry\", \"Lamborghini Ranchero\"]\n  };\n\n  /**\n   * manufacturer\n   *\n   * @method faker.vehicle.manufacturer\n   */\n  self.manufacturer = function () {\n    return faker.random.arrayElement(faker.definitions.vehicle.manufacturer);\n  };\n\n  self.manufacturer.schema = {\n    \"description\": \"Generates a manufacturer name.\",\n    \"sampleResults\": [\"Ford\", \"Jeep\", \"Tesla\"]\n  };\n\n\n  /**\n   * model\n   *\n   * @method faker.vehicle.model\n   */\n  self.model = function () {\n    return faker.random.arrayElement(faker.definitions.vehicle.model);\n  };\n\n  self.model.schema = {\n    \"description\": \"Generates a vehicle model.\",\n    \"sampleResults\": [\"Explorer\", \"Camry\", \"Ranchero\"]\n  };\n\n  /**\n   * type\n   *\n   * @method faker.vehicle.type\n   */\n  self.type = function () {\n    return faker.random.arrayElement(faker.definitions.vehicle.type);\n  };\n\n  self.type.schema = {\n    \"description\": \"Generates a vehicle type.\",\n    \"sampleResults\": [\"Coupe\", \"Convertable\", \"Sedan\", \"SUV\"]\n  };\n\n  /**\n   * fuel\n   *\n   * @method faker.vehicle.fuel\n   */\n  self.fuel = function () {\n    return faker.random.arrayElement(faker.definitions.vehicle.fuel);\n  };\n\n  self.fuel.schema = {\n    \"description\": \"Generates a fuel type.\",\n    \"sampleResults\": [\"Electric\", \"Gasoline\", \"Diesel\"]\n  };\n\n  /**\n   * vin\n   *\n   * @method faker.vehicle.vin\n   */\n  self.vin = function () {\n    var bannedChars=['o','i','q'];\n    return (\n      faker.random.alphaNumeric(10, {bannedChars:bannedChars}) +\n      faker.random.alpha({ count: 1, upcase: true ,bannedChars:bannedChars}) +\n      faker.random.alphaNumeric(1, {bannedChars:bannedChars}) +\n      faker.datatype.number({ min: 10000, max: 100000}) // return five digit #\n    ).toUpperCase();\n  };\n\n  self.vin.schema = {\n    \"description\": \"Generates a valid VIN number.\",\n    \"sampleResults\": [\"YV1MH682762184654\", \"3C7WRMBJ2EG208836\"]\n  };\n\n  /**\n   * color\n   *\n   * @method faker.vehicle.color\n   */\n  self.color = function () {\n    return fake('{{commerce.color}}');\n  };\n\n  self.color.schema = {\n    \"description\": \"Generates a color\",\n    \"sampleResults\": [\"red\", \"white\", \"black\"]\n  };\n\n  /**\n     * vrm\n     *\n     * @method faker.vehicle.vrm\n     */\n  self.vrm = function () {\n    return (\n      faker.random.alpha({ count: 2, upcase: true }) +\n            faker.datatype.number({ min: 0, max: 9 }) +\n            faker.datatype.number({ min: 0, max: 9 }) +\n            faker.random.alpha({ count: 3, upcase: true })\n    ).toUpperCase();\n  };\n\n  self.vrm.schema = {\n    \"description\": \"Generates a vehicle vrm\",\n    \"sampleResults\": [\"MF56UPA\", \"GL19AAQ\", \"SF20TTA\"]\n  };\n\n  /**\n  * bicycle\n  *\n  * @method faker.vehicle.bicycle\n  */\n  self.bicycle = function () {\n    return faker.random.arrayElement(faker.definitions.vehicle.bicycle_type);\n  };\n\n  self.bicycle.schema = {\n    \"description\": \"Generates a type of bicycle\",\n    \"sampleResults\": [\"Adventure Road Bicycle\", \"City Bicycle\", \"Recumbent Bicycle\"]\n  };\n};\n\nmodule[\"exports\"] = Vehicle;\n"]},"metadata":{},"sourceType":"script"}