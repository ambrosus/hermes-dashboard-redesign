{"ast":null,"code":"/**\n * @namespace faker.finance\n */\nvar Finance = function (faker) {\n  var ibanLib = require(\"./iban\");\n\n  var Helpers = faker.helpers,\n      self = this;\n  /**\n   * account\n   *\n   * @method faker.finance.account\n   * @param {number} length\n   */\n\n  self.account = function (length) {\n    length = length || 8;\n    var template = '';\n\n    for (var i = 0; i < length; i++) {\n      template = template + '#';\n    }\n\n    length = null;\n    return Helpers.replaceSymbolWithNumber(template);\n  };\n  /**\n   * accountName\n   *\n   * @method faker.finance.accountName\n   */\n\n\n  self.accountName = function () {\n    return [Helpers.randomize(faker.definitions.finance.account_type), 'Account'].join(' ');\n  };\n  /**\n   * routingNumber\n   *\n   * @method faker.finance.routingNumber\n   */\n\n\n  self.routingNumber = function () {\n    var routingNumber = Helpers.replaceSymbolWithNumber('########'); // Modules 10 straight summation.\n\n    var sum = 0;\n\n    for (var i = 0; i < routingNumber.length; i += 3) {\n      sum += Number(routingNumber[i]) * 3;\n      sum += Number(routingNumber[i + 1]) * 7;\n      sum += Number(routingNumber[i + 2]) || 0;\n    }\n\n    return routingNumber + (Math.ceil(sum / 10) * 10 - sum);\n  };\n  /**\n   * mask\n   *\n   * @method faker.finance.mask\n   * @param {number} length\n   * @param {boolean} parens\n   * @param {boolean} ellipsis\n   */\n\n\n  self.mask = function (length, parens, ellipsis) {\n    //set defaults\n    length = length == 0 || !length || typeof length == 'undefined' ? 4 : length;\n    parens = parens === null ? true : parens;\n    ellipsis = ellipsis === null ? true : ellipsis; //create a template for length\n\n    var template = '';\n\n    for (var i = 0; i < length; i++) {\n      template = template + '#';\n    } //prefix with ellipsis\n\n\n    template = ellipsis ? ['...', template].join('') : template;\n    template = parens ? ['(', template, ')'].join('') : template; //generate random numbers\n\n    template = Helpers.replaceSymbolWithNumber(template);\n    return template;\n  }; //min and max take in minimum and maximum amounts, dec is the decimal place you want rounded to, symbol is $, €, £, etc\n  //NOTE: this returns a string representation of the value, if you want a number use parseFloat and no symbol\n\n  /**\n   * amount\n   *\n   * @method faker.finance.amount\n   * @param {number} min\n   * @param {number} max\n   * @param {number} dec\n   * @param {string} symbol\n   *\n   * @return {string}\n   */\n\n\n  self.amount = function (min, max, dec, symbol, autoFormat) {\n    min = min || 0;\n    max = max || 1000;\n    dec = dec === undefined ? 2 : dec;\n    symbol = symbol || '';\n    const randValue = faker.datatype.number({\n      max: max,\n      min: min,\n      precision: Math.pow(10, -dec)\n    });\n    var formattedString;\n\n    if (autoFormat) {\n      formattedString = randValue.toLocaleString(undefined, {\n        minimumFractionDigits: dec\n      });\n    } else {\n      formattedString = randValue.toFixed(dec);\n    }\n\n    return symbol + formattedString;\n  };\n  /**\n   * transactionType\n   *\n   * @method faker.finance.transactionType\n   */\n\n\n  self.transactionType = function () {\n    return Helpers.randomize(faker.definitions.finance.transaction_type);\n  };\n  /**\n   * currencyCode\n   *\n   * @method faker.finance.currencyCode\n   */\n\n\n  self.currencyCode = function () {\n    return faker.random.objectElement(faker.definitions.finance.currency)['code'];\n  };\n  /**\n   * currencyName\n   *\n   * @method faker.finance.currencyName\n   */\n\n\n  self.currencyName = function () {\n    return faker.random.objectElement(faker.definitions.finance.currency, 'key');\n  };\n  /**\n   * currencySymbol\n   *\n   * @method faker.finance.currencySymbol\n   */\n\n\n  self.currencySymbol = function () {\n    var symbol;\n\n    while (!symbol) {\n      symbol = faker.random.objectElement(faker.definitions.finance.currency)['symbol'];\n    }\n\n    return symbol;\n  };\n  /**\n   * bitcoinAddress\n   *\n   * @method  faker.finance.bitcoinAddress\n   */\n\n\n  self.bitcoinAddress = function () {\n    var addressLength = faker.datatype.number({\n      min: 25,\n      max: 34\n    });\n    var address = faker.random.arrayElement(['1', '3']);\n\n    for (var i = 0; i < addressLength - 1; i++) address += faker.random.arrayElement('123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'.split(''));\n\n    return address;\n  };\n  /**\n   * litecoinAddress\n   *\n   * @method  faker.finance.litecoinAddress\n   */\n\n\n  self.litecoinAddress = function () {\n    var addressLength = faker.datatype.number({\n      min: 26,\n      max: 33\n    });\n    var address = faker.random.arrayElement(['L', 'M', '3']);\n\n    for (var i = 0; i < addressLength - 1; i++) address += faker.random.arrayElement('123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'.split(''));\n\n    return address;\n  };\n  /**\n   * Credit card number\n   * @method faker.finance.creditCardNumber\n   * @param {string} provider | scheme\n  */\n\n\n  self.creditCardNumber = function (provider) {\n    provider = provider || \"\";\n    var format, formats;\n    var localeFormat = faker.definitions.finance.credit_card;\n\n    if (provider in localeFormat) {\n      formats = localeFormat[provider]; // there chould be multiple formats\n\n      if (typeof formats === \"string\") {\n        format = formats;\n      } else {\n        format = faker.random.arrayElement(formats);\n      }\n    } else if (provider.match(/#/)) {\n      // The user chose an optional scheme\n      format = provider;\n    } else {\n      // Choose a random provider\n      if (typeof localeFormat === 'string') {\n        format = localeFormat;\n      } else if (typeof localeFormat === \"object\") {\n        // Credit cards are in a object structure\n        formats = faker.random.objectElement(localeFormat, \"value\"); // There chould be multiple formats\n\n        if (typeof formats === \"string\") {\n          format = formats;\n        } else {\n          format = faker.random.arrayElement(formats);\n        }\n      }\n    }\n\n    format = format.replace(/\\//g, \"\");\n    return Helpers.replaceCreditCardSymbols(format);\n  };\n  /**\n   * Credit card CVV\n   * @method faker.finance.creditCardCVV\n  */\n\n\n  self.creditCardCVV = function () {\n    var cvv = \"\";\n\n    for (var i = 0; i < 3; i++) {\n      cvv += faker.datatype.number({\n        max: 9\n      }).toString();\n    }\n\n    return cvv;\n  };\n  /**\n   * ethereumAddress\n   *\n   * @method  faker.finance.ethereumAddress\n   */\n\n\n  self.ethereumAddress = function () {\n    var address = faker.datatype.hexaDecimal(40).toLowerCase();\n    return address;\n  };\n  /**\n   * iban\n   *\n   * @param {boolean} [formatted=false] - Return a formatted version of the generated IBAN.\n   * @param {string} [countryCode] - The country code from which you want to generate an IBAN, if none is provided a random country will be used.\n   * @throws Will throw an error if the passed country code is not supported.\n   *\n   * @method  faker.finance.iban\n   */\n\n\n  self.iban = function (formatted, countryCode) {\n    var ibanFormat;\n\n    if (countryCode) {\n      var findFormat = function (currentFormat) {\n        return currentFormat.country === countryCode;\n      };\n\n      ibanFormat = ibanLib.formats.find(findFormat);\n    } else {\n      ibanFormat = faker.random.arrayElement(ibanLib.formats);\n    }\n\n    if (!ibanFormat) {\n      throw new Error('Country code ' + countryCode + ' not supported.');\n    }\n\n    var s = \"\";\n    var count = 0;\n\n    for (var b = 0; b < ibanFormat.bban.length; b++) {\n      var bban = ibanFormat.bban[b];\n      var c = bban.count;\n      count += bban.count;\n\n      while (c > 0) {\n        if (bban.type == \"a\") {\n          s += faker.random.arrayElement(ibanLib.alpha);\n        } else if (bban.type == \"c\") {\n          if (faker.datatype.number(100) < 80) {\n            s += faker.datatype.number(9);\n          } else {\n            s += faker.random.arrayElement(ibanLib.alpha);\n          }\n        } else {\n          if (c >= 3 && faker.datatype.number(100) < 30) {\n            if (faker.datatype.boolean()) {\n              s += faker.random.arrayElement(ibanLib.pattern100);\n              c -= 2;\n            } else {\n              s += faker.random.arrayElement(ibanLib.pattern10);\n              c--;\n            }\n          } else {\n            s += faker.datatype.number(9);\n          }\n        }\n\n        c--;\n      }\n\n      s = s.substring(0, count);\n    }\n\n    var checksum = 98 - ibanLib.mod97(ibanLib.toDigitString(s + ibanFormat.country + \"00\"));\n\n    if (checksum < 10) {\n      checksum = \"0\" + checksum;\n    }\n\n    var iban = ibanFormat.country + checksum + s;\n    return formatted ? iban.match(/.{1,4}/g).join(\" \") : iban;\n  };\n  /**\n   * bic\n   *\n   * @method  faker.finance.bic\n   */\n\n\n  self.bic = function () {\n    var vowels = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    var prob = faker.datatype.number(100);\n    return Helpers.replaceSymbols(\"???\") + faker.random.arrayElement(vowels) + faker.random.arrayElement(ibanLib.iso3166) + Helpers.replaceSymbols(\"?\") + \"1\" + (prob < 10 ? Helpers.replaceSymbols(\"?\" + faker.random.arrayElement(vowels) + \"?\") : prob < 40 ? Helpers.replaceSymbols(\"###\") : \"\");\n  };\n  /**\n   * description\n   *\n   * @method  faker.finance.transactionDescription\n   */\n\n\n  self.transactionDescription = function () {\n    var transaction = Helpers.createTransaction();\n    var account = transaction.account;\n    var amount = transaction.amount;\n    var transactionType = transaction.type;\n    var company = transaction.business;\n    var card = faker.finance.mask();\n    var currency = faker.finance.currencyCode();\n    return transactionType + \" transaction at \" + company + \" using card ending with ***\" + card + \" for \" + currency + \" \" + amount + \" in account ***\" + account;\n  };\n};\n\nmodule['exports'] = Finance;","map":{"version":3,"sources":["/Users/melnychenkovadim/WebstormProjects/dashboard-redisgn/hermes-dashboard-redesign/node_modules/faker/lib/finance.js"],"names":["Finance","faker","ibanLib","require","Helpers","helpers","self","account","length","template","i","replaceSymbolWithNumber","accountName","randomize","definitions","finance","account_type","join","routingNumber","sum","Number","Math","ceil","mask","parens","ellipsis","amount","min","max","dec","symbol","autoFormat","undefined","randValue","datatype","number","precision","pow","formattedString","toLocaleString","minimumFractionDigits","toFixed","transactionType","transaction_type","currencyCode","random","objectElement","currency","currencyName","currencySymbol","bitcoinAddress","addressLength","address","arrayElement","split","litecoinAddress","creditCardNumber","provider","format","formats","localeFormat","credit_card","match","replace","replaceCreditCardSymbols","creditCardCVV","cvv","toString","ethereumAddress","hexaDecimal","toLowerCase","iban","formatted","countryCode","ibanFormat","findFormat","currentFormat","country","find","Error","s","count","b","bban","c","type","alpha","boolean","pattern100","pattern10","substring","checksum","mod97","toDigitString","bic","vowels","prob","replaceSymbols","iso3166","transactionDescription","transaction","createTransaction","company","business","card","module"],"mappings":"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","sourcesContent":["/**\n * @namespace faker.finance\n */\nvar Finance = function (faker) {\n  var ibanLib = require(\"./iban\");\n  var Helpers = faker.helpers,\n      self = this;\n\n  /**\n   * account\n   *\n   * @method faker.finance.account\n   * @param {number} length\n   */\n  self.account = function (length) {\n\n      length = length || 8;\n\n      var template = '';\n\n      for (var i = 0; i < length; i++) {\n          template = template + '#';\n      }\n      length = null;\n      return Helpers.replaceSymbolWithNumber(template);\n  };\n\n  /**\n   * accountName\n   *\n   * @method faker.finance.accountName\n   */\n  self.accountName = function () {\n\n      return [Helpers.randomize(faker.definitions.finance.account_type), 'Account'].join(' ');\n  };\n\n  /**\n   * routingNumber\n   *\n   * @method faker.finance.routingNumber\n   */\n  self.routingNumber = function () {\n\n      var routingNumber = Helpers.replaceSymbolWithNumber('########');\n\n      // Modules 10 straight summation.\n      var sum = 0;\n\n      for (var i = 0; i < routingNumber.length; i += 3) {\n        sum += Number(routingNumber[i]) * 3;\n        sum += Number(routingNumber[i + 1]) * 7;\n        sum += Number(routingNumber[i + 2]) || 0;\n      }\n\n      return routingNumber + (Math.ceil(sum / 10) * 10 - sum);\n  }\n\n  /**\n   * mask\n   *\n   * @method faker.finance.mask\n   * @param {number} length\n   * @param {boolean} parens\n   * @param {boolean} ellipsis\n   */\n  self.mask = function (length, parens, ellipsis) {\n\n      //set defaults\n      length = (length == 0 || !length || typeof length == 'undefined') ? 4 : length;\n      parens = (parens === null) ? true : parens;\n      ellipsis = (ellipsis === null) ? true : ellipsis;\n\n      //create a template for length\n      var template = '';\n\n      for (var i = 0; i < length; i++) {\n          template = template + '#';\n      }\n\n      //prefix with ellipsis\n      template = (ellipsis) ? ['...', template].join('') : template;\n\n      template = (parens) ? ['(', template, ')'].join('') : template;\n\n      //generate random numbers\n      template = Helpers.replaceSymbolWithNumber(template);\n\n      return template;\n  };\n\n  //min and max take in minimum and maximum amounts, dec is the decimal place you want rounded to, symbol is $, €, £, etc\n  //NOTE: this returns a string representation of the value, if you want a number use parseFloat and no symbol\n\n  /**\n   * amount\n   *\n   * @method faker.finance.amount\n   * @param {number} min\n   * @param {number} max\n   * @param {number} dec\n   * @param {string} symbol\n   *\n   * @return {string}\n   */\n  self.amount = function (min, max, dec, symbol, autoFormat) {\n\n      min = min || 0;\n      max = max || 1000;\n      dec = dec === undefined ? 2 : dec;\n      symbol = symbol || '';\n      const randValue = faker.datatype.number({ max: max, min: min, precision: Math.pow(10, -dec) });\n\n      var formattedString;\n      if(autoFormat) {\n        formattedString = randValue.toLocaleString(undefined, {minimumFractionDigits: dec});\n      }\n      else {\n        formattedString = randValue.toFixed(dec);\n      }\n\n      return symbol + formattedString;\n  };\n\n  /**\n   * transactionType\n   *\n   * @method faker.finance.transactionType\n   */\n  self.transactionType = function () {\n      return Helpers.randomize(faker.definitions.finance.transaction_type);\n  };\n\n  /**\n   * currencyCode\n   *\n   * @method faker.finance.currencyCode\n   */\n  self.currencyCode = function () {\n      return faker.random.objectElement(faker.definitions.finance.currency)['code'];\n  };\n\n  /**\n   * currencyName\n   *\n   * @method faker.finance.currencyName\n   */\n  self.currencyName = function () {\n      return faker.random.objectElement(faker.definitions.finance.currency, 'key');\n  };\n\n  /**\n   * currencySymbol\n   *\n   * @method faker.finance.currencySymbol\n   */\n  self.currencySymbol = function () {\n      var symbol;\n\n      while (!symbol) {\n          symbol = faker.random.objectElement(faker.definitions.finance.currency)['symbol'];\n      }\n      return symbol;\n  };\n\n  /**\n   * bitcoinAddress\n   *\n   * @method  faker.finance.bitcoinAddress\n   */\n  self.bitcoinAddress = function () {\n    var addressLength = faker.datatype.number({ min: 25, max: 34 });\n\n    var address = faker.random.arrayElement(['1', '3']);\n\n    for (var i = 0; i < addressLength - 1; i++)\n      address += faker.random.arrayElement('123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'.split(''));\n\n    return address;\n  }\n\n/**\n * litecoinAddress\n *\n * @method  faker.finance.litecoinAddress\n */\nself.litecoinAddress = function () {\n  var addressLength = faker.datatype.number({ min: 26, max: 33 });\n\n  var address = faker.random.arrayElement(['L', 'M', '3']);\n\n  for (var i = 0; i < addressLength - 1; i++)\n    address += faker.random.arrayElement('123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'.split(''));\n\n  return address;\n}\n\n  /**\n   * Credit card number\n   * @method faker.finance.creditCardNumber\n   * @param {string} provider | scheme\n  */\n  self.creditCardNumber = function(provider){\n    provider = provider || \"\";\n    var format, formats;\n    var localeFormat = faker.definitions.finance.credit_card;\n    if (provider in localeFormat) {\n      formats = localeFormat[provider]; // there chould be multiple formats\n      if (typeof formats === \"string\") {\n        format = formats;\n      } else {\n        format = faker.random.arrayElement(formats);\n      }\n    } else if (provider.match(/#/)) { // The user chose an optional scheme\n      format = provider;\n    } else { // Choose a random provider\n      if (typeof localeFormat === 'string') {\n        format = localeFormat;\n      } else if( typeof localeFormat === \"object\") {\n        // Credit cards are in a object structure\n        formats = faker.random.objectElement(localeFormat, \"value\"); // There chould be multiple formats\n        if (typeof formats === \"string\") {\n          format = formats;\n        } else {\n          format = faker.random.arrayElement(formats);\n        }\n      }\n    }\n    format = format.replace(/\\//g,\"\")\n    return Helpers.replaceCreditCardSymbols(format);\n  };\n  /**\n   * Credit card CVV\n   * @method faker.finance.creditCardCVV\n  */\n  self.creditCardCVV = function() {\n    var cvv = \"\";\n    for (var i = 0; i < 3; i++) {\n      cvv += faker.datatype.number({max:9}).toString();\n    }\n    return cvv;\n  };\n\n  /**\n   * ethereumAddress\n   *\n   * @method  faker.finance.ethereumAddress\n   */\n  self.ethereumAddress = function () {\n    var address = faker.datatype.hexaDecimal(40).toLowerCase();\n    return address;\n  };\n\n  /**\n   * iban\n   *\n   * @param {boolean} [formatted=false] - Return a formatted version of the generated IBAN.\n   * @param {string} [countryCode] - The country code from which you want to generate an IBAN, if none is provided a random country will be used.\n   * @throws Will throw an error if the passed country code is not supported.\n   *\n   * @method  faker.finance.iban\n   */\n  self.iban = function (formatted, countryCode) {\n      var ibanFormat;\n      if (countryCode) {\n          var findFormat = function(currentFormat) { return currentFormat.country === countryCode; };\n          ibanFormat = ibanLib.formats.find(findFormat);\n      } else {\n          ibanFormat = faker.random.arrayElement(ibanLib.formats);\n      }\n\n      if (!ibanFormat) {\n          throw new Error('Country code ' + countryCode + ' not supported.');\n      }\n\n      var s = \"\";\n      var count = 0;\n      for (var b = 0; b < ibanFormat.bban.length; b++) {\n          var bban = ibanFormat.bban[b];\n          var c = bban.count;\n          count += bban.count;\n          while (c > 0) {\n              if (bban.type == \"a\") {\n                  s += faker.random.arrayElement(ibanLib.alpha);\n              } else if (bban.type == \"c\") {\n                  if (faker.datatype.number(100) < 80) {\n                      s += faker.datatype.number(9);\n                  } else {\n                      s += faker.random.arrayElement(ibanLib.alpha);\n                  }\n              } else {\n                  if (c >= 3 && faker.datatype.number(100) < 30) {\n                      if (faker.datatype.boolean()) {\n                          s += faker.random.arrayElement(ibanLib.pattern100);\n                          c -= 2;\n                      } else {\n                          s += faker.random.arrayElement(ibanLib.pattern10);\n                          c--;\n                      }\n                  } else {\n                      s += faker.datatype.number(9);\n                  }\n              }\n              c--;\n          }\n          s = s.substring(0, count);\n      }\n      var checksum = 98 - ibanLib.mod97(ibanLib.toDigitString(s + ibanFormat.country + \"00\"));\n      if (checksum < 10) {\n          checksum = \"0\" + checksum;\n      }\n      var iban = ibanFormat.country + checksum + s;\n      return formatted ? iban.match(/.{1,4}/g).join(\" \") : iban;\n  };\n\n  /**\n   * bic\n   *\n   * @method  faker.finance.bic\n   */\n  self.bic = function () {\n      var vowels = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n      var prob = faker.datatype.number(100);\n      return Helpers.replaceSymbols(\"???\") +\n          faker.random.arrayElement(vowels) +\n          faker.random.arrayElement(ibanLib.iso3166) +\n          Helpers.replaceSymbols(\"?\") + \"1\" +\n          (prob < 10 ?\n              Helpers.replaceSymbols(\"?\" + faker.random.arrayElement(vowels) + \"?\") :\n          prob < 40 ?\n              Helpers.replaceSymbols(\"###\") : \"\");\n  };\n\n  /**\n   * description\n   *\n   * @method  faker.finance.transactionDescription\n   */\n  self.transactionDescription = function() {\n    var transaction = Helpers.createTransaction();\n    var account = transaction.account;\n    var amount = transaction.amount;\n    var transactionType = transaction.type;\n    var company = transaction.business;\n    var card = faker.finance.mask();\n    var currency = faker.finance.currencyCode();\n    return transactionType + \" transaction at \" + company + \" using card ending with ***\" + card + \" for \" + currency + \" \" + amount + \" in account ***\" + account\n  };\n\n};\n\nmodule['exports'] = Finance;\n"]},"metadata":{},"sourceType":"script"}